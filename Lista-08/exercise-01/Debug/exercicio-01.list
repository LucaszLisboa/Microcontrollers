
exercicio-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002010  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800210c  0800210c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800210c  0800210c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800210c  0800210c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002120  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002120  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a645  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178f  00000000  00000000  0002a679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a811  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afa0  00000000  00000000  00047af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0063  00000000  00000000  00052a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  00102b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080020b4 	.word	0x080020b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080020b4 	.word	0x080020b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000224:	23a0      	movs	r3, #160	; 0xa0
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2120      	movs	r1, #32
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fd0b 	bl	8000c46 <HAL_GPIO_TogglePin>
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}

08000238 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	0002      	movs	r2, r0
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	801a      	strh	r2, [r3, #0]
	if(__HAL_TIM_GET_AUTORELOAD(&htim2) == 3200){
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800024a:	23c8      	movs	r3, #200	; 0xc8
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	429a      	cmp	r2, r3
 8000250:	d10d      	bne.n	800026e <HAL_GPIO_EXTI_Falling_Callback+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim2,800);
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	22c8      	movs	r2, #200	; 0xc8
 8000258:	0092      	lsls	r2, r2, #2
 800025a:	62da      	str	r2, [r3, #44]	; 0x2c
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	0092      	lsls	r2, r2, #2
 8000262:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2200      	movs	r2, #0
 800026a:	625a      	str	r2, [r3, #36]	; 0x24
//	case 2:
//		__HAL_TIM_SET_AUTORELOAD(&htim2, 800);
//		__HAL_TIM_SET_COUNTER(&htim2, 0);
//		flag = 0;
//		break;
}
 800026c:	e00c      	b.n	8000288 <HAL_GPIO_EXTI_Falling_Callback+0x50>
		__HAL_TIM_SET_AUTORELOAD(&htim2,3200);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	22c8      	movs	r2, #200	; 0xc8
 8000274:	0112      	lsls	r2, r2, #4
 8000276:	62da      	str	r2, [r3, #44]	; 0x2c
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800027a:	22c8      	movs	r2, #200	; 0xc8
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000028 	.word	0x20000028

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 f9d2 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f80c 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8be 	bl	8000420 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a4:	f000 f866 	bl	8000374 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002a8:	4b02      	ldr	r3, [pc, #8]	; (80002b4 <main+0x20>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 faa2 	bl	80017f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <main+0x1c>
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000028 	.word	0x20000028

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b095      	sub	sp, #84	; 0x54
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	233c      	movs	r3, #60	; 0x3c
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f001 feeb 	bl	80020a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f001 fee4 	bl	80020a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fcff 	bl	8000ce4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0052      	lsls	r2, r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f4:	0021      	movs	r1, r4
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2202      	movs	r2, #2
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2208      	movs	r2, #8
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0292      	lsls	r2, r2, #10
 8000320:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0492      	lsls	r2, r2, #18
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0592      	lsls	r2, r2, #22
 8000330:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fd15 	bl	8000d64 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800033e:	f000 f8cf 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f866 	bl	8001430 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000368:	f000 f8ba 	bl	80004e0 <Error_Handler>
  }
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b015      	add	sp, #84	; 0x54
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	2310      	movs	r3, #16
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	2310      	movs	r3, #16
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f001 fe8d 	bl	80020a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	0018      	movs	r0, r3
 800038e:	230c      	movs	r3, #12
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f001 fe86 	bl	80020a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_TIM2_Init+0xa4>)
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	05d2      	lsls	r2, r2, #23
 800039e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80003a0:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003a2:	4a1e      	ldr	r2, [pc, #120]	; (800041c <MX_TIM2_Init+0xa8>)
 80003a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003ae:	22c8      	movs	r2, #200	; 0xc8
 80003b0:	0112      	lsls	r2, r2, #4
 80003b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f9be 	bl	8001744 <HAL_TIM_Base_Init>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f888 	bl	80004e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	2110      	movs	r1, #16
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	0152      	lsls	r2, r2, #5
 80003d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003da:	187a      	adds	r2, r7, r1
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003de:	0011      	movs	r1, r2
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fb9b 	bl	8001b1c <HAL_TIM_ConfigClockSource>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80003ea:	f000 f879 	bl	80004e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fa:	1d3a      	adds	r2, r7, #4
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_TIM2_Init+0xa4>)
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fd9d 	bl	8001f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800040a:	f000 f869 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b008      	add	sp, #32
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	20000028 	.word	0x20000028
 800041c:	0000270f 	.word	0x0000270f

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	240c      	movs	r4, #12
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f001 fe37 	bl	80020a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_GPIO_Init+0xb8>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_GPIO_Init+0xb8>)
 800043c:	2104      	movs	r1, #4
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_GPIO_Init+0xb8>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000446:	2204      	movs	r2, #4
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_GPIO_Init+0xb8>)
 8000450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_GPIO_Init+0xb8>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_GPIO_Init+0xb8>)
 800045c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fbcc 	bl	8000c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Pin */
  GPIO_InitStruct.Pin = USER_Pin;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	0192      	lsls	r2, r2, #6
 800047a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2284      	movs	r2, #132	; 0x84
 8000480:	0392      	lsls	r2, r2, #14
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 800048a:	193b      	adds	r3, r7, r4
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <MX_GPIO_Init+0xbc>)
 800048e:	0019      	movs	r1, r3
 8000490:	0010      	movs	r0, r2
 8000492:	f000 fa4f 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000496:	0021      	movs	r1, r4
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2220      	movs	r2, #32
 800049c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2201      	movs	r2, #1
 80004a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fa3b 	bl	8000934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	2007      	movs	r0, #7
 80004c4:	f000 fa04 	bl	80008d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004c8:	2007      	movs	r0, #7
 80004ca:	f000 fa16 	bl	80008fa <HAL_NVIC_EnableIRQ>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b009      	add	sp, #36	; 0x24
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000
 80004dc:	50000800 	.word	0x50000800

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_MspInit+0x4c>)
 80004f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <HAL_MspInit+0x4c>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	641a      	str	r2, [r3, #64]	; 0x40
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_MspInit+0x4c>)
 8000500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_MspInit+0x4c>)
 800050c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x4c>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0549      	lsls	r1, r1, #21
 8000514:	430a      	orrs	r2, r1
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_MspInit+0x4c>)
 800051a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	055b      	lsls	r3, r3, #21
 8000520:	4013      	ands	r3, r2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000526:	23c0      	movs	r3, #192	; 0xc0
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	0018      	movs	r0, r3
 800052c:	f000 f90e 	bl	800074c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	429a      	cmp	r2, r3
 800054e:	d113      	bne.n	8000578 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_TIM_Base_MspInit+0x44>)
 8000552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_TIM_Base_MspInit+0x44>)
 8000556:	2101      	movs	r1, #1
 8000558:	430a      	orrs	r2, r1
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_TIM_Base_MspInit+0x44>)
 800055e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000560:	2201      	movs	r2, #1
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	200f      	movs	r0, #15
 800056e:	f000 f9af 	bl	80008d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000572:	200f      	movs	r0, #15
 8000574:	f000 f9c1 	bl	80008fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b004      	add	sp, #16
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 f8b4 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Pin);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	019b      	lsls	r3, r3, #6
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fb5e 	bl	8000c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <TIM2_IRQHandler+0x14>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 f972 	bl	80018b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	20000028 	.word	0x20000028

080005e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f0:	f7ff fff6 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	; (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061a:	f001 fd1f 	bl	800205c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800061e:	f7ff fe39 	bl	8000294 <main>

08000622 <LoopForever>:

LoopForever:
  b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000630:	08002114 	.word	0x08002114
  ldr r2, =_sbss
 8000634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000638:	20000078 	.word	0x20000078

0800063c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_COMP_IRQHandler>
	...

08000640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_Init+0x3c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_Init+0x3c>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0049      	lsls	r1, r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f810 	bl	8000680 <HAL_InitTick>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d003      	beq.n	800066c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e001      	b.n	8000670 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff ff3e 	bl	80004ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	230f      	movs	r3, #15
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <HAL_InitTick+0x88>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d02b      	beq.n	80006f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <HAL_InitTick+0x8c>)
 800069a:	681c      	ldr	r4, [r3, #0]
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_InitTick+0x88>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	23fa      	movs	r3, #250	; 0xfa
 80006a4:	0098      	lsls	r0, r3, #2
 80006a6:	f7ff fd2d 	bl	8000104 <__udivsi3>
 80006aa:	0003      	movs	r3, r0
 80006ac:	0019      	movs	r1, r3
 80006ae:	0020      	movs	r0, r4
 80006b0:	f7ff fd28 	bl	8000104 <__udivsi3>
 80006b4:	0003      	movs	r3, r0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f92f 	bl	800091a <HAL_SYSTICK_Config>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d112      	bne.n	80006e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d80a      	bhi.n	80006dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	2200      	movs	r2, #0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f8fe 	bl	80008d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_InitTick+0x90>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	e00d      	b.n	80006f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e008      	b.n	80006f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e6:	230f      	movs	r3, #15
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e003      	b.n	80006f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	781b      	ldrb	r3, [r3, #0]
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b005      	add	sp, #20
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000008 	.word	0x20000008
 800070c:	20000000 	.word	0x20000000
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	001a      	movs	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	18d2      	adds	r2, r2, r3
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000008 	.word	0x20000008
 8000734:	20000074 	.word	0x20000074

08000738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000074 	.word	0x20000074

0800074c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800075a:	4013      	ands	r3, r2
 800075c:	0019      	movs	r1, r3
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40010000 	.word	0x40010000
 8000774:	fffff9ff 	.word	0xfffff9ff

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b7f      	cmp	r3, #127	; 0x7f
 800078a:	d809      	bhi.n	80007a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	231f      	movs	r3, #31
 8000794:	401a      	ands	r2, r3
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_EnableIRQ+0x30>)
 8000798:	2101      	movs	r1, #1
 800079a:	4091      	lsls	r1, r2
 800079c:	000a      	movs	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b7f      	cmp	r3, #127	; 0x7f
 80007c0:	d828      	bhi.n	8000814 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c2:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <__NVIC_SetPriority+0xd4>)
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	33c0      	adds	r3, #192	; 0xc0
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	589b      	ldr	r3, [r3, r2]
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0011      	movs	r1, r2
 80007d8:	2203      	movs	r2, #3
 80007da:	400a      	ands	r2, r1
 80007dc:	00d2      	lsls	r2, r2, #3
 80007de:	21ff      	movs	r1, #255	; 0xff
 80007e0:	4091      	lsls	r1, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	401a      	ands	r2, r3
 80007e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	401a      	ands	r2, r3
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0018      	movs	r0, r3
 80007f8:	2303      	movs	r3, #3
 80007fa:	4003      	ands	r3, r0
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	481f      	ldr	r0, [pc, #124]	; (8000880 <__NVIC_SetPriority+0xd4>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b25b      	sxtb	r3, r3
 8000808:	089b      	lsrs	r3, r3, #2
 800080a:	430a      	orrs	r2, r1
 800080c:	33c0      	adds	r3, #192	; 0xc0
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000812:	e031      	b.n	8000878 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <__NVIC_SetPriority+0xd8>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0019      	movs	r1, r3
 800081c:	230f      	movs	r3, #15
 800081e:	400b      	ands	r3, r1
 8000820:	3b08      	subs	r3, #8
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	3306      	adds	r3, #6
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	3304      	adds	r3, #4
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1dfa      	adds	r2, r7, #7
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	0011      	movs	r1, r2
 8000834:	2203      	movs	r2, #3
 8000836:	400a      	ands	r2, r1
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	21ff      	movs	r1, #255	; 0xff
 800083c:	4091      	lsls	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	43d2      	mvns	r2, r2
 8000842:	401a      	ands	r2, r3
 8000844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	22ff      	movs	r2, #255	; 0xff
 800084c:	401a      	ands	r2, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	2303      	movs	r3, #3
 8000856:	4003      	ands	r3, r0
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <__NVIC_SetPriority+0xd8>)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	001c      	movs	r4, r3
 8000864:	230f      	movs	r3, #15
 8000866:	4023      	ands	r3, r4
 8000868:	3b08      	subs	r3, #8
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	430a      	orrs	r2, r1
 800086e:	3306      	adds	r3, #6
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	18c3      	adds	r3, r0, r3
 8000874:	3304      	adds	r3, #4
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b003      	add	sp, #12
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	045b      	lsls	r3, r3, #17
 8000898:	429a      	cmp	r2, r3
 800089a:	d301      	bcc.n	80008a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089c:	2301      	movs	r3, #1
 800089e:	e010      	b.n	80008c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <SysTick_Config+0x44>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	3a01      	subs	r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a8:	2301      	movs	r3, #1
 80008aa:	425b      	negs	r3, r3
 80008ac:	2103      	movs	r1, #3
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff7c 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_Config+0x44>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SysTick_Config+0x44>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	210f      	movs	r1, #15
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	1c02      	adds	r2, r0, #0
 80008e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	0002      	movs	r2, r0
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ff33 	bl	8000778 <__NVIC_EnableIRQ>
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ffaf 	bl	8000888 <SysTick_Config>
 800092a:	0003      	movs	r3, r0
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000942:	e14d      	b.n	8000be0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d100      	bne.n	800095c <HAL_GPIO_Init+0x28>
 800095a:	e13e      	b.n	8000bda <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2203      	movs	r2, #3
 8000962:	4013      	ands	r3, r2
 8000964:	2b01      	cmp	r3, #1
 8000966:	d005      	beq.n	8000974 <HAL_GPIO_Init+0x40>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	2b02      	cmp	r3, #2
 8000972:	d130      	bne.n	80009d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	43da      	mvns	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	409a      	lsls	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009aa:	2201      	movs	r2, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	43da      	mvns	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	2201      	movs	r2, #1
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2203      	movs	r2, #3
 80009dc:	4013      	ands	r3, r2
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d017      	beq.n	8000a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2203      	movs	r2, #3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d123      	bne.n	8000a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	58d3      	ldr	r3, [r2, r3]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	2207      	movs	r2, #7
 8000a30:	4013      	ands	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	409a      	lsls	r2, r3
 8000a38:	0013      	movs	r3, r2
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2107      	movs	r1, #7
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	08da      	lsrs	r2, r3, #3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3208      	adds	r2, #8
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	6939      	ldr	r1, [r7, #16]
 8000a64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	43da      	mvns	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2203      	movs	r2, #3
 8000a84:	401a      	ands	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	23c0      	movs	r3, #192	; 0xc0
 8000aa0:	029b      	lsls	r3, r3, #10
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d100      	bne.n	8000aa8 <HAL_GPIO_Init+0x174>
 8000aa6:	e098      	b.n	8000bda <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000aa8:	4a53      	ldr	r2, [pc, #332]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3318      	adds	r3, #24
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	589b      	ldr	r3, [r3, r2]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4013      	ands	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	220f      	movs	r2, #15
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	23a0      	movs	r3, #160	; 0xa0
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x1d6>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <HAL_GPIO_Init+0x2c8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x1d2>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <HAL_GPIO_Init+0x2cc>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x1ce>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a46      	ldr	r2, [pc, #280]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x1ca>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <HAL_GPIO_Init+0x2d4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x1c6>
 8000af6:	2304      	movs	r3, #4
 8000af8:	e008      	b.n	8000b0c <HAL_GPIO_Init+0x1d8>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x1d8>
 8000afe:	2303      	movs	r3, #3
 8000b00:	e004      	b.n	8000b0c <HAL_GPIO_Init+0x1d8>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e002      	b.n	8000b0c <HAL_GPIO_Init+0x1d8>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x1d8>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	2103      	movs	r1, #3
 8000b10:	400a      	ands	r2, r1
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	4093      	lsls	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b1c:	4936      	ldr	r1, [pc, #216]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3318      	adds	r3, #24
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b2a:	4a33      	ldr	r2, [pc, #204]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	58d3      	ldr	r3, [r2, r3]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	025b      	lsls	r3, r3, #9
 8000b44:	4013      	ands	r3, r2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b50:	4929      	ldr	r1, [pc, #164]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b5a:	2384      	movs	r3, #132	; 0x84
 8000b5c:	58d3      	ldr	r3, [r2, r3]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	4013      	ands	r3, r2
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b7e:	491e      	ldr	r1, [pc, #120]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b80:	2284      	movs	r2, #132	; 0x84
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	035b      	lsls	r3, r3, #13
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	039b      	lsls	r3, r3, #14
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	1e13      	subs	r3, r2, #0
 8000bea:	d000      	beq.n	8000bee <HAL_GPIO_Init+0x2ba>
 8000bec:	e6aa      	b.n	8000944 <HAL_GPIO_Init+0x10>
  }
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b006      	add	sp, #24
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021800 	.word	0x40021800
 8000bfc:	50000400 	.word	0x50000400
 8000c00:	50000800 	.word	0x50000800
 8000c04:	50000c00 	.word	0x50000c00
 8000c08:	50001000 	.word	0x50001000

08000c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	0008      	movs	r0, r1
 8000c16:	0011      	movs	r1, r2
 8000c18:	1cbb      	adds	r3, r7, #2
 8000c1a:	1c02      	adds	r2, r0, #0
 8000c1c:	801a      	strh	r2, [r3, #0]
 8000c1e:	1c7b      	adds	r3, r7, #1
 8000c20:	1c0a      	adds	r2, r1, #0
 8000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c24:	1c7b      	adds	r3, r7, #1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d004      	beq.n	8000c36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c2c:	1cbb      	adds	r3, r7, #2
 8000c2e:	881a      	ldrh	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c34:	e003      	b.n	8000c3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c36:	1cbb      	adds	r3, r7, #2
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	000a      	movs	r2, r1
 8000c50:	1cbb      	adds	r3, r7, #2
 8000c52:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5a:	1cbb      	adds	r3, r7, #2
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	041a      	lsls	r2, r3, #16
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	1cb9      	adds	r1, r7, #2
 8000c6a:	8809      	ldrh	r1, [r1, #0]
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b004      	add	sp, #16
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	0002      	movs	r2, r0
 8000c84:	1dbb      	adds	r3, r7, #6
 8000c86:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	1dba      	adds	r2, r7, #6
 8000c8e:	8812      	ldrh	r2, [r2, #0]
 8000c90:	4013      	ands	r3, r2
 8000c92:	d008      	beq.n	8000ca6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c96:	1dba      	adds	r2, r7, #6
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 f815 	bl	8000cd0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	1dba      	adds	r2, r7, #6
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d008      	beq.n	8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cb4:	1dba      	adds	r2, r7, #6
 8000cb6:	8812      	ldrh	r2, [r2, #0]
 8000cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff faba 	bl	8000238 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021800 	.word	0x40021800

08000cd0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d11f      	bne.n	8000d48 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4912      	ldr	r1, [pc, #72]	; (8000d60 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff f9f4 	bl	8000104 <__udivsi3>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d22:	e008      	b.n	8000d36 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e001      	b.n	8000d36 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e009      	b.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d38:	695a      	ldr	r2, [r3, #20]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d0ed      	beq.n	8000d24 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40007000 	.word	0x40007000
 8000d58:	fffff9ff 	.word	0xfffff9ff
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	000f4240 	.word	0x000f4240

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f000 fb56 	bl	8001424 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d100      	bne.n	8000d84 <HAL_RCC_OscConfig+0x20>
 8000d82:	e07d      	b.n	8000e80 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d84:	4bc3      	ldr	r3, [pc, #780]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2238      	movs	r2, #56	; 0x38
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d8e:	4bc1      	ldr	r3, [pc, #772]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2203      	movs	r2, #3
 8000d94:	4013      	ands	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d102      	bne.n	8000da4 <HAL_RCC_OscConfig+0x40>
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d002      	beq.n	8000daa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000daa:	4bba      	ldr	r3, [pc, #744]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	029b      	lsls	r3, r3, #10
 8000db2:	4013      	ands	r3, r2
 8000db4:	d063      	beq.n	8000e7e <HAL_RCC_OscConfig+0x11a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d15f      	bne.n	8000e7e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f000 fb30 	bl	8001424 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	025b      	lsls	r3, r3, #9
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d107      	bne.n	8000de0 <HAL_RCC_OscConfig+0x7c>
 8000dd0:	4bb0      	ldr	r3, [pc, #704]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4baf      	ldr	r3, [pc, #700]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e020      	b.n	8000e22 <HAL_RCC_OscConfig+0xbe>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	23a0      	movs	r3, #160	; 0xa0
 8000de6:	02db      	lsls	r3, r3, #11
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d10e      	bne.n	8000e0a <HAL_RCC_OscConfig+0xa6>
 8000dec:	4ba9      	ldr	r3, [pc, #676]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	02c9      	lsls	r1, r1, #11
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4ba5      	ldr	r3, [pc, #660]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0249      	lsls	r1, r1, #9
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e00b      	b.n	8000e22 <HAL_RCC_OscConfig+0xbe>
 8000e0a:	4ba2      	ldr	r3, [pc, #648]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4ba1      	ldr	r3, [pc, #644]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e10:	49a1      	ldr	r1, [pc, #644]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	4b9f      	ldr	r3, [pc, #636]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b9e      	ldr	r3, [pc, #632]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	499f      	ldr	r1, [pc, #636]	; (800109c <HAL_RCC_OscConfig+0x338>)
 8000e1e:	400a      	ands	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d014      	beq.n	8000e54 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fc85 	bl	8000738 <HAL_GetTick>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fc80 	bl	8000738 <HAL_GetTick>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e2ee      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e46:	4b93      	ldr	r3, [pc, #588]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xd0>
 8000e52:	e015      	b.n	8000e80 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc70 	bl	8000738 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc6b 	bl	8000738 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e2d9      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e70:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	029b      	lsls	r3, r3, #10
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0xfa>
 8000e7c:	e000      	b.n	8000e80 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2202      	movs	r2, #2
 8000e86:	4013      	ands	r3, r2
 8000e88:	d100      	bne.n	8000e8c <HAL_RCC_OscConfig+0x128>
 8000e8a:	e099      	b.n	8000fc0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8c:	4b81      	ldr	r3, [pc, #516]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2238      	movs	r2, #56	; 0x38
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e96:	4b7f      	ldr	r3, [pc, #508]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d102      	bne.n	8000eac <HAL_RCC_OscConfig+0x148>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d002      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d135      	bne.n	8000f1e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb2:	4b78      	ldr	r3, [pc, #480]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x166>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e2ac      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b72      	ldr	r3, [pc, #456]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a74      	ldr	r2, [pc, #464]	; (80010a0 <HAL_RCC_OscConfig+0x33c>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	021a      	lsls	r2, r3, #8
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d112      	bne.n	8000f0c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6e      	ldr	r2, [pc, #440]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000efa:	4b66      	ldr	r3, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0adb      	lsrs	r3, r3, #11
 8000f00:	2207      	movs	r2, #7
 8000f02:	4013      	ands	r3, r2
 8000f04:	4a68      	ldr	r2, [pc, #416]	; (80010a8 <HAL_RCC_OscConfig+0x344>)
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	4b68      	ldr	r3, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x348>)
 8000f0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f0c:	4b68      	ldr	r3, [pc, #416]	; (80010b0 <HAL_RCC_OscConfig+0x34c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fbb5 	bl	8000680 <HAL_InitTick>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d051      	beq.n	8000fbe <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e282      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d030      	beq.n	8000f88 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5e      	ldr	r2, [pc, #376]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	0019      	movs	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	4b57      	ldr	r3, [pc, #348]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f3a:	4b56      	ldr	r3, [pc, #344]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fbf6 	bl	8000738 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f52:	f7ff fbf1 	bl	8000738 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e25f      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f70:	4b48      	ldr	r3, [pc, #288]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <HAL_RCC_OscConfig+0x33c>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	0019      	movs	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	021a      	lsls	r2, r3, #8
 8000f80:	4b44      	ldr	r3, [pc, #272]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f82:	430a      	orrs	r2, r1
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	e01b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f88:	4b42      	ldr	r3, [pc, #264]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b41      	ldr	r3, [pc, #260]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	4949      	ldr	r1, [pc, #292]	; (80010b4 <HAL_RCC_OscConfig+0x350>)
 8000f90:	400a      	ands	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fbd0 	bl	8000738 <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fbcb 	bl	8000738 <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e239      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x23a>
 8000fbc:	e000      	b.n	8000fc0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d047      	beq.n	800105a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2238      	movs	r2, #56	; 0x38
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b18      	cmp	r3, #24
 8000fd4:	d10a      	bne.n	8000fec <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d03c      	beq.n	800105a <HAL_RCC_OscConfig+0x2f6>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d138      	bne.n	800105a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e21b      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d019      	beq.n	8001028 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb9a 	bl	8000738 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fb95 	bl	8000738 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e203      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	2202      	movs	r2, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d0f1      	beq.n	800100a <HAL_RCC_OscConfig+0x2a6>
 8001026:	e018      	b.n	800105a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800102a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800102e:	2101      	movs	r1, #1
 8001030:	438a      	bics	r2, r1
 8001032:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fb80 	bl	8000738 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff fb7b 	bl	8000738 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e1e9      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d1f1      	bne.n	800103e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_RCC_OscConfig+0x302>
 8001064:	e0c6      	b.n	80011f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001066:	231f      	movs	r3, #31
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2238      	movs	r2, #56	; 0x38
 8001074:	4013      	ands	r3, r2
 8001076:	2b20      	cmp	r3, #32
 8001078:	d11e      	bne.n	80010b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d100      	bne.n	8001086 <HAL_RCC_OscConfig+0x322>
 8001084:	e0b6      	b.n	80011f4 <HAL_RCC_OscConfig+0x490>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d000      	beq.n	8001090 <HAL_RCC_OscConfig+0x32c>
 800108e:	e0b1      	b.n	80011f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e1c7      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
 8001094:	40021000 	.word	0x40021000
 8001098:	fffeffff 	.word	0xfffeffff
 800109c:	fffbffff 	.word	0xfffbffff
 80010a0:	ffff80ff 	.word	0xffff80ff
 80010a4:	ffffc7ff 	.word	0xffffc7ff
 80010a8:	00f42400 	.word	0x00f42400
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000004 	.word	0x20000004
 80010b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010b8:	4bb8      	ldr	r3, [pc, #736]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80010ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_OscConfig+0x364>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x366>
 80010c8:	2300      	movs	r3, #0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d011      	beq.n	80010f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4bb3      	ldr	r3, [pc, #716]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80010d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010d2:	4bb2      	ldr	r3, [pc, #712]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0549      	lsls	r1, r1, #21
 80010d8:	430a      	orrs	r2, r1
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
 80010dc:	4baf      	ldr	r3, [pc, #700]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80010de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	055b      	lsls	r3, r3, #21
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010ea:	231f      	movs	r3, #31
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	4bab      	ldr	r3, [pc, #684]	; (80013a0 <HAL_RCC_OscConfig+0x63c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4013      	ands	r3, r2
 80010fc:	d11a      	bne.n	8001134 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010fe:	4ba8      	ldr	r3, [pc, #672]	; (80013a0 <HAL_RCC_OscConfig+0x63c>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4ba7      	ldr	r3, [pc, #668]	; (80013a0 <HAL_RCC_OscConfig+0x63c>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0049      	lsls	r1, r1, #1
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb14 	bl	8000738 <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001116:	f7ff fb0f 	bl	8000738 <HAL_GetTick>
 800111a:	0002      	movs	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e17d      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x63c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4013      	ands	r3, r2
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x3e6>
 800113c:	4b97      	ldr	r3, [pc, #604]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800113e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001140:	4b96      	ldr	r3, [pc, #600]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	65da      	str	r2, [r3, #92]	; 0x5c
 8001148:	e01c      	b.n	8001184 <HAL_RCC_OscConfig+0x420>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x408>
 8001152:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001154:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001158:	2104      	movs	r1, #4
 800115a:	430a      	orrs	r2, r1
 800115c:	65da      	str	r2, [r3, #92]	; 0x5c
 800115e:	4b8f      	ldr	r3, [pc, #572]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001162:	4b8e      	ldr	r3, [pc, #568]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	65da      	str	r2, [r3, #92]	; 0x5c
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0x420>
 800116c:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800116e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001170:	4b8a      	ldr	r3, [pc, #552]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	65da      	str	r2, [r3, #92]	; 0x5c
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800117a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800117c:	4b87      	ldr	r3, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800117e:	2104      	movs	r1, #4
 8001180:	438a      	bics	r2, r1
 8001182:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d014      	beq.n	80011b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fad4 	bl	8000738 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001194:	e009      	b.n	80011aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff facf 	bl	8000738 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	4a80      	ldr	r2, [pc, #512]	; (80013a4 <HAL_RCC_OscConfig+0x640>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e13c      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011aa:	4b7c      	ldr	r3, [pc, #496]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x432>
 80011b4:	e013      	b.n	80011de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b6:	f7ff fabf 	bl	8000738 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011be:	e009      	b.n	80011d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f7ff faba 	bl	8000738 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_RCC_OscConfig+0x640>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e127      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	4b71      	ldr	r3, [pc, #452]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80011d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d8:	2202      	movs	r2, #2
 80011da:	4013      	ands	r3, r2
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011de:	231f      	movs	r3, #31
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b6c      	ldr	r3, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ec:	4b6b      	ldr	r3, [pc, #428]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80011ee:	496e      	ldr	r1, [pc, #440]	; (80013a8 <HAL_RCC_OscConfig+0x644>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2220      	movs	r2, #32
 80011fa:	4013      	ands	r3, r2
 80011fc:	d039      	beq.n	8001272 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01b      	beq.n	800123e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b64      	ldr	r3, [pc, #400]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	03c9      	lsls	r1, r1, #15
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fa90 	bl	8000738 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800121e:	f7ff fa8b 	bl	8000738 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0f9      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001230:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	4013      	ands	r3, r2
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x4ba>
 800123c:	e019      	b.n	8001272 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001244:	4959      	ldr	r1, [pc, #356]	; (80013ac <HAL_RCC_OscConfig+0x648>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fa75 	bl	8000738 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001254:	f7ff fa70 	bl	8000738 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e0de      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <HAL_RCC_OscConfig+0x518>
 800127a:	e0d2      	b.n	8001422 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2238      	movs	r2, #56	; 0x38
 8001282:	4013      	ands	r3, r2
 8001284:	2b10      	cmp	r3, #16
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x526>
 8001288:	e081      	b.n	800138e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d156      	bne.n	8001340 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001298:	4945      	ldr	r1, [pc, #276]	; (80013b0 <HAL_RCC_OscConfig+0x64c>)
 800129a:	400a      	ands	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fa4b 	bl	8000738 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fa46 	bl	8000738 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0b4      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	049b      	lsls	r3, r3, #18
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <HAL_RCC_OscConfig+0x650>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	431a      	orrs	r2, r3
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0449      	lsls	r1, r1, #17
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0549      	lsls	r1, r1, #21
 8001312:	430a      	orrs	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fa0f 	bl	8000738 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fa0a 	bl	8000738 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e078      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	049b      	lsls	r3, r3, #18
 800133a:	4013      	ands	r3, r2
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x5bc>
 800133e:	e070      	b.n	8001422 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001346:	491a      	ldr	r1, [pc, #104]	; (80013b0 <HAL_RCC_OscConfig+0x64c>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001352:	2103      	movs	r1, #3
 8001354:	438a      	bics	r2, r1
 8001356:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_RCC_OscConfig+0x638>)
 800135e:	4916      	ldr	r1, [pc, #88]	; (80013b8 <HAL_RCC_OscConfig+0x654>)
 8001360:	400a      	ands	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff f9e8 	bl	8000738 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f9e3 	bl	8000738 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e051      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_OscConfig+0x638>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	049b      	lsls	r3, r3, #18
 8001388:	4013      	ands	r3, r2
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x60a>
 800138c:	e049      	b.n	8001422 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e044      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	00001388 	.word	0x00001388
 80013a8:	efffffff 	.word	0xefffffff
 80013ac:	ffbfffff 	.word	0xffbfffff
 80013b0:	feffffff 	.word	0xfeffffff
 80013b4:	11c1808c 	.word	0x11c1808c
 80013b8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x6c8>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2203      	movs	r2, #3
 80013c6:	401a      	ands	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d126      	bne.n	800141e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2270      	movs	r2, #112	; 0x70
 80013d4:	401a      	ands	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d11f      	bne.n	800141e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	23fe      	movs	r3, #254	; 0xfe
 80013e2:	01db      	lsls	r3, r3, #7
 80013e4:	401a      	ands	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d116      	bne.n	800141e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	23f8      	movs	r3, #248	; 0xf8
 80013f4:	039b      	lsls	r3, r3, #14
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d10e      	bne.n	800141e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	23e0      	movs	r3, #224	; 0xe0
 8001404:	051b      	lsls	r3, r3, #20
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	0f5b      	lsrs	r3, r3, #29
 8001414:	075a      	lsls	r2, r3, #29
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b008      	add	sp, #32
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0e9      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2207      	movs	r2, #7
 800144a:	4013      	ands	r3, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d91e      	bls.n	8001490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2207      	movs	r2, #7
 8001458:	4393      	bics	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001464:	f7ff f968 	bl	8000738 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800146c:	e009      	b.n	8001482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146e:	f7ff f963 	bl	8000738 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_RCC_ClockConfig+0x1f4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e0ca      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2207      	movs	r2, #7
 8001488:	4013      	ands	r3, r2
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d1ee      	bne.n	800146e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d006      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014a4:	4b60      	ldr	r3, [pc, #384]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014aa:	21e0      	movs	r1, #224	; 0xe0
 80014ac:	01c9      	lsls	r1, r1, #7
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b2:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <HAL_RCC_ClockConfig+0x1fc>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	d057      	beq.n	8001580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d12b      	bne.n	800153c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e097      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	049b      	lsls	r3, r3, #18
 80014f8:	4013      	ands	r3, r2
 80014fa:	d11f      	bne.n	800153c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e08b      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4013      	ands	r3, r2
 8001512:	d113      	bne.n	800153c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e07f      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d106      	bne.n	800152e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001520:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d108      	bne.n	800153c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e074      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e06d      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2207      	movs	r2, #7
 8001542:	4393      	bics	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001550:	f7ff f8f2 	bl	8000738 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001558:	e009      	b.n	800156e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff f8ed 	bl	8000738 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <HAL_RCC_ClockConfig+0x1f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e054      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2238      	movs	r2, #56	; 0x38
 8001574:	401a      	ands	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	429a      	cmp	r2, r3
 800157e:	d1ec      	bne.n	800155a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2207      	movs	r2, #7
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d21e      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2207      	movs	r2, #7
 8001594:	4393      	bics	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015a0:	f7ff f8ca 	bl	8000738 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a8:	e009      	b.n	80015be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015aa:	f7ff f8c5 	bl	8000738 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_RCC_ClockConfig+0x1f4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e02c      	b.n	8001618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_RCC_ClockConfig+0x200>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015ea:	f000 f829 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015ee:	0001      	movs	r1, r0
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	220f      	movs	r2, #15
 80015f8:	401a      	ands	r2, r3
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x204>)
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	58d3      	ldr	r3, [r2, r3]
 8001600:	221f      	movs	r2, #31
 8001602:	4013      	ands	r3, r2
 8001604:	000a      	movs	r2, r1
 8001606:	40da      	lsrs	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x208>)
 800160a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x20c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff f835 	bl	8000680 <HAL_InitTick>
 8001616:	0003      	movs	r3, r0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40022000 	.word	0x40022000
 8001624:	00001388 	.word	0x00001388
 8001628:	40021000 	.word	0x40021000
 800162c:	fffff0ff 	.word	0xfffff0ff
 8001630:	ffff8fff 	.word	0xffff8fff
 8001634:	080020cc 	.word	0x080020cc
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2238      	movs	r2, #56	; 0x38
 800164c:	4013      	ands	r3, r2
 800164e:	d10f      	bne.n	8001670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0adb      	lsrs	r3, r3, #11
 8001656:	2207      	movs	r2, #7
 8001658:	4013      	ands	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	4835      	ldr	r0, [pc, #212]	; (800173c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001666:	f7fe fd4d 	bl	8000104 <__udivsi3>
 800166a:	0003      	movs	r3, r0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	e05d      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2238      	movs	r2, #56	; 0x38
 8001676:	4013      	ands	r3, r2
 8001678:	2b08      	cmp	r3, #8
 800167a:	d102      	bne.n	8001682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_RCC_GetSysClockFreq+0x100>)
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e054      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2238      	movs	r2, #56	; 0x38
 8001688:	4013      	ands	r3, r2
 800168a:	2b10      	cmp	r3, #16
 800168c:	d138      	bne.n	8001700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2203      	movs	r2, #3
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	2207      	movs	r2, #7
 80016a0:	4013      	ands	r3, r2
 80016a2:	3301      	adds	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	4824      	ldr	r0, [pc, #144]	; (8001740 <HAL_RCC_GetSysClockFreq+0x100>)
 80016b0:	f7fe fd28 	bl	8000104 <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	0019      	movs	r1, r3
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	227f      	movs	r2, #127	; 0x7f
 80016c0:	4013      	ands	r3, r2
 80016c2:	434b      	muls	r3, r1
 80016c4:	617b      	str	r3, [r7, #20]
        break;
 80016c6:	e00d      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	481c      	ldr	r0, [pc, #112]	; (800173c <HAL_RCC_GetSysClockFreq+0xfc>)
 80016cc:	f7fe fd1a 	bl	8000104 <__udivsi3>
 80016d0:	0003      	movs	r3, r0
 80016d2:	0019      	movs	r1, r3
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	227f      	movs	r2, #127	; 0x7f
 80016dc:	4013      	ands	r3, r2
 80016de:	434b      	muls	r3, r1
 80016e0:	617b      	str	r3, [r7, #20]
        break;
 80016e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0f5b      	lsrs	r3, r3, #29
 80016ea:	2207      	movs	r2, #7
 80016ec:	4013      	ands	r3, r2
 80016ee:	3301      	adds	r3, #1
 80016f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	6978      	ldr	r0, [r7, #20]
 80016f6:	f7fe fd05 	bl	8000104 <__udivsi3>
 80016fa:	0003      	movs	r3, r0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e015      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2238      	movs	r2, #56	; 0x38
 8001706:	4013      	ands	r3, r2
 8001708:	2b20      	cmp	r3, #32
 800170a:	d103      	bne.n	8001714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	e00b      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2238      	movs	r2, #56	; 0x38
 800171a:	4013      	ands	r3, r2
 800171c:	2b18      	cmp	r3, #24
 800171e:	d103      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001720:	23fa      	movs	r3, #250	; 0xfa
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e001      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800172c:	693b      	ldr	r3, [r7, #16]
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b006      	add	sp, #24
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40021000 	.word	0x40021000
 800173c:	00f42400 	.word	0x00f42400
 8001740:	007a1200 	.word	0x007a1200

08001744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e04a      	b.n	80017ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223d      	movs	r2, #61	; 0x3d
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	223c      	movs	r2, #60	; 0x3c
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe fee5 	bl	800053c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223d      	movs	r2, #61	; 0x3d
 8001776:	2102      	movs	r1, #2
 8001778:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f000 fab5 	bl	8001cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2248      	movs	r2, #72	; 0x48
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223e      	movs	r2, #62	; 0x3e
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	223f      	movs	r2, #63	; 0x3f
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2242      	movs	r2, #66	; 0x42
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2243      	movs	r2, #67	; 0x43
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2244      	movs	r2, #68	; 0x44
 80017c6:	2101      	movs	r1, #1
 80017c8:	5499      	strb	r1, [r3, r2]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2245      	movs	r2, #69	; 0x45
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2246      	movs	r2, #70	; 0x46
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2247      	movs	r2, #71	; 0x47
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	223d      	movs	r2, #61	; 0x3d
 80017e6:	2101      	movs	r1, #1
 80017e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	223d      	movs	r2, #61	; 0x3d
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d001      	beq.n	800180c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e047      	b.n	800189c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	223d      	movs	r2, #61	; 0x3d
 8001810:	2102      	movs	r1, #2
 8001812:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2101      	movs	r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d014      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x64>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	429a      	cmp	r2, r3
 8001838:	d00e      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x64>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d009      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x64>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_TIM_Base_Start_IT+0xb8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x64>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d116      	bne.n	8001886 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d016      	beq.n	8001898 <HAL_TIM_Base_Start_IT+0xa4>
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	429a      	cmp	r2, r3
 8001872:	d011      	beq.n	8001898 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001884:	e008      	b.n	8001898 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e000      	b.n	800189a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001898:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	40000400 	.word	0x40000400
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40014000 	.word	0x40014000
 80018b4:	00010007 	.word	0x00010007

080018b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2202      	movs	r2, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d124      	bne.n	8001918 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d11d      	bne.n	8001918 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4252      	negs	r2, r2
 80018e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2203      	movs	r2, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	d004      	beq.n	8001902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f9e2 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8001900:	e007      	b.n	8001912 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f9d5 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 f9e1 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2204      	movs	r2, #4
 8001920:	4013      	ands	r3, r2
 8001922:	2b04      	cmp	r3, #4
 8001924:	d125      	bne.n	8001972 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2204      	movs	r2, #4
 800192e:	4013      	ands	r3, r2
 8001930:	2b04      	cmp	r3, #4
 8001932:	d11e      	bne.n	8001972 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2205      	movs	r2, #5
 800193a:	4252      	negs	r2, r2
 800193c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	23c0      	movs	r3, #192	; 0xc0
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f9b5 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 800195a:	e007      	b.n	800196c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	0018      	movs	r0, r3
 8001960:	f000 f9a8 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f9b4 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2208      	movs	r2, #8
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d124      	bne.n	80019ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2208      	movs	r2, #8
 8001988:	4013      	ands	r3, r2
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11d      	bne.n	80019ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2209      	movs	r2, #9
 8001994:	4252      	negs	r2, r2
 8001996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2204      	movs	r2, #4
 800199c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4013      	ands	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 f989 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 80019b2:	e007      	b.n	80019c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f97c 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f988 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2210      	movs	r2, #16
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d125      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2210      	movs	r2, #16
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d11e      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2211      	movs	r2, #17
 80019ec:	4252      	negs	r2, r2
 80019ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2208      	movs	r2, #8
 80019f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	23c0      	movs	r3, #192	; 0xc0
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 f95c 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8001a0c:	e007      	b.n	8001a1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f94f 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 f95b 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10f      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4252      	negs	r2, r2
 8001a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7fe fbe5 	bl	800021c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d10f      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b80      	cmp	r3, #128	; 0x80
 8001a6c:	d108      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2281      	movs	r2, #129	; 0x81
 8001a74:	4252      	negs	r2, r2
 8001a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 fade 	bl	800203c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10e      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d107      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_TIM_IRQHandler+0x260>)
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 facd 	bl	800204c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d10f      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d108      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2241      	movs	r2, #65	; 0x41
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f902 	bl	8001ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d10f      	bne.n	8001b0e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d108      	bne.n	8001b0e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	4252      	negs	r2, r2
 8001b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 fa8f 	bl	800202c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	fffffeff 	.word	0xfffffeff

08001b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	223c      	movs	r2, #60	; 0x3c
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_TIM_ConfigClockSource+0x18>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e0b7      	b.n	8001ca4 <HAL_TIM_ConfigClockSource+0x188>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	223c      	movs	r2, #60	; 0x3c
 8001b38:	2101      	movs	r1, #1
 8001b3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	223d      	movs	r2, #61	; 0x3d
 8001b40:	2102      	movs	r1, #2
 8001b42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_TIM_ConfigClockSource+0x190>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_TIM_ConfigClockSource+0x194>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	0192      	lsls	r2, r2, #6
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d040      	beq.n	8001bf2 <HAL_TIM_ConfigClockSource+0xd6>
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	0192      	lsls	r2, r2, #6
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d900      	bls.n	8001b7a <HAL_TIM_ConfigClockSource+0x5e>
 8001b78:	e088      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0152      	lsls	r2, r2, #5
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d100      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x68>
 8001b82:	e085      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0x174>
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0152      	lsls	r2, r2, #5
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d900      	bls.n	8001b8e <HAL_TIM_ConfigClockSource+0x72>
 8001b8c:	e07e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001b8e:	2b70      	cmp	r3, #112	; 0x70
 8001b90:	d018      	beq.n	8001bc4 <HAL_TIM_ConfigClockSource+0xa8>
 8001b92:	d900      	bls.n	8001b96 <HAL_TIM_ConfigClockSource+0x7a>
 8001b94:	e07a      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001b96:	2b60      	cmp	r3, #96	; 0x60
 8001b98:	d04f      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x11e>
 8001b9a:	d900      	bls.n	8001b9e <HAL_TIM_ConfigClockSource+0x82>
 8001b9c:	e076      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001b9e:	2b50      	cmp	r3, #80	; 0x50
 8001ba0:	d03b      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0xfe>
 8001ba2:	d900      	bls.n	8001ba6 <HAL_TIM_ConfigClockSource+0x8a>
 8001ba4:	e072      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001ba6:	2b40      	cmp	r3, #64	; 0x40
 8001ba8:	d057      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0x13e>
 8001baa:	d900      	bls.n	8001bae <HAL_TIM_ConfigClockSource+0x92>
 8001bac:	e06e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001bae:	2b30      	cmp	r3, #48	; 0x30
 8001bb0:	d063      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x15e>
 8001bb2:	d86b      	bhi.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d060      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x15e>
 8001bb8:	d868      	bhi.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d05d      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x15e>
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d05b      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bc2:	e063      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f000 f994 	bl	8001f00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2277      	movs	r2, #119	; 0x77
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]
      break;
 8001bf0:	e04f      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f000 f97d 	bl	8001f00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	01c9      	lsls	r1, r1, #7
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
      break;
 8001c18:	e03b      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	001a      	movs	r2, r3
 8001c28:	f000 f8ee 	bl	8001e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2150      	movs	r1, #80	; 0x50
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f948 	bl	8001ec8 <TIM_ITRx_SetConfig>
      break;
 8001c38:	e02b      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	001a      	movs	r2, r3
 8001c48:	f000 f90c 	bl	8001e64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2160      	movs	r1, #96	; 0x60
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f938 	bl	8001ec8 <TIM_ITRx_SetConfig>
      break;
 8001c58:	e01b      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	001a      	movs	r2, r3
 8001c68:	f000 f8ce 	bl	8001e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f928 	bl	8001ec8 <TIM_ITRx_SetConfig>
      break;
 8001c78:	e00b      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0019      	movs	r1, r3
 8001c84:	0010      	movs	r0, r2
 8001c86:	f000 f91f 	bl	8001ec8 <TIM_ITRx_SetConfig>
        break;
 8001c8a:	e002      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	e000      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001c90:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	; 0x3d
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223c      	movs	r2, #60	; 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	ffceff88 	.word	0xffceff88
 8001cb0:	ffff00ff 	.word	0xffff00ff

08001cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a38      	ldr	r2, [pc, #224]	; (8001de8 <TIM_Base_SetConfig+0xf4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00c      	beq.n	8001d26 <TIM_Base_SetConfig+0x32>
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d007      	beq.n	8001d26 <TIM_Base_SetConfig+0x32>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a34      	ldr	r2, [pc, #208]	; (8001dec <TIM_Base_SetConfig+0xf8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <TIM_Base_SetConfig+0x32>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <TIM_Base_SetConfig+0xfc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d108      	bne.n	8001d38 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2270      	movs	r2, #112	; 0x70
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <TIM_Base_SetConfig+0xf4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01c      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d017      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <TIM_Base_SetConfig+0xf8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <TIM_Base_SetConfig+0xfc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <TIM_Base_SetConfig+0x100>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00b      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <TIM_Base_SetConfig+0x104>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <TIM_Base_SetConfig+0x108>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_Base_SetConfig+0x86>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <TIM_Base_SetConfig+0x10c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <TIM_Base_SetConfig+0x110>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	4393      	bics	r3, r2
 8001d92:	001a      	movs	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <TIM_Base_SetConfig+0xf4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xde>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <TIM_Base_SetConfig+0x104>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0xde>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <TIM_Base_SetConfig+0x108>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0xde>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <TIM_Base_SetConfig+0x10c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d103      	bne.n	8001dda <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	615a      	str	r2, [r3, #20]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40002000 	.word	0x40002000
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800
 8001e04:	fffffcff 	.word	0xfffffcff

08001e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4393      	bics	r3, r2
 8001e22:	001a      	movs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	22f0      	movs	r2, #240	; 0xf0
 8001e32:	4393      	bics	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	220a      	movs	r2, #10
 8001e44:	4393      	bics	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	621a      	str	r2, [r3, #32]
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	2210      	movs	r2, #16
 8001e76:	4393      	bics	r3, r2
 8001e78:	001a      	movs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <TIM_TI2_ConfigInputStage+0x60>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	031b      	lsls	r3, r3, #12
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	22a0      	movs	r2, #160	; 0xa0
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	621a      	str	r2, [r3, #32]
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b006      	add	sp, #24
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	ffff0fff 	.word	0xffff0fff

08001ec8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <TIM_ITRx_SetConfig+0x34>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	609a      	str	r2, [r3, #8]
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	ffcfff8f 	.word	0xffcfff8f

08001f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <TIM_ETR_SetConfig+0x3c>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	021a      	lsls	r2, r3, #8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b006      	add	sp, #24
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	ffff00ff 	.word	0xffff00ff

08001f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223c      	movs	r2, #60	; 0x3c
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e05a      	b.n	800200e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223c      	movs	r2, #60	; 0x3c
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	223d      	movs	r2, #61	; 0x3d
 8001f64:	2102      	movs	r1, #2
 8001f66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2270      	movs	r2, #112	; 0x70
 8001f98:	4393      	bics	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d014      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	05db      	lsls	r3, r3, #23
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a15      	ldr	r2, [pc, #84]	; (8002020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d009      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10c      	bne.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	223d      	movs	r2, #61	; 0x3d
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	223c      	movs	r2, #60	; 0x3c
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40012c00 	.word	0x40012c00
 800201c:	ff0fffff 	.word	0xff0fffff
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	40014000 	.word	0x40014000

0800202c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	2600      	movs	r6, #0
 8002060:	4d0c      	ldr	r5, [pc, #48]	; (8002094 <__libc_init_array+0x38>)
 8002062:	4c0d      	ldr	r4, [pc, #52]	; (8002098 <__libc_init_array+0x3c>)
 8002064:	1b64      	subs	r4, r4, r5
 8002066:	10a4      	asrs	r4, r4, #2
 8002068:	42a6      	cmp	r6, r4
 800206a:	d109      	bne.n	8002080 <__libc_init_array+0x24>
 800206c:	2600      	movs	r6, #0
 800206e:	f000 f821 	bl	80020b4 <_init>
 8002072:	4d0a      	ldr	r5, [pc, #40]	; (800209c <__libc_init_array+0x40>)
 8002074:	4c0a      	ldr	r4, [pc, #40]	; (80020a0 <__libc_init_array+0x44>)
 8002076:	1b64      	subs	r4, r4, r5
 8002078:	10a4      	asrs	r4, r4, #2
 800207a:	42a6      	cmp	r6, r4
 800207c:	d105      	bne.n	800208a <__libc_init_array+0x2e>
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	00b3      	lsls	r3, r6, #2
 8002082:	58eb      	ldr	r3, [r5, r3]
 8002084:	4798      	blx	r3
 8002086:	3601      	adds	r6, #1
 8002088:	e7ee      	b.n	8002068 <__libc_init_array+0xc>
 800208a:	00b3      	lsls	r3, r6, #2
 800208c:	58eb      	ldr	r3, [r5, r3]
 800208e:	4798      	blx	r3
 8002090:	3601      	adds	r6, #1
 8002092:	e7f2      	b.n	800207a <__libc_init_array+0x1e>
 8002094:	0800210c 	.word	0x0800210c
 8002098:	0800210c 	.word	0x0800210c
 800209c:	0800210c 	.word	0x0800210c
 80020a0:	08002110 	.word	0x08002110

080020a4 <memset>:
 80020a4:	0003      	movs	r3, r0
 80020a6:	1882      	adds	r2, r0, r2
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d100      	bne.n	80020ae <memset+0xa>
 80020ac:	4770      	bx	lr
 80020ae:	7019      	strb	r1, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e7f9      	b.n	80020a8 <memset+0x4>

080020b4 <_init>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr

080020c0 <_fini>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c6:	bc08      	pop	{r3}
 80020c8:	469e      	mov	lr, r3
 80020ca:	4770      	bx	lr
