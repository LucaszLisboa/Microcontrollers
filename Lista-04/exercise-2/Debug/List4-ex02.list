
List4-ex02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d00  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002e50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002e50  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078ae  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165f  00000000  00000000  000278e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00028f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa9c  00000000  00000000  00029dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081c9  00000000  00000000  0004486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af601  00000000  00000000  0004ca35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a80  00000000  00000000  000fc08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002da4 	.word	0x08002da4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002da4 	.word	0x08002da4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_dmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	4698      	mov	r8, r3
 800022a:	030c      	lsls	r4, r1, #12
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	0006      	movs	r6, r0
 8000230:	4692      	mov	sl, r2
 8000232:	b087      	sub	sp, #28
 8000234:	0b24      	lsrs	r4, r4, #12
 8000236:	0d5b      	lsrs	r3, r3, #21
 8000238:	0fcf      	lsrs	r7, r1, #31
 800023a:	2b00      	cmp	r3, #0
 800023c:	d06c      	beq.n	8000318 <__aeabi_dmul+0xfc>
 800023e:	4add      	ldr	r2, [pc, #884]	; (80005b4 <__aeabi_dmul+0x398>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x2a>
 8000244:	e086      	b.n	8000354 <__aeabi_dmul+0x138>
 8000246:	0f42      	lsrs	r2, r0, #29
 8000248:	00e4      	lsls	r4, r4, #3
 800024a:	4314      	orrs	r4, r2
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0412      	lsls	r2, r2, #16
 8000250:	4314      	orrs	r4, r2
 8000252:	4ad9      	ldr	r2, [pc, #868]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000254:	00c5      	lsls	r5, r0, #3
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	4699      	mov	r9, r3
 8000260:	469b      	mov	fp, r3
 8000262:	4643      	mov	r3, r8
 8000264:	4642      	mov	r2, r8
 8000266:	031e      	lsls	r6, r3, #12
 8000268:	0fd2      	lsrs	r2, r2, #31
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4650      	mov	r0, sl
 800026e:	4690      	mov	r8, r2
 8000270:	0b36      	lsrs	r6, r6, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	d100      	bne.n	8000278 <__aeabi_dmul+0x5c>
 8000276:	e078      	b.n	800036a <__aeabi_dmul+0x14e>
 8000278:	4ace      	ldr	r2, [pc, #824]	; (80005b4 <__aeabi_dmul+0x398>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d01d      	beq.n	80002ba <__aeabi_dmul+0x9e>
 800027e:	49ce      	ldr	r1, [pc, #824]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	9900      	ldr	r1, [sp, #0]
 8000286:	4463      	add	r3, ip
 8000288:	00f6      	lsls	r6, r6, #3
 800028a:	468c      	mov	ip, r1
 800028c:	4316      	orrs	r6, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	449c      	add	ip, r3
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4663      	mov	r3, ip
 8000296:	4316      	orrs	r6, r2
 8000298:	00c2      	lsls	r2, r0, #3
 800029a:	2000      	movs	r0, #0
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	9900      	ldr	r1, [sp, #0]
 80002a0:	4643      	mov	r3, r8
 80002a2:	3101      	adds	r1, #1
 80002a4:	468c      	mov	ip, r1
 80002a6:	4649      	mov	r1, r9
 80002a8:	407b      	eors	r3, r7
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	290f      	cmp	r1, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_dmul+0x96>
 80002b0:	e07e      	b.n	80003b0 <__aeabi_dmul+0x194>
 80002b2:	4bc2      	ldr	r3, [pc, #776]	; (80005bc <__aeabi_dmul+0x3a0>)
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	5859      	ldr	r1, [r3, r1]
 80002b8:	468f      	mov	pc, r1
 80002ba:	4652      	mov	r2, sl
 80002bc:	9b00      	ldr	r3, [sp, #0]
 80002be:	4332      	orrs	r2, r6
 80002c0:	d000      	beq.n	80002c4 <__aeabi_dmul+0xa8>
 80002c2:	e156      	b.n	8000572 <__aeabi_dmul+0x356>
 80002c4:	49bb      	ldr	r1, [pc, #748]	; (80005b4 <__aeabi_dmul+0x398>)
 80002c6:	2600      	movs	r6, #0
 80002c8:	468c      	mov	ip, r1
 80002ca:	4463      	add	r3, ip
 80002cc:	4649      	mov	r1, r9
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2302      	movs	r3, #2
 80002d2:	4319      	orrs	r1, r3
 80002d4:	4689      	mov	r9, r1
 80002d6:	2002      	movs	r0, #2
 80002d8:	e7e1      	b.n	800029e <__aeabi_dmul+0x82>
 80002da:	4643      	mov	r3, r8
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	0034      	movs	r4, r6
 80002e0:	0015      	movs	r5, r2
 80002e2:	4683      	mov	fp, r0
 80002e4:	465b      	mov	r3, fp
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d05e      	beq.n	80003a8 <__aeabi_dmul+0x18c>
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d100      	bne.n	80002f0 <__aeabi_dmul+0xd4>
 80002ee:	e1f3      	b.n	80006d8 <__aeabi_dmul+0x4bc>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d000      	beq.n	80002f6 <__aeabi_dmul+0xda>
 80002f4:	e118      	b.n	8000528 <__aeabi_dmul+0x30c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2400      	movs	r4, #0
 80002fa:	2500      	movs	r5, #0
 80002fc:	9b01      	ldr	r3, [sp, #4]
 80002fe:	0512      	lsls	r2, r2, #20
 8000300:	4322      	orrs	r2, r4
 8000302:	07db      	lsls	r3, r3, #31
 8000304:	431a      	orrs	r2, r3
 8000306:	0028      	movs	r0, r5
 8000308:	0011      	movs	r1, r2
 800030a:	b007      	add	sp, #28
 800030c:	bcf0      	pop	{r4, r5, r6, r7}
 800030e:	46bb      	mov	fp, r7
 8000310:	46b2      	mov	sl, r6
 8000312:	46a9      	mov	r9, r5
 8000314:	46a0      	mov	r8, r4
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	0025      	movs	r5, r4
 800031a:	4305      	orrs	r5, r0
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x104>
 800031e:	e141      	b.n	80005a4 <__aeabi_dmul+0x388>
 8000320:	2c00      	cmp	r4, #0
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x10a>
 8000324:	e1ad      	b.n	8000682 <__aeabi_dmul+0x466>
 8000326:	0020      	movs	r0, r4
 8000328:	f000 fa9c 	bl	8000864 <__clzsi2>
 800032c:	0001      	movs	r1, r0
 800032e:	0002      	movs	r2, r0
 8000330:	390b      	subs	r1, #11
 8000332:	231d      	movs	r3, #29
 8000334:	0010      	movs	r0, r2
 8000336:	1a5b      	subs	r3, r3, r1
 8000338:	0031      	movs	r1, r6
 800033a:	0035      	movs	r5, r6
 800033c:	3808      	subs	r0, #8
 800033e:	4084      	lsls	r4, r0
 8000340:	40d9      	lsrs	r1, r3
 8000342:	4085      	lsls	r5, r0
 8000344:	430c      	orrs	r4, r1
 8000346:	489e      	ldr	r0, [pc, #632]	; (80005c0 <__aeabi_dmul+0x3a4>)
 8000348:	1a83      	subs	r3, r0, r2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	4699      	mov	r9, r3
 8000350:	469b      	mov	fp, r3
 8000352:	e786      	b.n	8000262 <__aeabi_dmul+0x46>
 8000354:	0005      	movs	r5, r0
 8000356:	4325      	orrs	r5, r4
 8000358:	d000      	beq.n	800035c <__aeabi_dmul+0x140>
 800035a:	e11c      	b.n	8000596 <__aeabi_dmul+0x37a>
 800035c:	2208      	movs	r2, #8
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2302      	movs	r3, #2
 8000362:	2400      	movs	r4, #0
 8000364:	4691      	mov	r9, r2
 8000366:	469b      	mov	fp, r3
 8000368:	e77b      	b.n	8000262 <__aeabi_dmul+0x46>
 800036a:	4652      	mov	r2, sl
 800036c:	4332      	orrs	r2, r6
 800036e:	d100      	bne.n	8000372 <__aeabi_dmul+0x156>
 8000370:	e10a      	b.n	8000588 <__aeabi_dmul+0x36c>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_dmul+0x15c>
 8000376:	e176      	b.n	8000666 <__aeabi_dmul+0x44a>
 8000378:	0030      	movs	r0, r6
 800037a:	f000 fa73 	bl	8000864 <__clzsi2>
 800037e:	0002      	movs	r2, r0
 8000380:	3a0b      	subs	r2, #11
 8000382:	231d      	movs	r3, #29
 8000384:	0001      	movs	r1, r0
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	3908      	subs	r1, #8
 800038c:	40da      	lsrs	r2, r3
 800038e:	408e      	lsls	r6, r1
 8000390:	4316      	orrs	r6, r2
 8000392:	4652      	mov	r2, sl
 8000394:	408a      	lsls	r2, r1
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	4989      	ldr	r1, [pc, #548]	; (80005c0 <__aeabi_dmul+0x3a4>)
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	0003      	movs	r3, r0
 800039e:	468c      	mov	ip, r1
 80003a0:	4463      	add	r3, ip
 80003a2:	2000      	movs	r0, #0
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e77a      	b.n	800029e <__aeabi_dmul+0x82>
 80003a8:	2400      	movs	r4, #0
 80003aa:	2500      	movs	r5, #0
 80003ac:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <__aeabi_dmul+0x398>)
 80003ae:	e7a5      	b.n	80002fc <__aeabi_dmul+0xe0>
 80003b0:	0c2f      	lsrs	r7, r5, #16
 80003b2:	042d      	lsls	r5, r5, #16
 80003b4:	0c2d      	lsrs	r5, r5, #16
 80003b6:	002b      	movs	r3, r5
 80003b8:	0c11      	lsrs	r1, r2, #16
 80003ba:	0412      	lsls	r2, r2, #16
 80003bc:	0c12      	lsrs	r2, r2, #16
 80003be:	4353      	muls	r3, r2
 80003c0:	4698      	mov	r8, r3
 80003c2:	0013      	movs	r3, r2
 80003c4:	0028      	movs	r0, r5
 80003c6:	437b      	muls	r3, r7
 80003c8:	4699      	mov	r9, r3
 80003ca:	4348      	muls	r0, r1
 80003cc:	4448      	add	r0, r9
 80003ce:	4683      	mov	fp, r0
 80003d0:	4640      	mov	r0, r8
 80003d2:	000b      	movs	r3, r1
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4682      	mov	sl, r0
 80003d8:	4658      	mov	r0, fp
 80003da:	437b      	muls	r3, r7
 80003dc:	4450      	add	r0, sl
 80003de:	9302      	str	r3, [sp, #8]
 80003e0:	4581      	cmp	r9, r0
 80003e2:	d906      	bls.n	80003f2 <__aeabi_dmul+0x1d6>
 80003e4:	469a      	mov	sl, r3
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	025b      	lsls	r3, r3, #9
 80003ea:	4699      	mov	r9, r3
 80003ec:	44ca      	add	sl, r9
 80003ee:	4653      	mov	r3, sl
 80003f0:	9302      	str	r3, [sp, #8]
 80003f2:	0c03      	lsrs	r3, r0, #16
 80003f4:	469b      	mov	fp, r3
 80003f6:	4643      	mov	r3, r8
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	0400      	lsls	r0, r0, #16
 80003fc:	0c1b      	lsrs	r3, r3, #16
 80003fe:	4698      	mov	r8, r3
 8000400:	0003      	movs	r3, r0
 8000402:	4443      	add	r3, r8
 8000404:	9304      	str	r3, [sp, #16]
 8000406:	0c33      	lsrs	r3, r6, #16
 8000408:	4699      	mov	r9, r3
 800040a:	002b      	movs	r3, r5
 800040c:	0436      	lsls	r6, r6, #16
 800040e:	0c36      	lsrs	r6, r6, #16
 8000410:	4373      	muls	r3, r6
 8000412:	4698      	mov	r8, r3
 8000414:	0033      	movs	r3, r6
 8000416:	437b      	muls	r3, r7
 8000418:	469a      	mov	sl, r3
 800041a:	464b      	mov	r3, r9
 800041c:	435d      	muls	r5, r3
 800041e:	435f      	muls	r7, r3
 8000420:	4643      	mov	r3, r8
 8000422:	4455      	add	r5, sl
 8000424:	0c18      	lsrs	r0, r3, #16
 8000426:	1940      	adds	r0, r0, r5
 8000428:	4582      	cmp	sl, r0
 800042a:	d903      	bls.n	8000434 <__aeabi_dmul+0x218>
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	025b      	lsls	r3, r3, #9
 8000430:	469a      	mov	sl, r3
 8000432:	4457      	add	r7, sl
 8000434:	0c05      	lsrs	r5, r0, #16
 8000436:	19eb      	adds	r3, r5, r7
 8000438:	9305      	str	r3, [sp, #20]
 800043a:	4643      	mov	r3, r8
 800043c:	041d      	lsls	r5, r3, #16
 800043e:	0c2d      	lsrs	r5, r5, #16
 8000440:	0400      	lsls	r0, r0, #16
 8000442:	1940      	adds	r0, r0, r5
 8000444:	0c25      	lsrs	r5, r4, #16
 8000446:	0424      	lsls	r4, r4, #16
 8000448:	0c24      	lsrs	r4, r4, #16
 800044a:	0027      	movs	r7, r4
 800044c:	4357      	muls	r7, r2
 800044e:	436a      	muls	r2, r5
 8000450:	4690      	mov	r8, r2
 8000452:	002a      	movs	r2, r5
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469a      	mov	sl, r3
 8000458:	434a      	muls	r2, r1
 800045a:	4361      	muls	r1, r4
 800045c:	4441      	add	r1, r8
 800045e:	4451      	add	r1, sl
 8000460:	4483      	add	fp, r0
 8000462:	4588      	cmp	r8, r1
 8000464:	d903      	bls.n	800046e <__aeabi_dmul+0x252>
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	025b      	lsls	r3, r3, #9
 800046a:	4698      	mov	r8, r3
 800046c:	4442      	add	r2, r8
 800046e:	043f      	lsls	r7, r7, #16
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	0c3f      	lsrs	r7, r7, #16
 8000474:	0409      	lsls	r1, r1, #16
 8000476:	19c9      	adds	r1, r1, r7
 8000478:	0027      	movs	r7, r4
 800047a:	4698      	mov	r8, r3
 800047c:	464b      	mov	r3, r9
 800047e:	4377      	muls	r7, r6
 8000480:	435c      	muls	r4, r3
 8000482:	436e      	muls	r6, r5
 8000484:	435d      	muls	r5, r3
 8000486:	0c3b      	lsrs	r3, r7, #16
 8000488:	4699      	mov	r9, r3
 800048a:	19a4      	adds	r4, r4, r6
 800048c:	444c      	add	r4, r9
 800048e:	4442      	add	r2, r8
 8000490:	9503      	str	r5, [sp, #12]
 8000492:	42a6      	cmp	r6, r4
 8000494:	d904      	bls.n	80004a0 <__aeabi_dmul+0x284>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	025b      	lsls	r3, r3, #9
 800049a:	4698      	mov	r8, r3
 800049c:	4445      	add	r5, r8
 800049e:	9503      	str	r5, [sp, #12]
 80004a0:	9b02      	ldr	r3, [sp, #8]
 80004a2:	043f      	lsls	r7, r7, #16
 80004a4:	445b      	add	r3, fp
 80004a6:	001e      	movs	r6, r3
 80004a8:	4283      	cmp	r3, r0
 80004aa:	4180      	sbcs	r0, r0
 80004ac:	0423      	lsls	r3, r4, #16
 80004ae:	4698      	mov	r8, r3
 80004b0:	9b05      	ldr	r3, [sp, #20]
 80004b2:	0c3f      	lsrs	r7, r7, #16
 80004b4:	4447      	add	r7, r8
 80004b6:	4698      	mov	r8, r3
 80004b8:	1876      	adds	r6, r6, r1
 80004ba:	428e      	cmp	r6, r1
 80004bc:	4189      	sbcs	r1, r1
 80004be:	4447      	add	r7, r8
 80004c0:	4240      	negs	r0, r0
 80004c2:	183d      	adds	r5, r7, r0
 80004c4:	46a8      	mov	r8, r5
 80004c6:	4693      	mov	fp, r2
 80004c8:	4249      	negs	r1, r1
 80004ca:	468a      	mov	sl, r1
 80004cc:	44c3      	add	fp, r8
 80004ce:	429f      	cmp	r7, r3
 80004d0:	41bf      	sbcs	r7, r7
 80004d2:	4580      	cmp	r8, r0
 80004d4:	4180      	sbcs	r0, r0
 80004d6:	9b03      	ldr	r3, [sp, #12]
 80004d8:	44da      	add	sl, fp
 80004da:	4698      	mov	r8, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	4240      	negs	r0, r0
 80004e0:	427f      	negs	r7, r7
 80004e2:	4307      	orrs	r7, r0
 80004e4:	0c24      	lsrs	r4, r4, #16
 80004e6:	4593      	cmp	fp, r2
 80004e8:	4192      	sbcs	r2, r2
 80004ea:	458a      	cmp	sl, r1
 80004ec:	4189      	sbcs	r1, r1
 80004ee:	193f      	adds	r7, r7, r4
 80004f0:	0ddc      	lsrs	r4, r3, #23
 80004f2:	9b04      	ldr	r3, [sp, #16]
 80004f4:	0275      	lsls	r5, r6, #9
 80004f6:	431d      	orrs	r5, r3
 80004f8:	1e68      	subs	r0, r5, #1
 80004fa:	4185      	sbcs	r5, r0
 80004fc:	4653      	mov	r3, sl
 80004fe:	4252      	negs	r2, r2
 8000500:	4249      	negs	r1, r1
 8000502:	430a      	orrs	r2, r1
 8000504:	18bf      	adds	r7, r7, r2
 8000506:	4447      	add	r7, r8
 8000508:	0df6      	lsrs	r6, r6, #23
 800050a:	027f      	lsls	r7, r7, #9
 800050c:	4335      	orrs	r5, r6
 800050e:	025a      	lsls	r2, r3, #9
 8000510:	433c      	orrs	r4, r7
 8000512:	4315      	orrs	r5, r2
 8000514:	01fb      	lsls	r3, r7, #7
 8000516:	d400      	bmi.n	800051a <__aeabi_dmul+0x2fe>
 8000518:	e0c1      	b.n	800069e <__aeabi_dmul+0x482>
 800051a:	2101      	movs	r1, #1
 800051c:	086a      	lsrs	r2, r5, #1
 800051e:	400d      	ands	r5, r1
 8000520:	4315      	orrs	r5, r2
 8000522:	07e2      	lsls	r2, r4, #31
 8000524:	4315      	orrs	r5, r2
 8000526:	0864      	lsrs	r4, r4, #1
 8000528:	4926      	ldr	r1, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a8>)
 800052a:	4461      	add	r1, ip
 800052c:	2900      	cmp	r1, #0
 800052e:	dd56      	ble.n	80005de <__aeabi_dmul+0x3c2>
 8000530:	076b      	lsls	r3, r5, #29
 8000532:	d009      	beq.n	8000548 <__aeabi_dmul+0x32c>
 8000534:	220f      	movs	r2, #15
 8000536:	402a      	ands	r2, r5
 8000538:	2a04      	cmp	r2, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dmul+0x32c>
 800053c:	1d2a      	adds	r2, r5, #4
 800053e:	42aa      	cmp	r2, r5
 8000540:	41ad      	sbcs	r5, r5
 8000542:	426d      	negs	r5, r5
 8000544:	1964      	adds	r4, r4, r5
 8000546:	0015      	movs	r5, r2
 8000548:	01e3      	lsls	r3, r4, #7
 800054a:	d504      	bpl.n	8000556 <__aeabi_dmul+0x33a>
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <__aeabi_dmul+0x3ac>)
 8000550:	00c9      	lsls	r1, r1, #3
 8000552:	4014      	ands	r4, r2
 8000554:	4461      	add	r1, ip
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <__aeabi_dmul+0x3b0>)
 8000558:	4291      	cmp	r1, r2
 800055a:	dd00      	ble.n	800055e <__aeabi_dmul+0x342>
 800055c:	e724      	b.n	80003a8 <__aeabi_dmul+0x18c>
 800055e:	0762      	lsls	r2, r4, #29
 8000560:	08ed      	lsrs	r5, r5, #3
 8000562:	0264      	lsls	r4, r4, #9
 8000564:	0549      	lsls	r1, r1, #21
 8000566:	4315      	orrs	r5, r2
 8000568:	0b24      	lsrs	r4, r4, #12
 800056a:	0d4a      	lsrs	r2, r1, #21
 800056c:	e6c6      	b.n	80002fc <__aeabi_dmul+0xe0>
 800056e:	9701      	str	r7, [sp, #4]
 8000570:	e6b8      	b.n	80002e4 <__aeabi_dmul+0xc8>
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <__aeabi_dmul+0x398>)
 8000574:	2003      	movs	r0, #3
 8000576:	4694      	mov	ip, r2
 8000578:	4463      	add	r3, ip
 800057a:	464a      	mov	r2, r9
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2303      	movs	r3, #3
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	4652      	mov	r2, sl
 8000586:	e68a      	b.n	800029e <__aeabi_dmul+0x82>
 8000588:	4649      	mov	r1, r9
 800058a:	2301      	movs	r3, #1
 800058c:	4319      	orrs	r1, r3
 800058e:	4689      	mov	r9, r1
 8000590:	2600      	movs	r6, #0
 8000592:	2001      	movs	r0, #1
 8000594:	e683      	b.n	800029e <__aeabi_dmul+0x82>
 8000596:	220c      	movs	r2, #12
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2303      	movs	r3, #3
 800059c:	0005      	movs	r5, r0
 800059e:	4691      	mov	r9, r2
 80005a0:	469b      	mov	fp, r3
 80005a2:	e65e      	b.n	8000262 <__aeabi_dmul+0x46>
 80005a4:	2304      	movs	r3, #4
 80005a6:	4699      	mov	r9, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	2400      	movs	r4, #0
 80005b0:	469b      	mov	fp, r3
 80005b2:	e656      	b.n	8000262 <__aeabi_dmul+0x46>
 80005b4:	000007ff 	.word	0x000007ff
 80005b8:	fffffc01 	.word	0xfffffc01
 80005bc:	08002dbc 	.word	0x08002dbc
 80005c0:	fffffc0d 	.word	0xfffffc0d
 80005c4:	000003ff 	.word	0x000003ff
 80005c8:	feffffff 	.word	0xfeffffff
 80005cc:	000007fe 	.word	0x000007fe
 80005d0:	2300      	movs	r3, #0
 80005d2:	2480      	movs	r4, #128	; 0x80
 80005d4:	2500      	movs	r5, #0
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	0324      	lsls	r4, r4, #12
 80005dc:	e68e      	b.n	80002fc <__aeabi_dmul+0xe0>
 80005de:	2001      	movs	r0, #1
 80005e0:	1a40      	subs	r0, r0, r1
 80005e2:	2838      	cmp	r0, #56	; 0x38
 80005e4:	dd00      	ble.n	80005e8 <__aeabi_dmul+0x3cc>
 80005e6:	e686      	b.n	80002f6 <__aeabi_dmul+0xda>
 80005e8:	281f      	cmp	r0, #31
 80005ea:	dd5b      	ble.n	80006a4 <__aeabi_dmul+0x488>
 80005ec:	221f      	movs	r2, #31
 80005ee:	0023      	movs	r3, r4
 80005f0:	4252      	negs	r2, r2
 80005f2:	1a51      	subs	r1, r2, r1
 80005f4:	40cb      	lsrs	r3, r1
 80005f6:	0019      	movs	r1, r3
 80005f8:	2820      	cmp	r0, #32
 80005fa:	d003      	beq.n	8000604 <__aeabi_dmul+0x3e8>
 80005fc:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <__aeabi_dmul+0x4d0>)
 80005fe:	4462      	add	r2, ip
 8000600:	4094      	lsls	r4, r2
 8000602:	4325      	orrs	r5, r4
 8000604:	1e6a      	subs	r2, r5, #1
 8000606:	4195      	sbcs	r5, r2
 8000608:	002a      	movs	r2, r5
 800060a:	430a      	orrs	r2, r1
 800060c:	2107      	movs	r1, #7
 800060e:	000d      	movs	r5, r1
 8000610:	2400      	movs	r4, #0
 8000612:	4015      	ands	r5, r2
 8000614:	4211      	tst	r1, r2
 8000616:	d05b      	beq.n	80006d0 <__aeabi_dmul+0x4b4>
 8000618:	210f      	movs	r1, #15
 800061a:	2400      	movs	r4, #0
 800061c:	4011      	ands	r1, r2
 800061e:	2904      	cmp	r1, #4
 8000620:	d053      	beq.n	80006ca <__aeabi_dmul+0x4ae>
 8000622:	1d11      	adds	r1, r2, #4
 8000624:	4291      	cmp	r1, r2
 8000626:	4192      	sbcs	r2, r2
 8000628:	4252      	negs	r2, r2
 800062a:	18a4      	adds	r4, r4, r2
 800062c:	000a      	movs	r2, r1
 800062e:	0223      	lsls	r3, r4, #8
 8000630:	d54b      	bpl.n	80006ca <__aeabi_dmul+0x4ae>
 8000632:	2201      	movs	r2, #1
 8000634:	2400      	movs	r4, #0
 8000636:	2500      	movs	r5, #0
 8000638:	e660      	b.n	80002fc <__aeabi_dmul+0xe0>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	031b      	lsls	r3, r3, #12
 800063e:	421c      	tst	r4, r3
 8000640:	d009      	beq.n	8000656 <__aeabi_dmul+0x43a>
 8000642:	421e      	tst	r6, r3
 8000644:	d107      	bne.n	8000656 <__aeabi_dmul+0x43a>
 8000646:	4333      	orrs	r3, r6
 8000648:	031c      	lsls	r4, r3, #12
 800064a:	4643      	mov	r3, r8
 800064c:	0015      	movs	r5, r2
 800064e:	0b24      	lsrs	r4, r4, #12
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	e652      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0312      	lsls	r2, r2, #12
 800065a:	4314      	orrs	r4, r2
 800065c:	0324      	lsls	r4, r4, #12
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000660:	0b24      	lsrs	r4, r4, #12
 8000662:	9701      	str	r7, [sp, #4]
 8000664:	e64a      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000666:	f000 f8fd 	bl	8000864 <__clzsi2>
 800066a:	0003      	movs	r3, r0
 800066c:	001a      	movs	r2, r3
 800066e:	3215      	adds	r2, #21
 8000670:	3020      	adds	r0, #32
 8000672:	2a1c      	cmp	r2, #28
 8000674:	dc00      	bgt.n	8000678 <__aeabi_dmul+0x45c>
 8000676:	e684      	b.n	8000382 <__aeabi_dmul+0x166>
 8000678:	4656      	mov	r6, sl
 800067a:	3b08      	subs	r3, #8
 800067c:	2200      	movs	r2, #0
 800067e:	409e      	lsls	r6, r3
 8000680:	e689      	b.n	8000396 <__aeabi_dmul+0x17a>
 8000682:	f000 f8ef 	bl	8000864 <__clzsi2>
 8000686:	0001      	movs	r1, r0
 8000688:	0002      	movs	r2, r0
 800068a:	3115      	adds	r1, #21
 800068c:	3220      	adds	r2, #32
 800068e:	291c      	cmp	r1, #28
 8000690:	dc00      	bgt.n	8000694 <__aeabi_dmul+0x478>
 8000692:	e64e      	b.n	8000332 <__aeabi_dmul+0x116>
 8000694:	0034      	movs	r4, r6
 8000696:	3808      	subs	r0, #8
 8000698:	2500      	movs	r5, #0
 800069a:	4084      	lsls	r4, r0
 800069c:	e653      	b.n	8000346 <__aeabi_dmul+0x12a>
 800069e:	9b00      	ldr	r3, [sp, #0]
 80006a0:	469c      	mov	ip, r3
 80006a2:	e741      	b.n	8000528 <__aeabi_dmul+0x30c>
 80006a4:	4912      	ldr	r1, [pc, #72]	; (80006f0 <__aeabi_dmul+0x4d4>)
 80006a6:	0022      	movs	r2, r4
 80006a8:	4461      	add	r1, ip
 80006aa:	002e      	movs	r6, r5
 80006ac:	408d      	lsls	r5, r1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	40c6      	lsrs	r6, r0
 80006b2:	1e69      	subs	r1, r5, #1
 80006b4:	418d      	sbcs	r5, r1
 80006b6:	4332      	orrs	r2, r6
 80006b8:	432a      	orrs	r2, r5
 80006ba:	40c4      	lsrs	r4, r0
 80006bc:	0753      	lsls	r3, r2, #29
 80006be:	d0b6      	beq.n	800062e <__aeabi_dmul+0x412>
 80006c0:	210f      	movs	r1, #15
 80006c2:	4011      	ands	r1, r2
 80006c4:	2904      	cmp	r1, #4
 80006c6:	d1ac      	bne.n	8000622 <__aeabi_dmul+0x406>
 80006c8:	e7b1      	b.n	800062e <__aeabi_dmul+0x412>
 80006ca:	0765      	lsls	r5, r4, #29
 80006cc:	0264      	lsls	r4, r4, #9
 80006ce:	0b24      	lsrs	r4, r4, #12
 80006d0:	08d2      	lsrs	r2, r2, #3
 80006d2:	4315      	orrs	r5, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	e611      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0312      	lsls	r2, r2, #12
 80006dc:	4314      	orrs	r4, r2
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	4a01      	ldr	r2, [pc, #4]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80006e2:	0b24      	lsrs	r4, r4, #12
 80006e4:	e60a      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	000007ff 	.word	0x000007ff
 80006ec:	0000043e 	.word	0x0000043e
 80006f0:	0000041e 	.word	0x0000041e

080006f4 <__aeabi_i2d>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d016      	beq.n	8000728 <__aeabi_i2d+0x34>
 80006fa:	17c3      	asrs	r3, r0, #31
 80006fc:	18c5      	adds	r5, r0, r3
 80006fe:	405d      	eors	r5, r3
 8000700:	0fc4      	lsrs	r4, r0, #31
 8000702:	0028      	movs	r0, r5
 8000704:	f000 f8ae 	bl	8000864 <__clzsi2>
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <__aeabi_i2d+0x5c>)
 800070a:	1a12      	subs	r2, r2, r0
 800070c:	280a      	cmp	r0, #10
 800070e:	dc16      	bgt.n	800073e <__aeabi_i2d+0x4a>
 8000710:	0003      	movs	r3, r0
 8000712:	002e      	movs	r6, r5
 8000714:	3315      	adds	r3, #21
 8000716:	409e      	lsls	r6, r3
 8000718:	230b      	movs	r3, #11
 800071a:	1a18      	subs	r0, r3, r0
 800071c:	40c5      	lsrs	r5, r0
 800071e:	0553      	lsls	r3, r2, #21
 8000720:	032d      	lsls	r5, r5, #12
 8000722:	0b2d      	lsrs	r5, r5, #12
 8000724:	0d5b      	lsrs	r3, r3, #21
 8000726:	e003      	b.n	8000730 <__aeabi_i2d+0x3c>
 8000728:	2400      	movs	r4, #0
 800072a:	2300      	movs	r3, #0
 800072c:	2500      	movs	r5, #0
 800072e:	2600      	movs	r6, #0
 8000730:	051b      	lsls	r3, r3, #20
 8000732:	432b      	orrs	r3, r5
 8000734:	07e4      	lsls	r4, r4, #31
 8000736:	4323      	orrs	r3, r4
 8000738:	0030      	movs	r0, r6
 800073a:	0019      	movs	r1, r3
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	380b      	subs	r0, #11
 8000740:	4085      	lsls	r5, r0
 8000742:	0553      	lsls	r3, r2, #21
 8000744:	032d      	lsls	r5, r5, #12
 8000746:	2600      	movs	r6, #0
 8000748:	0b2d      	lsrs	r5, r5, #12
 800074a:	0d5b      	lsrs	r3, r3, #21
 800074c:	e7f0      	b.n	8000730 <__aeabi_i2d+0x3c>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	0000041e 	.word	0x0000041e

08000754 <__aeabi_d2f>:
 8000754:	0002      	movs	r2, r0
 8000756:	004b      	lsls	r3, r1, #1
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	0308      	lsls	r0, r1, #12
 800075c:	0d5b      	lsrs	r3, r3, #21
 800075e:	4e3d      	ldr	r6, [pc, #244]	; (8000854 <__aeabi_d2f+0x100>)
 8000760:	0fcc      	lsrs	r4, r1, #31
 8000762:	0a40      	lsrs	r0, r0, #9
 8000764:	0f51      	lsrs	r1, r2, #29
 8000766:	1c5f      	adds	r7, r3, #1
 8000768:	4308      	orrs	r0, r1
 800076a:	00d5      	lsls	r5, r2, #3
 800076c:	4237      	tst	r7, r6
 800076e:	d00a      	beq.n	8000786 <__aeabi_d2f+0x32>
 8000770:	4939      	ldr	r1, [pc, #228]	; (8000858 <__aeabi_d2f+0x104>)
 8000772:	185e      	adds	r6, r3, r1
 8000774:	2efe      	cmp	r6, #254	; 0xfe
 8000776:	dd16      	ble.n	80007a6 <__aeabi_d2f+0x52>
 8000778:	23ff      	movs	r3, #255	; 0xff
 800077a:	2100      	movs	r1, #0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	430b      	orrs	r3, r1
 8000780:	07e0      	lsls	r0, r4, #31
 8000782:	4318      	orrs	r0, r3
 8000784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000786:	2b00      	cmp	r3, #0
 8000788:	d106      	bne.n	8000798 <__aeabi_d2f+0x44>
 800078a:	4328      	orrs	r0, r5
 800078c:	d027      	beq.n	80007de <__aeabi_d2f+0x8a>
 800078e:	2105      	movs	r1, #5
 8000790:	0189      	lsls	r1, r1, #6
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	b2db      	uxtb	r3, r3
 8000796:	e7f1      	b.n	800077c <__aeabi_d2f+0x28>
 8000798:	4305      	orrs	r5, r0
 800079a:	d0ed      	beq.n	8000778 <__aeabi_d2f+0x24>
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	23ff      	movs	r3, #255	; 0xff
 80007a2:	4301      	orrs	r1, r0
 80007a4:	e7ea      	b.n	800077c <__aeabi_d2f+0x28>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	dd1c      	ble.n	80007e4 <__aeabi_d2f+0x90>
 80007aa:	0192      	lsls	r2, r2, #6
 80007ac:	0011      	movs	r1, r2
 80007ae:	1e4a      	subs	r2, r1, #1
 80007b0:	4191      	sbcs	r1, r2
 80007b2:	00c0      	lsls	r0, r0, #3
 80007b4:	0f6d      	lsrs	r5, r5, #29
 80007b6:	4301      	orrs	r1, r0
 80007b8:	4329      	orrs	r1, r5
 80007ba:	074b      	lsls	r3, r1, #29
 80007bc:	d048      	beq.n	8000850 <__aeabi_d2f+0xfc>
 80007be:	230f      	movs	r3, #15
 80007c0:	400b      	ands	r3, r1
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d000      	beq.n	80007c8 <__aeabi_d2f+0x74>
 80007c6:	3104      	adds	r1, #4
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	04db      	lsls	r3, r3, #19
 80007cc:	400b      	ands	r3, r1
 80007ce:	d03f      	beq.n	8000850 <__aeabi_d2f+0xfc>
 80007d0:	1c72      	adds	r2, r6, #1
 80007d2:	2efe      	cmp	r6, #254	; 0xfe
 80007d4:	d0d0      	beq.n	8000778 <__aeabi_d2f+0x24>
 80007d6:	0189      	lsls	r1, r1, #6
 80007d8:	0a49      	lsrs	r1, r1, #9
 80007da:	b2d3      	uxtb	r3, r2
 80007dc:	e7ce      	b.n	800077c <__aeabi_d2f+0x28>
 80007de:	2300      	movs	r3, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	e7cb      	b.n	800077c <__aeabi_d2f+0x28>
 80007e4:	0032      	movs	r2, r6
 80007e6:	3217      	adds	r2, #23
 80007e8:	db22      	blt.n	8000830 <__aeabi_d2f+0xdc>
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	221e      	movs	r2, #30
 80007ee:	0409      	lsls	r1, r1, #16
 80007f0:	4308      	orrs	r0, r1
 80007f2:	1b92      	subs	r2, r2, r6
 80007f4:	2a1f      	cmp	r2, #31
 80007f6:	dd1d      	ble.n	8000834 <__aeabi_d2f+0xe0>
 80007f8:	2102      	movs	r1, #2
 80007fa:	4249      	negs	r1, r1
 80007fc:	1b8e      	subs	r6, r1, r6
 80007fe:	0001      	movs	r1, r0
 8000800:	40f1      	lsrs	r1, r6
 8000802:	000e      	movs	r6, r1
 8000804:	2a20      	cmp	r2, #32
 8000806:	d004      	beq.n	8000812 <__aeabi_d2f+0xbe>
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <__aeabi_d2f+0x108>)
 800080a:	4694      	mov	ip, r2
 800080c:	4463      	add	r3, ip
 800080e:	4098      	lsls	r0, r3
 8000810:	4305      	orrs	r5, r0
 8000812:	0029      	movs	r1, r5
 8000814:	1e4d      	subs	r5, r1, #1
 8000816:	41a9      	sbcs	r1, r5
 8000818:	4331      	orrs	r1, r6
 800081a:	2600      	movs	r6, #0
 800081c:	074b      	lsls	r3, r1, #29
 800081e:	d1ce      	bne.n	80007be <__aeabi_d2f+0x6a>
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	000b      	movs	r3, r1
 8000824:	04c0      	lsls	r0, r0, #19
 8000826:	2201      	movs	r2, #1
 8000828:	4003      	ands	r3, r0
 800082a:	4201      	tst	r1, r0
 800082c:	d1d3      	bne.n	80007d6 <__aeabi_d2f+0x82>
 800082e:	e7af      	b.n	8000790 <__aeabi_d2f+0x3c>
 8000830:	2300      	movs	r3, #0
 8000832:	e7ac      	b.n	800078e <__aeabi_d2f+0x3a>
 8000834:	490a      	ldr	r1, [pc, #40]	; (8000860 <__aeabi_d2f+0x10c>)
 8000836:	468c      	mov	ip, r1
 8000838:	0029      	movs	r1, r5
 800083a:	4463      	add	r3, ip
 800083c:	40d1      	lsrs	r1, r2
 800083e:	409d      	lsls	r5, r3
 8000840:	000a      	movs	r2, r1
 8000842:	0029      	movs	r1, r5
 8000844:	4098      	lsls	r0, r3
 8000846:	1e4d      	subs	r5, r1, #1
 8000848:	41a9      	sbcs	r1, r5
 800084a:	4301      	orrs	r1, r0
 800084c:	4311      	orrs	r1, r2
 800084e:	e7e4      	b.n	800081a <__aeabi_d2f+0xc6>
 8000850:	0033      	movs	r3, r6
 8000852:	e79d      	b.n	8000790 <__aeabi_d2f+0x3c>
 8000854:	000007fe 	.word	0x000007fe
 8000858:	fffffc80 	.word	0xfffffc80
 800085c:	fffffca2 	.word	0xfffffca2
 8000860:	fffffc82 	.word	0xfffffc82

08000864 <__clzsi2>:
 8000864:	211c      	movs	r1, #28
 8000866:	2301      	movs	r3, #1
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	4298      	cmp	r0, r3
 800086c:	d301      	bcc.n	8000872 <__clzsi2+0xe>
 800086e:	0c00      	lsrs	r0, r0, #16
 8000870:	3910      	subs	r1, #16
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	4298      	cmp	r0, r3
 8000876:	d301      	bcc.n	800087c <__clzsi2+0x18>
 8000878:	0a00      	lsrs	r0, r0, #8
 800087a:	3908      	subs	r1, #8
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	4298      	cmp	r0, r3
 8000880:	d301      	bcc.n	8000886 <__clzsi2+0x22>
 8000882:	0900      	lsrs	r0, r0, #4
 8000884:	3904      	subs	r1, #4
 8000886:	a202      	add	r2, pc, #8	; (adr r2, 8000890 <__clzsi2+0x2c>)
 8000888:	5c10      	ldrb	r0, [r2, r0]
 800088a:	1840      	adds	r0, r0, r1
 800088c:	4770      	bx	lr
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	02020304 	.word	0x02020304
 8000894:	01010101 	.word	0x01010101
	...

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 f9e2 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f832 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f000 f8f8 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008b0:	f000 f88c 	bl	80009cc <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <main+0x5c>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fd70 	bl	800139c <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100);
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <main+0x5c>)
 80008be:	2164      	movs	r1, #100	; 0x64
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fdb9 	bl	8001438 <HAL_ADC_PollForConversion>

	  potenciometro = HAL_ADC_GetValue(&hadc1);
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <main+0x5c>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fe49 	bl	8001560 <HAL_ADC_GetValue>
 80008ce:	0003      	movs	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <main+0x60>)
 80008d4:	801a      	strh	r2, [r3, #0]

	  tensao = 3.3 / 4095.0 * potenciometro;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <main+0x60>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff0a 	bl	80006f4 <__aeabi_i2d>
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <main+0x64>)
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <main+0x68>)
 80008e4:	f7ff fc9a 	bl	800021c <__aeabi_dmul>
 80008e8:	0002      	movs	r2, r0
 80008ea:	000b      	movs	r3, r1
 80008ec:	0010      	movs	r0, r2
 80008ee:	0019      	movs	r1, r3
 80008f0:	f7ff ff30 	bl	8000754 <__aeabi_d2f>
 80008f4:	1c02      	adds	r2, r0, #0
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <main+0x6c>)
 80008f8:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 80008fa:	e7db      	b.n	80008b4 <main+0x14>
 80008fc:	2000002c 	.word	0x2000002c
 8000900:	20000090 	.word	0x20000090
 8000904:	e734d9b4 	.word	0xe734d9b4
 8000908:	3f4a680c 	.word	0x3f4a680c
 800090c:	20000028 	.word	0x20000028

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b095      	sub	sp, #84	; 0x54
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	2414      	movs	r4, #20
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	233c      	movs	r3, #60	; 0x3c
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f002 fa37 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	0018      	movs	r0, r3
 800092a:	2310      	movs	r3, #16
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fa30 	bl	8002d94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fa9b 	bl	8001e74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800094c:	0021      	movs	r1, r4
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2240      	movs	r2, #64	; 0x40
 8000958:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2202      	movs	r2, #2
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2208      	movs	r2, #8
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0292      	lsls	r2, r2, #10
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0492      	lsls	r2, r2, #18
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0592      	lsls	r2, r2, #22
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	187b      	adds	r3, r7, r1
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fab1 	bl	8001ef4 <HAL_RCC_OscConfig>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000996:	f000 f899 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2202      	movs	r2, #2
 80009a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2102      	movs	r1, #2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fe02 	bl	80025c0 <HAL_RCC_ClockConfig>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009c0:	f000 f884 	bl	8000acc <Error_Handler>
  }
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b015      	add	sp, #84	; 0x54
 80009ca:	bd90      	pop	{r4, r7, pc}

080009cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	230c      	movs	r3, #12
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 f9da 	bl	8002d94 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_ADC1_Init+0xcc>)
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <MX_ADC1_Init+0xd0>)
 80009e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_ADC1_Init+0xcc>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	05d2      	lsls	r2, r2, #23
 80009ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_ADC1_Init+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_ADC1_Init+0xcc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_ADC1_Init+0xcc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a20:	2220      	movs	r2, #32
 8000a22:	2100      	movs	r1, #0
 8000a24:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a34:	222c      	movs	r2, #44	; 0x2c
 8000a36:	2100      	movs	r1, #0
 8000a38:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a42:	2205      	movs	r2, #5
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a48:	2205      	movs	r2, #5
 8000a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a4e:	223c      	movs	r2, #60	; 0x3c
 8000a50:	2100      	movs	r1, #0
 8000a52:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fabf 	bl	8000fe0 <HAL_ADC_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a66:	f000 f831 	bl	8000acc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_ADC1_Init+0xcc>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fd78 	bl	8001578 <HAL_ADC_ConfigChannel>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000a8c:	f000 f81e 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b004      	add	sp, #16
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000002c 	.word	0x2000002c
 8000a9c:	40012400 	.word	0x40012400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_GPIO_Init+0x28>)
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_GPIO_Init+0x28>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0x28>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x4c>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0549      	lsls	r1, r1, #21
 8000b00:	430a      	orrs	r2, r1
 8000b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	055b      	lsls	r3, r3, #21
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b12:	23c0      	movs	r3, #192	; 0xc0
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f92e 	bl	8000d78 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b09d      	sub	sp, #116	; 0x74
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	235c      	movs	r3, #92	; 0x5c
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f002 f92a 	bl	8002d94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	2410      	movs	r4, #16
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	234c      	movs	r3, #76	; 0x4c
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f002 f922 	bl	8002d94 <memset>
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <HAL_ADC_MspInit+0xb0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d139      	bne.n	8000bce <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	01d2      	lsls	r2, r2, #7
 8000b60:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 feb2 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b74:	f7ff ffaa 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0349      	lsls	r1, r1, #13
 8000b82:	430a      	orrs	r2, r1
 8000b84:	641a      	str	r2, [r3, #64]	; 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	035b      	lsls	r3, r3, #13
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_ADC_MspInit+0xb4>)
 8000ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bac:	215c      	movs	r1, #92	; 0x5c
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	187a      	adds	r2, r7, r1
 8000bc2:	23a0      	movs	r3, #160	; 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 ffe7 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b01d      	add	sp, #116	; 0x74
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f89c 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff7 	bl	8000c0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f002 f881 	bl	8002d4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c4a:	f7ff fe29 	bl	80008a0 <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	20000098 	.word	0x20000098

08000c68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_COMP_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x3c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Init+0x3c>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	0049      	lsls	r1, r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f810 	bl	8000cac <HAL_InitTick>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff ff1e 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_InitTick+0x88>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d02b      	beq.n	8000d1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_InitTick+0x8c>)
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	0019      	movs	r1, r3
 8000cce:	23fa      	movs	r3, #250	; 0xfa
 8000cd0:	0098      	lsls	r0, r3, #2
 8000cd2:	f7ff fa17 	bl	8000104 <__udivsi3>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f7ff fa12 	bl	8000104 <__udivsi3>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 ff4d 	bl	8001b82 <HAL_SYSTICK_Config>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d112      	bne.n	8000d12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80a      	bhi.n	8000d08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 ff2c 	bl	8001b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_InitTick+0x90>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00d      	b.n	8000d24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e008      	b.n	8000d24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e003      	b.n	8000d24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000094 	.word	0x20000094

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	20000094 	.word	0x20000094

08000d78 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	0019      	movs	r1, r3
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	fffff9ff 	.word	0xfffff9ff

08000da4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000db4:	401a      	ands	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	fe3fffff 	.word	0xfe3fffff

08000dcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	23e0      	movs	r3, #224	; 0xe0
 8000dda:	045b      	lsls	r3, r3, #17
 8000ddc:	4013      	ands	r3, r2
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	2104      	movs	r1, #4
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	2107      	movs	r1, #7
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	000a      	movs	r2, r1
 8000e02:	43d2      	mvns	r2, r2
 8000e04:	401a      	ands	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	4099      	lsls	r1, r3
 8000e10:	000b      	movs	r3, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4013      	ands	r3, r2
 8000e32:	d101      	bne.n	8000e38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	211f      	movs	r1, #31
 8000e56:	400a      	ands	r2, r1
 8000e58:	210f      	movs	r1, #15
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	43d2      	mvns	r2, r2
 8000e60:	401a      	ands	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0e9b      	lsrs	r3, r3, #26
 8000e66:	210f      	movs	r1, #15
 8000e68:	4019      	ands	r1, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	201f      	movs	r0, #31
 8000e6e:	4003      	ands	r3, r0
 8000e70:	4099      	lsls	r1, r3
 8000e72:	000b      	movs	r3, r1
 8000e74:	431a      	orrs	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	035b      	lsls	r3, r3, #13
 8000e94:	0b5b      	lsrs	r3, r3, #13
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	0352      	lsls	r2, r2, #13
 8000eb6:	0b52      	lsrs	r2, r2, #13
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	0212      	lsls	r2, r2, #8
 8000edc:	43d2      	mvns	r2, r2
 8000ede:	401a      	ands	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	4904      	ldr	r1, [pc, #16]	; (8000efc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000eea:	400b      	ands	r3, r1
 8000eec:	431a      	orrs	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	07ffff00 	.word	0x07ffff00

08000f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	0552      	lsls	r2, r2, #21
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	6fffffe8 	.word	0x6fffffe8

08000f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	055b      	lsls	r3, r3, #21
 8000f38:	401a      	ands	r2, r3
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	055b      	lsls	r3, r3, #21
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d101      	bne.n	8000f46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <LL_ADC_Enable+0x20>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	7fffffe8 	.word	0x7fffffe8

08000f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <LL_ADC_IsEnabled+0x18>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <LL_ADC_IsEnabled+0x1a>
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <LL_ADC_REG_StartConversion+0x20>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2204      	movs	r2, #4
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	7fffffe8 	.word	0x7fffffe8

08000fbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d101      	bne.n	8000fd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	231f      	movs	r3, #31
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1b1      	b.n	800136a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff fd89 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2254      	movs	r2, #84	; 0x54
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff7d 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d115      	bne.n	800105e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff ff62 	bl	8000f00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800103c:	4bcd      	ldr	r3, [pc, #820]	; (8001374 <HAL_ADC_Init+0x394>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	49cd      	ldr	r1, [pc, #820]	; (8001378 <HAL_ADC_Init+0x398>)
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff f85e 	bl	8000104 <__udivsi3>
 8001048:	0003      	movs	r3, r0
 800104a:	3301      	adds	r3, #1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001050:	e002      	b.n	8001058 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3b01      	subs	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff ff60 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d10f      	bne.n	800108c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	2210      	movs	r2, #16
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	2201      	movs	r2, #1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001084:	231f      	movs	r3, #31
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff93 	bl	8000fbc <LL_ADC_REG_IsConversionOngoing>
 8001096:	0003      	movs	r3, r0
 8001098:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	2210      	movs	r2, #16
 80010a0:	4013      	ands	r3, r2
 80010a2:	d000      	beq.n	80010a6 <HAL_ADC_Init+0xc6>
 80010a4:	e154      	b.n	8001350 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d000      	beq.n	80010ae <HAL_ADC_Init+0xce>
 80010ac:	e150      	b.n	8001350 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	4ab2      	ldr	r2, [pc, #712]	; (800137c <HAL_ADC_Init+0x39c>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	2202      	movs	r2, #2
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff ff56 	bl	8000f74 <LL_ADC_IsEnabled>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d156      	bne.n	800117a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2218      	movs	r2, #24
 80010d4:	4393      	bics	r3, r2
 80010d6:	0019      	movs	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	0f9b      	lsrs	r3, r3, #30
 80010ea:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010f0:	4313      	orrs	r3, r2
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	223c      	movs	r2, #60	; 0x3c
 80010fc:	5c9b      	ldrb	r3, [r3, r2]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d111      	bne.n	8001126 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	0f9b      	lsrs	r3, r3, #30
 8001108:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800110e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001114:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800111a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4313      	orrs	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_ADC_Init+0x3a0>)
 800112e:	4013      	ands	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	430a      	orrs	r2, r1
 800113a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	429a      	cmp	r2, r3
 8001146:	d018      	beq.n	800117a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	429a      	cmp	r2, r3
 8001152:	d012      	beq.n	800117a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	429a      	cmp	r2, r3
 800115e:	d00c      	beq.n	800117a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001160:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_ADC_Init+0x3a4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <HAL_ADC_Init+0x3a8>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23f0      	movs	r3, #240	; 0xf0
 8001170:	039b      	lsls	r3, r3, #14
 8001172:	401a      	ands	r2, r3
 8001174:	4b83      	ldr	r3, [pc, #524]	; (8001384 <HAL_ADC_Init+0x3a4>)
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e1b      	ldrb	r3, [r3, #24]
 800117e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e5b      	ldrb	r3, [r3, #25]
 8001184:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001186:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800118e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HAL_ADC_Init+0x1be>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	e000      	b.n	80011a0 <HAL_ADC_Init+0x1c0>
 800119e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011a6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da04      	bge.n	80011ba <HAL_ADC_Init+0x1da>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	085b      	lsrs	r3, r3, #1
 80011b8:	e001      	b.n	80011be <HAL_ADC_Init+0x1de>
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80011be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	212c      	movs	r1, #44	; 0x2c
 80011c4:	5c5b      	ldrb	r3, [r3, r1]
 80011c6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	5c9b      	ldrb	r3, [r3, r2]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d115      	bne.n	8001206 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e9b      	ldrb	r3, [r3, #26]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	0252      	lsls	r2, r2, #9
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	e00b      	b.n	8001206 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	2220      	movs	r2, #32
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	2201      	movs	r2, #1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001212:	23e0      	movs	r3, #224	; 0xe0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800121c:	4313      	orrs	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_ADC_Init+0x3ac>)
 800122c:	4013      	ands	r3, r2
 800122e:	0019      	movs	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	4a53      	ldr	r2, [pc, #332]	; (8001390 <HAL_ADC_Init+0x3b0>)
 8001242:	4013      	ands	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	430a      	orrs	r2, r1
 800124e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	001a      	movs	r2, r3
 800125a:	2100      	movs	r1, #0
 800125c:	f7ff fdc3 	bl	8000de6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	494a      	ldr	r1, [pc, #296]	; (8001394 <HAL_ADC_Init+0x3b4>)
 800126a:	001a      	movs	r2, r3
 800126c:	f7ff fdbb 	bl	8000de6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2110      	movs	r1, #16
 8001284:	4249      	negs	r1, r1
 8001286:	430a      	orrs	r2, r1
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
 800128a:	e03a      	b.n	8001302 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	039b      	lsls	r3, r3, #14
 8001294:	429a      	cmp	r2, r3
 8001296:	d134      	bne.n	8001302 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e00c      	b.n	80012b8 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	40da      	lsrs	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	220f      	movs	r2, #15
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	d006      	beq.n	80012c0 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d9ef      	bls.n	800129e <HAL_ADC_Init+0x2be>
 80012be:	e000      	b.n	80012c2 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80012c0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d109      	bne.n	80012dc <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2110      	movs	r1, #16
 80012d4:	4249      	negs	r1, r1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
 80012da:	e012      	b.n	8001302 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	221c      	movs	r2, #28
 80012ec:	4013      	ands	r3, r2
 80012ee:	2210      	movs	r2, #16
 80012f0:	4252      	negs	r2, r2
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4a23      	ldr	r2, [pc, #140]	; (8001398 <HAL_ADC_Init+0x3b8>)
 800130a:	4013      	ands	r3, r2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	429a      	cmp	r2, r3
 8001310:	d10b      	bne.n	800132a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	2203      	movs	r2, #3
 800131e:	4393      	bics	r3, r2
 8001320:	2201      	movs	r2, #1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001328:	e01c      	b.n	8001364 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	2212      	movs	r2, #18
 8001330:	4393      	bics	r3, r2
 8001332:	2210      	movs	r2, #16
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	2201      	movs	r2, #1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001346:	231f      	movs	r3, #31
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800134e:	e009      	b.n	8001364 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	2210      	movs	r2, #16
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800135c:	231f      	movs	r3, #31
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001364:	231f      	movs	r3, #31
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b008      	add	sp, #32
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	20000000 	.word	0x20000000
 8001378:	00030d40 	.word	0x00030d40
 800137c:	fffffefd 	.word	0xfffffefd
 8001380:	1ffffc02 	.word	0x1ffffc02
 8001384:	40012708 	.word	0x40012708
 8001388:	ffc3ffff 	.word	0xffc3ffff
 800138c:	fffe0219 	.word	0xfffe0219
 8001390:	dffffc02 	.word	0xdffffc02
 8001394:	07ffff04 	.word	0x07ffff04
 8001398:	833fffe7 	.word	0x833fffe7

0800139c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fe07 	bl	8000fbc <LL_ADC_REG_IsConversionOngoing>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d135      	bne.n	800141e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2254      	movs	r2, #84	; 0x54
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_Start+0x24>
 80013bc:	2302      	movs	r3, #2
 80013be:	e035      	b.n	800142c <HAL_ADC_Start+0x90>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2254      	movs	r2, #84	; 0x54
 80013c4:	2101      	movs	r1, #1
 80013c6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013c8:	250f      	movs	r5, #15
 80013ca:	197c      	adds	r4, r7, r5
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 faaa 	bl	8001928 <ADC_Enable>
 80013d4:	0003      	movs	r3, r0
 80013d6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013d8:	197b      	adds	r3, r7, r5
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d119      	bne.n	8001414 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	4a13      	ldr	r2, [pc, #76]	; (8001434 <HAL_ADC_Start+0x98>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0052      	lsls	r2, r2, #1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	221c      	movs	r2, #28
 80013fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2254      	movs	r2, #84	; 0x54
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fdc3 	bl	8000f98 <LL_ADC_REG_StartConversion>
 8001412:	e008      	b.n	8001426 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2254      	movs	r2, #84	; 0x54
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]
 800141c:	e003      	b.n	8001426 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800141e:	230f      	movs	r3, #15
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001426:	230f      	movs	r3, #15
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	781b      	ldrb	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	fffff0fe 	.word	0xfffff0fe

08001438 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d102      	bne.n	8001450 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800144a:	2308      	movs	r3, #8
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e00f      	b.n	8001470 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	4013      	ands	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	2220      	movs	r2, #32
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e072      	b.n	8001552 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800146c:	2304      	movs	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001470:	f7ff fc78 	bl	8000d64 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001478:	e01f      	b.n	80014ba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	d01c      	beq.n	80014ba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001480:	f7ff fc70 	bl	8000d64 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d302      	bcc.n	8001496 <HAL_ADC_PollForConversion+0x5e>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d111      	bne.n	80014ba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	d10b      	bne.n	80014ba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	2204      	movs	r2, #4
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2254      	movs	r2, #84	; 0x54
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e04b      	b.n	8001552 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	d0d9      	beq.n	800147a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fca1 	bl	8000e20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014de:	1e03      	subs	r3, r0, #0
 80014e0:	d02e      	beq.n	8001540 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7e9b      	ldrb	r3, [r3, #26]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d12a      	bne.n	8001540 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2208      	movs	r2, #8
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d123      	bne.n	8001540 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fd5d 	bl	8000fbc <LL_ADC_REG_IsConversionOngoing>
 8001502:	1e03      	subs	r3, r0, #0
 8001504:	d110      	bne.n	8001528 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	210c      	movs	r1, #12
 8001512:	438a      	bics	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_ADC_PollForConversion+0x124>)
 800151c:	4013      	ands	r3, r2
 800151e:	2201      	movs	r2, #1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	659a      	str	r2, [r3, #88]	; 0x58
 8001526:	e00b      	b.n	8001540 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	2220      	movs	r2, #32
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2201      	movs	r2, #1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	220c      	movs	r2, #12
 800154e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	fffffefe 	.word	0xfffffefe

08001560 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001582:	2317      	movs	r3, #23
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2254      	movs	r2, #84	; 0x54
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_ADC_ConfigChannel+0x24>
 8001598:	2302      	movs	r3, #2
 800159a:	e1c0      	b.n	800191e <HAL_ADC_ConfigChannel+0x3a6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2254      	movs	r2, #84	; 0x54
 80015a0:	2101      	movs	r1, #1
 80015a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fd07 	bl	8000fbc <LL_ADC_REG_IsConversionOngoing>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d000      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x3c>
 80015b2:	e1a3      	b.n	80018fc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d100      	bne.n	80015be <HAL_ADC_ConfigChannel+0x46>
 80015bc:	e143      	b.n	8001846 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d004      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ce:	4ac1      	ldr	r2, [pc, #772]	; (80018d4 <HAL_ADC_ConfigChannel+0x35c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d108      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0019      	movs	r1, r3
 80015de:	0010      	movs	r0, r2
 80015e0:	f7ff fc4f 	bl	8000e82 <LL_ADC_REG_SetSequencerChAdd>
 80015e4:	e0c9      	b.n	800177a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	211f      	movs	r1, #31
 80015f0:	400b      	ands	r3, r1
 80015f2:	210f      	movs	r1, #15
 80015f4:	4099      	lsls	r1, r3
 80015f6:	000b      	movs	r3, r1
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	035b      	lsls	r3, r3, #13
 8001604:	0b5b      	lsrs	r3, r3, #13
 8001606:	d105      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x9c>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0e9b      	lsrs	r3, r3, #26
 800160e:	221f      	movs	r2, #31
 8001610:	4013      	ands	r3, r2
 8001612:	e098      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	d000      	beq.n	8001620 <HAL_ADC_ConfigChannel+0xa8>
 800161e:	e091      	b.n	8001744 <HAL_ADC_ConfigChannel+0x1cc>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d000      	beq.n	800162c <HAL_ADC_ConfigChannel+0xb4>
 800162a:	e089      	b.n	8001740 <HAL_ADC_ConfigChannel+0x1c8>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2204      	movs	r2, #4
 8001632:	4013      	ands	r3, r2
 8001634:	d000      	beq.n	8001638 <HAL_ADC_ConfigChannel+0xc0>
 8001636:	e081      	b.n	800173c <HAL_ADC_ConfigChannel+0x1c4>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	4013      	ands	r3, r2
 8001640:	d000      	beq.n	8001644 <HAL_ADC_ConfigChannel+0xcc>
 8001642:	e079      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1c0>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2210      	movs	r2, #16
 800164a:	4013      	ands	r3, r2
 800164c:	d000      	beq.n	8001650 <HAL_ADC_ConfigChannel+0xd8>
 800164e:	e071      	b.n	8001734 <HAL_ADC_ConfigChannel+0x1bc>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2220      	movs	r2, #32
 8001656:	4013      	ands	r3, r2
 8001658:	d000      	beq.n	800165c <HAL_ADC_ConfigChannel+0xe4>
 800165a:	e069      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1b8>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	4013      	ands	r3, r2
 8001664:	d000      	beq.n	8001668 <HAL_ADC_ConfigChannel+0xf0>
 8001666:	e061      	b.n	800172c <HAL_ADC_ConfigChannel+0x1b4>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	4013      	ands	r3, r2
 8001670:	d000      	beq.n	8001674 <HAL_ADC_ConfigChannel+0xfc>
 8001672:	e059      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1b0>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4013      	ands	r3, r2
 800167e:	d151      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1ac>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d149      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1a8>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4013      	ands	r3, r2
 8001696:	d141      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1a4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d139      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1a0>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4013      	ands	r3, r2
 80016ae:	d131      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x19c>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	4013      	ands	r3, r2
 80016ba:	d129      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x198>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	01db      	lsls	r3, r3, #7
 80016c4:	4013      	ands	r3, r2
 80016c6:	d121      	bne.n	800170c <HAL_ADC_ConfigChannel+0x194>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	4013      	ands	r3, r2
 80016d2:	d119      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x190>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	025b      	lsls	r3, r3, #9
 80016dc:	4013      	ands	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x18c>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x188>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	02db      	lsls	r3, r3, #11
 80016f4:	4013      	ands	r3, r2
 80016f6:	d001      	beq.n	80016fc <HAL_ADC_ConfigChannel+0x184>
 80016f8:	2312      	movs	r3, #18
 80016fa:	e024      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 80016fc:	2300      	movs	r3, #0
 80016fe:	e022      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001700:	2311      	movs	r3, #17
 8001702:	e020      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001704:	2310      	movs	r3, #16
 8001706:	e01e      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001708:	230f      	movs	r3, #15
 800170a:	e01c      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 800170c:	230e      	movs	r3, #14
 800170e:	e01a      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001710:	230d      	movs	r3, #13
 8001712:	e018      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001714:	230c      	movs	r3, #12
 8001716:	e016      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001718:	230b      	movs	r3, #11
 800171a:	e014      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 800171c:	230a      	movs	r3, #10
 800171e:	e012      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001720:	2309      	movs	r3, #9
 8001722:	e010      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001724:	2308      	movs	r3, #8
 8001726:	e00e      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001728:	2307      	movs	r3, #7
 800172a:	e00c      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 800172c:	2306      	movs	r3, #6
 800172e:	e00a      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001730:	2305      	movs	r3, #5
 8001732:	e008      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001734:	2304      	movs	r3, #4
 8001736:	e006      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001738:	2303      	movs	r3, #3
 800173a:	e004      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1ce>
 8001744:	2300      	movs	r3, #0
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	201f      	movs	r0, #31
 800174c:	4002      	ands	r2, r0
 800174e:	4093      	lsls	r3, r2
 8001750:	000a      	movs	r2, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	429a      	cmp	r2, r3
 8001766:	d808      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	001a      	movs	r2, r3
 8001776:	f7ff fb64 	bl	8000e42 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	001a      	movs	r2, r3
 8001788:	f7ff fb9e 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db00      	blt.n	8001796 <HAL_ADC_ConfigChannel+0x21e>
 8001794:	e0bc      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001796:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fb17 	bl	8000dcc <LL_ADC_GetCommonPathInternalCh>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_ADC_ConfigChannel+0x364>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d122      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017b4:	d11d      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0412      	lsls	r2, r2, #16
 80017bc:	4313      	orrs	r3, r2
 80017be:	4a46      	ldr	r2, [pc, #280]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 80017c0:	0019      	movs	r1, r3
 80017c2:	0010      	movs	r0, r2
 80017c4:	f7ff faee 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_ADC_ConfigChannel+0x368>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4945      	ldr	r1, [pc, #276]	; (80018e4 <HAL_ADC_ConfigChannel+0x36c>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fc98 	bl	8000104 <__udivsi3>
 80017d4:	0003      	movs	r3, r0
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	0013      	movs	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	189b      	adds	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017e2:	e002      	b.n	80017ea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f9      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017f0:	e08e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a3c      	ldr	r2, [pc, #240]	; (80018e8 <HAL_ADC_ConfigChannel+0x370>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d10e      	bne.n	800181a <HAL_ADC_ConfigChannel+0x2a2>
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	045b      	lsls	r3, r3, #17
 8001802:	4013      	ands	r3, r2
 8001804:	d109      	bne.n	800181a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	0452      	lsls	r2, r2, #17
 800180c:	4313      	orrs	r3, r2
 800180e:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 8001810:	0019      	movs	r1, r3
 8001812:	0010      	movs	r0, r2
 8001814:	f7ff fac6 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 8001818:	e07a      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a33      	ldr	r2, [pc, #204]	; (80018ec <HAL_ADC_ConfigChannel+0x374>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d000      	beq.n	8001826 <HAL_ADC_ConfigChannel+0x2ae>
 8001824:	e074      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	03db      	lsls	r3, r3, #15
 800182c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800182e:	d000      	beq.n	8001832 <HAL_ADC_ConfigChannel+0x2ba>
 8001830:	e06e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	03d2      	lsls	r2, r2, #15
 8001838:	4313      	orrs	r3, r2
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 800183c:	0019      	movs	r1, r3
 800183e:	0010      	movs	r0, r2
 8001840:	f7ff fab0 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 8001844:	e064      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	429a      	cmp	r2, r3
 8001850:	d004      	beq.n	800185c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_ADC_ConfigChannel+0x35c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d107      	bne.n	800186c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0019      	movs	r1, r3
 8001866:	0010      	movs	r0, r2
 8001868:	f7ff fb1c 	bl	8000ea4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da4d      	bge.n	8001910 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff faa8 	bl	8000dcc <LL_ADC_GetCommonPathInternalCh>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_ADC_ConfigChannel+0x364>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d108      	bne.n	800189c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <HAL_ADC_ConfigChannel+0x378>)
 800188e:	4013      	ands	r3, r2
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 8001892:	0019      	movs	r1, r3
 8001894:	0010      	movs	r0, r2
 8001896:	f7ff fa85 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 800189a:	e039      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_ADC_ConfigChannel+0x370>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d108      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_ADC_ConfigChannel+0x37c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 80018ae:	0019      	movs	r1, r3
 80018b0:	0010      	movs	r0, r2
 80018b2:	f7ff fa77 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 80018b6:	e02b      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_ADC_ConfigChannel+0x374>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d126      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_ADC_ConfigChannel+0x380>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <HAL_ADC_ConfigChannel+0x360>)
 80018ca:	0019      	movs	r1, r3
 80018cc:	0010      	movs	r0, r2
 80018ce:	f7ff fa69 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 80018d2:	e01d      	b.n	8001910 <HAL_ADC_ConfigChannel+0x398>
 80018d4:	80000004 	.word	0x80000004
 80018d8:	40012708 	.word	0x40012708
 80018dc:	b0001000 	.word	0xb0001000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	00030d40 	.word	0x00030d40
 80018e8:	b8004000 	.word	0xb8004000
 80018ec:	b4002000 	.word	0xb4002000
 80018f0:	ff7fffff 	.word	0xff7fffff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	2220      	movs	r2, #32
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001908:	2317      	movs	r3, #23
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2254      	movs	r2, #84	; 0x54
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001918:	2317      	movs	r3, #23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b006      	add	sp, #24
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)

08001928 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff fb1b 	bl	8000f74 <LL_ADC_IsEnabled>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d000      	beq.n	8001944 <ADC_Enable+0x1c>
 8001942:	e069      	b.n	8001a18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <ADC_Enable+0xfc>)
 800194c:	4013      	ands	r3, r2
 800194e:	d00d      	beq.n	800196c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	2210      	movs	r2, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	2201      	movs	r2, #1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e056      	b.n	8001a1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff faed 	bl	8000f50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <ADC_Enable+0x100>)
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fa27 	bl	8000dcc <LL_ADC_GetCommonPathInternalCh>
 800197e:	0002      	movs	r2, r0
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	4013      	ands	r3, r2
 8001986:	d00f      	beq.n	80019a8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <ADC_Enable+0x104>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4928      	ldr	r1, [pc, #160]	; (8001a30 <ADC_Enable+0x108>)
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fbb8 	bl	8000104 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	3301      	adds	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800199a:	e002      	b.n	80019a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7e5b      	ldrb	r3, [r3, #25]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d033      	beq.n	8001a18 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80019b0:	f7ff f9d8 	bl	8000d64 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019b8:	e027      	b.n	8001a0a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff fad8 	bl	8000f74 <LL_ADC_IsEnabled>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d104      	bne.n	80019d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff fabf 	bl	8000f50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019d2:	f7ff f9c7 	bl	8000d64 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d914      	bls.n	8001a0a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00d      	beq.n	8001a0a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	2210      	movs	r2, #16
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fe:	2201      	movs	r2, #1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d1d0      	bne.n	80019ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	80000017 	.word	0x80000017
 8001a28:	40012708 	.word	0x40012708
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	00030d40 	.word	0x00030d40

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b7f      	cmp	r3, #127	; 0x7f
 8001a48:	d828      	bhi.n	8001a9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <__NVIC_SetPriority+0xd4>)
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	33c0      	adds	r3, #192	; 0xc0
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	589b      	ldr	r3, [r3, r2]
 8001a5a:	1dfa      	adds	r2, r7, #7
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	0011      	movs	r1, r2
 8001a60:	2203      	movs	r2, #3
 8001a62:	400a      	ands	r2, r1
 8001a64:	00d2      	lsls	r2, r2, #3
 8001a66:	21ff      	movs	r1, #255	; 0xff
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	43d2      	mvns	r2, r2
 8001a6e:	401a      	ands	r2, r3
 8001a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	401a      	ands	r2, r3
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	2303      	movs	r3, #3
 8001a82:	4003      	ands	r3, r0
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a88:	481f      	ldr	r0, [pc, #124]	; (8001b08 <__NVIC_SetPriority+0xd4>)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	430a      	orrs	r2, r1
 8001a94:	33c0      	adds	r3, #192	; 0xc0
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a9a:	e031      	b.n	8001b00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <__NVIC_SetPriority+0xd8>)
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	3b08      	subs	r3, #8
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3306      	adds	r3, #6
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	18d3      	adds	r3, r2, r3
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1dfa      	adds	r2, r7, #7
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	0011      	movs	r1, r2
 8001abc:	2203      	movs	r2, #3
 8001abe:	400a      	ands	r2, r1
 8001ac0:	00d2      	lsls	r2, r2, #3
 8001ac2:	21ff      	movs	r1, #255	; 0xff
 8001ac4:	4091      	lsls	r1, r2
 8001ac6:	000a      	movs	r2, r1
 8001ac8:	43d2      	mvns	r2, r2
 8001aca:	401a      	ands	r2, r3
 8001acc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	019b      	lsls	r3, r3, #6
 8001ad2:	22ff      	movs	r2, #255	; 0xff
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	0018      	movs	r0, r3
 8001adc:	2303      	movs	r3, #3
 8001ade:	4003      	ands	r3, r0
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae4:	4809      	ldr	r0, [pc, #36]	; (8001b0c <__NVIC_SetPriority+0xd8>)
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	001c      	movs	r4, r3
 8001aec:	230f      	movs	r3, #15
 8001aee:	4023      	ands	r3, r4
 8001af0:	3b08      	subs	r3, #8
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	430a      	orrs	r2, r1
 8001af6:	3306      	adds	r3, #6
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	18c3      	adds	r3, r0, r3
 8001afc:	3304      	adds	r3, #4
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b003      	add	sp, #12
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1e5a      	subs	r2, r3, #1
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	045b      	lsls	r3, r3, #17
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d301      	bcc.n	8001b28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b24:	2301      	movs	r3, #1
 8001b26:	e010      	b.n	8001b4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <SysTick_Config+0x44>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b30:	2301      	movs	r3, #1
 8001b32:	425b      	negs	r3, r3
 8001b34:	2103      	movs	r1, #3
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff7c 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x44>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x44>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	210f      	movs	r1, #15
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	1c02      	adds	r2, r0, #0
 8001b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff ffbf 	bl	8001b10 <SysTick_Config>
 8001b92:	0003      	movs	r3, r0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e14d      	b.n	8001e48 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <HAL_GPIO_Init+0x28>
 8001bc2:	e13e      	b.n	8001e42 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x40>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	58d3      	ldr	r3, [r2, r3]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	401a      	ands	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_GPIO_Init+0x174>
 8001d0e:	e098      	b.n	8001e42 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d10:	4a53      	ldr	r2, [pc, #332]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3318      	adds	r3, #24
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	589b      	ldr	r3, [r3, r2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	220f      	movs	r2, #15
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	23a0      	movs	r3, #160	; 0xa0
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x1d6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x1d2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x1ce>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a45      	ldr	r2, [pc, #276]	; (8001e70 <HAL_GPIO_Init+0x2d4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x1c6>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d72:	2300      	movs	r3, #0
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	2103      	movs	r1, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d84:	4936      	ldr	r1, [pc, #216]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d92:	4a33      	ldr	r2, [pc, #204]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	58d3      	ldr	r3, [r2, r3]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	4013      	ands	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001db8:	4929      	ldr	r1, [pc, #164]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001dc2:	2384      	movs	r3, #132	; 0x84
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de6:	491e      	ldr	r1, [pc, #120]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001de8:	2284      	movs	r2, #132	; 0x84
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	035b      	lsls	r3, r3, #13
 8001e06:	4013      	ands	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	4013      	ands	r3, r2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	40da      	lsrs	r2, r3
 8001e50:	1e13      	subs	r3, r2, #0
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0x2ba>
 8001e54:	e6aa      	b.n	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021800 	.word	0x40021800
 8001e64:	50000400 	.word	0x50000400
 8001e68:	50000800 	.word	0x50000800
 8001e6c:	50000c00 	.word	0x50000c00
 8001e70:	50001000 	.word	0x50001000

08001e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d11f      	bne.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe f92c 	bl	8000104 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb2:	e008      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e001      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e009      	b.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d0ed      	beq.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	fffff9ff 	.word	0xfffff9ff
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f000 fb56 	bl	80025b4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d100      	bne.n	8001f14 <HAL_RCC_OscConfig+0x20>
 8001f12:	e07d      	b.n	8002010 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4bc3      	ldr	r3, [pc, #780]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	4bc1      	ldr	r3, [pc, #772]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2203      	movs	r2, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_OscConfig+0x40>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d002      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4bba      	ldr	r3, [pc, #744]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	029b      	lsls	r3, r3, #10
 8001f42:	4013      	ands	r3, r2
 8001f44:	d063      	beq.n	800200e <HAL_RCC_OscConfig+0x11a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d15f      	bne.n	800200e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f000 fb30 	bl	80025b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_OscConfig+0x7c>
 8001f60:	4bb0      	ldr	r3, [pc, #704]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4baf      	ldr	r3, [pc, #700]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0249      	lsls	r1, r1, #9
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e020      	b.n	8001fb2 <HAL_RCC_OscConfig+0xbe>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	23a0      	movs	r3, #160	; 0xa0
 8001f76:	02db      	lsls	r3, r3, #11
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10e      	bne.n	8001f9a <HAL_RCC_OscConfig+0xa6>
 8001f7c:	4ba9      	ldr	r3, [pc, #676]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4ba8      	ldr	r3, [pc, #672]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	02c9      	lsls	r1, r1, #11
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	4ba6      	ldr	r3, [pc, #664]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4ba5      	ldr	r3, [pc, #660]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0249      	lsls	r1, r1, #9
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0xbe>
 8001f9a:	4ba2      	ldr	r3, [pc, #648]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4ba1      	ldr	r3, [pc, #644]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001fa0:	49a1      	ldr	r1, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0x334>)
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	4b9f      	ldr	r3, [pc, #636]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001fac:	499f      	ldr	r1, [pc, #636]	; (800222c <HAL_RCC_OscConfig+0x338>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fed3 	bl	8000d64 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe fece 	bl	8000d64 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e2ee      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	4b93      	ldr	r3, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xd0>
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe febe 	bl	8000d64 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fee:	f7fe feb9 	bl	8000d64 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2d9      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002000:	4b88      	ldr	r3, [pc, #544]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0xfa>
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x128>
 800201a:	e099      	b.n	8002150 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201c:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2238      	movs	r2, #56	; 0x38
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2203      	movs	r2, #3
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b10      	cmp	r3, #16
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0x148>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d002      	beq.n	8002042 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d135      	bne.n	80020ae <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4013      	ands	r3, r2
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x166>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e2ac      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a74      	ldr	r2, [pc, #464]	; (8002230 <HAL_RCC_OscConfig+0x33c>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d112      	bne.n	800209c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002076:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x340>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0adb      	lsrs	r3, r3, #11
 8002090:	2207      	movs	r2, #7
 8002092:	4013      	ands	r3, r2
 8002094:	4a68      	ldr	r2, [pc, #416]	; (8002238 <HAL_RCC_OscConfig+0x344>)
 8002096:	40da      	lsrs	r2, r3
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x348>)
 800209a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x34c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7fe fe03 	bl	8000cac <HAL_InitTick>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d051      	beq.n	800214e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e282      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d030      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x340>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe44 	bl	8000d64 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fe3f 	bl	8000d64 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e25f      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_RCC_OscConfig+0x33c>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	021a      	lsls	r2, r3, #8
 8002110:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e01b      	b.n	8002150 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800211e:	4949      	ldr	r1, [pc, #292]	; (8002244 <HAL_RCC_OscConfig+0x350>)
 8002120:	400a      	ands	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fe1e 	bl	8000d64 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe fe19 	bl	8000d64 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e239      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4013      	ands	r3, r2
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x23a>
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	4013      	ands	r3, r2
 8002158:	d047      	beq.n	80021ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2238      	movs	r2, #56	; 0x38
 8002160:	4013      	ands	r3, r2
 8002162:	2b18      	cmp	r3, #24
 8002164:	d10a      	bne.n	800217c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d03c      	beq.n	80021ea <HAL_RCC_OscConfig+0x2f6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d138      	bne.n	80021ea <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e21b      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800218a:	2101      	movs	r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fde8 	bl	8000d64 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219a:	f7fe fde3 	bl	8000d64 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e203      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0f1      	beq.n	800219a <HAL_RCC_OscConfig+0x2a6>
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fdce 	bl	8000d64 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ce:	f7fe fdc9 	bl	8000d64 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1e9      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d1f1      	bne.n	80021ce <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_RCC_OscConfig+0x302>
 80021f4:	e0c6      	b.n	8002384 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2238      	movs	r2, #56	; 0x38
 8002204:	4013      	ands	r3, r2
 8002206:	2b20      	cmp	r3, #32
 8002208:	d11e      	bne.n	8002248 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x322>
 8002214:	e0b6      	b.n	8002384 <HAL_RCC_OscConfig+0x490>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d000      	beq.n	8002220 <HAL_RCC_OscConfig+0x32c>
 800221e:	e0b1      	b.n	8002384 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e1c7      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
 8002224:	40021000 	.word	0x40021000
 8002228:	fffeffff 	.word	0xfffeffff
 800222c:	fffbffff 	.word	0xfffbffff
 8002230:	ffff80ff 	.word	0xffff80ff
 8002234:	ffffc7ff 	.word	0xffffc7ff
 8002238:	00f42400 	.word	0x00f42400
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004
 8002244:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002248:	4bb8      	ldr	r3, [pc, #736]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800224a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	055b      	lsls	r3, r3, #21
 8002250:	4013      	ands	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x364>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x366>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d011      	beq.n	8002282 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4bb3      	ldr	r3, [pc, #716]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002262:	4bb2      	ldr	r3, [pc, #712]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	0549      	lsls	r1, r1, #21
 8002268:	430a      	orrs	r2, r1
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
 800226c:	4baf      	ldr	r3, [pc, #700]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800226e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	055b      	lsls	r3, r3, #21
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800227a:	231f      	movs	r3, #31
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4bab      	ldr	r3, [pc, #684]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d11a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228e:	4ba8      	ldr	r3, [pc, #672]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4ba7      	ldr	r3, [pc, #668]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0049      	lsls	r1, r1, #1
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800229c:	f7fe fd62 	bl	8000d64 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe fd5d 	bl	8000d64 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e17d      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	4b9d      	ldr	r3, [pc, #628]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x3e6>
 80022cc:	4b97      	ldr	r3, [pc, #604]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d0:	4b96      	ldr	r3, [pc, #600]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x420>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x408>
 80022e2:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e6:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022e8:	2104      	movs	r1, #4
 80022ea:	430a      	orrs	r2, r1
 80022ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ee:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f2:	4b8e      	ldr	r3, [pc, #568]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x420>
 80022fc:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80022fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002300:	4b8a      	ldr	r3, [pc, #552]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800230a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800230c:	4b87      	ldr	r3, [pc, #540]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800230e:	2104      	movs	r1, #4
 8002310:	438a      	bics	r2, r1
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d014      	beq.n	8002346 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fd22 	bl	8000d64 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002324:	e009      	b.n	800233a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fd1d 	bl	8000d64 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_RCC_OscConfig+0x640>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e13c      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x432>
 8002344:	e013      	b.n	800236e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fd0d 	bl	8000d64 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800234e:	e009      	b.n	8002364 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fd08 	bl	8000d64 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a76      	ldr	r2, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x640>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e127      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800237a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800237e:	496e      	ldr	r1, [pc, #440]	; (8002538 <HAL_RCC_OscConfig+0x644>)
 8002380:	400a      	ands	r2, r1
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2220      	movs	r2, #32
 800238a:	4013      	ands	r3, r2
 800238c:	d039      	beq.n	8002402 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01b      	beq.n	80023ce <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	03c9      	lsls	r1, r1, #15
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fcde 	bl	8000d64 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ae:	f7fe fcd9 	bl	8000d64 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0f9      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023c0:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x4ba>
 80023cc:	e019      	b.n	8002402 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b56      	ldr	r3, [pc, #344]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80023d4:	4959      	ldr	r1, [pc, #356]	; (800253c <HAL_RCC_OscConfig+0x648>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe fcc3 	bl	8000d64 <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e4:	f7fe fcbe 	bl	8000d64 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0de      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_RCC_OscConfig+0x518>
 800240a:	e0d2      	b.n	80025b2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2238      	movs	r2, #56	; 0x38
 8002412:	4013      	ands	r3, r2
 8002414:	2b10      	cmp	r3, #16
 8002416:	d100      	bne.n	800241a <HAL_RCC_OscConfig+0x526>
 8002418:	e081      	b.n	800251e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d156      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002428:	4945      	ldr	r1, [pc, #276]	; (8002540 <HAL_RCC_OscConfig+0x64c>)
 800242a:	400a      	ands	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fc99 	bl	8000d64 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fc94 	bl	8000d64 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0b4      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	4013      	ands	r3, r2
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_RCC_OscConfig+0x650>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	431a      	orrs	r2, r3
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002486:	430a      	orrs	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0449      	lsls	r1, r1, #17
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_RCC_OscConfig+0x638>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0549      	lsls	r1, r1, #21
 80024a2:	430a      	orrs	r2, r1
 80024a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fc5d 	bl	8000d64 <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fc58 	bl	8000d64 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e078      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	049b      	lsls	r3, r3, #18
 80024ca:	4013      	ands	r3, r2
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x5bc>
 80024ce:	e070      	b.n	80025b2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024d6:	491a      	ldr	r1, [pc, #104]	; (8002540 <HAL_RCC_OscConfig+0x64c>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024e2:	2103      	movs	r1, #3
 80024e4:	438a      	bics	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_RCC_OscConfig+0x638>)
 80024ee:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_OscConfig+0x654>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fc36 	bl	8000d64 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fc31 	bl	8000d64 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e051      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x638>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	049b      	lsls	r3, r3, #18
 8002518:	4013      	ands	r3, r2
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x60a>
 800251c:	e049      	b.n	80025b2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d112      	bne.n	800254c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e044      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	00001388 	.word	0x00001388
 8002538:	efffffff 	.word	0xefffffff
 800253c:	ffbfffff 	.word	0xffbfffff
 8002540:	feffffff 	.word	0xfeffffff
 8002544:	11c1808c 	.word	0x11c1808c
 8002548:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x6c8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2203      	movs	r2, #3
 8002556:	401a      	ands	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	429a      	cmp	r2, r3
 800255e:	d126      	bne.n	80025ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2270      	movs	r2, #112	; 0x70
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d11f      	bne.n	80025ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	23fe      	movs	r3, #254	; 0xfe
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d116      	bne.n	80025ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	23f8      	movs	r3, #248	; 0xf8
 8002584:	039b      	lsls	r3, r3, #14
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d10e      	bne.n	80025ae <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	23e0      	movs	r3, #224	; 0xe0
 8002594:	051b      	lsls	r3, r3, #20
 8002596:	401a      	ands	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	0f5b      	lsrs	r3, r3, #29
 80025a4:	075a      	lsls	r2, r3, #29
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b008      	add	sp, #32
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0e9      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2207      	movs	r2, #7
 80025da:	4013      	ands	r3, r2
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d91e      	bls.n	8002620 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4393      	bics	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f4:	f7fe fbb6 	bl	8000d64 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025fc:	e009      	b.n	8002612 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe fbb1 	bl	8000d64 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <HAL_RCC_ClockConfig+0x1f4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0ca      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2207      	movs	r2, #7
 8002618:	4013      	ands	r3, r2
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d015      	beq.n	8002656 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d006      	beq.n	8002642 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002634:	4b60      	ldr	r3, [pc, #384]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	21e0      	movs	r1, #224	; 0xe0
 800263c:	01c9      	lsls	r1, r1, #7
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_RCC_ClockConfig+0x1fc>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d057      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	d12b      	bne.n	80026cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e097      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d107      	bne.n	8002690 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002680:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	049b      	lsls	r3, r3, #18
 8002688:	4013      	ands	r3, r2
 800268a:	d11f      	bne.n	80026cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e08b      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002698:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4013      	ands	r3, r2
 80026a2:	d113      	bne.n	80026cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07f      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d106      	bne.n	80026be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e074      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026be:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e06d      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026cc:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2207      	movs	r2, #7
 80026d2:	4393      	bics	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe fb40 	bl	8000d64 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	e009      	b.n	80026fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ea:	f7fe fb3b 	bl	8000d64 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_RCC_ClockConfig+0x1f4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e054      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2238      	movs	r2, #56	; 0x38
 8002704:	401a      	ands	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	429a      	cmp	r2, r3
 800270e:	d1ec      	bne.n	80026ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2207      	movs	r2, #7
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d21e      	bcs.n	800275c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2207      	movs	r2, #7
 8002724:	4393      	bics	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002730:	f7fe fb18 	bl	8000d64 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002738:	e009      	b.n	800274e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273a:	f7fe fb13 	bl	8000d64 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e02c      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2207      	movs	r2, #7
 8002754:	4013      	ands	r3, r2
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2204      	movs	r2, #4
 8002762:	4013      	ands	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <HAL_RCC_ClockConfig+0x200>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800277a:	f000 f829 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800277e:	0001      	movs	r1, r0
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	220f      	movs	r2, #15
 8002788:	401a      	ands	r2, r3
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x204>)
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	58d3      	ldr	r3, [r2, r3]
 8002790:	221f      	movs	r2, #31
 8002792:	4013      	ands	r3, r2
 8002794:	000a      	movs	r2, r1
 8002796:	40da      	lsrs	r2, r3
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x208>)
 800279a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x20c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7fe fa83 	bl	8000cac <HAL_InitTick>
 80027a6:	0003      	movs	r3, r0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40022000 	.word	0x40022000
 80027b4:	00001388 	.word	0x00001388
 80027b8:	40021000 	.word	0x40021000
 80027bc:	fffff0ff 	.word	0xfffff0ff
 80027c0:	ffff8fff 	.word	0xffff8fff
 80027c4:	08002dfc 	.word	0x08002dfc
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2238      	movs	r2, #56	; 0x38
 80027dc:	4013      	ands	r3, r2
 80027de:	d10f      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0adb      	lsrs	r3, r3, #11
 80027e6:	2207      	movs	r2, #7
 80027e8:	4013      	ands	r3, r2
 80027ea:	2201      	movs	r2, #1
 80027ec:	409a      	lsls	r2, r3
 80027ee:	0013      	movs	r3, r2
 80027f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	4835      	ldr	r0, [pc, #212]	; (80028cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80027f6:	f7fd fc85 	bl	8000104 <__udivsi3>
 80027fa:	0003      	movs	r3, r0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e05d      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2238      	movs	r2, #56	; 0x38
 8002806:	4013      	ands	r3, r2
 8002808:	2b08      	cmp	r3, #8
 800280a:	d102      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280c:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e054      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2238      	movs	r2, #56	; 0x38
 8002818:	4013      	ands	r3, r2
 800281a:	2b10      	cmp	r3, #16
 800281c:	d138      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	2207      	movs	r2, #7
 8002830:	4013      	ands	r3, r2
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4824      	ldr	r0, [pc, #144]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002840:	f7fd fc60 	bl	8000104 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	0019      	movs	r1, r3
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	227f      	movs	r2, #127	; 0x7f
 8002850:	4013      	ands	r3, r2
 8002852:	434b      	muls	r3, r1
 8002854:	617b      	str	r3, [r7, #20]
        break;
 8002856:	e00d      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	481c      	ldr	r0, [pc, #112]	; (80028cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800285c:	f7fd fc52 	bl	8000104 <__udivsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	0019      	movs	r1, r3
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	227f      	movs	r2, #127	; 0x7f
 800286c:	4013      	ands	r3, r2
 800286e:	434b      	muls	r3, r1
 8002870:	617b      	str	r3, [r7, #20]
        break;
 8002872:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0f5b      	lsrs	r3, r3, #29
 800287a:	2207      	movs	r2, #7
 800287c:	4013      	ands	r3, r2
 800287e:	3301      	adds	r3, #1
 8002880:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7fd fc3d 	bl	8000104 <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e015      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2238      	movs	r2, #56	; 0x38
 8002896:	4013      	ands	r3, r2
 8002898:	2b20      	cmp	r3, #32
 800289a:	d103      	bne.n	80028a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2238      	movs	r2, #56	; 0x38
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b18      	cmp	r3, #24
 80028ae:	d103      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028b0:	23fa      	movs	r3, #250	; 0xfa
 80028b2:	01db      	lsls	r3, r3, #7
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e001      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028bc:	693b      	ldr	r3, [r7, #16]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b006      	add	sp, #24
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021000 	.word	0x40021000
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028dc:	2313      	movs	r3, #19
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e4:	2312      	movs	r3, #18
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	d100      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028f8:	e0ad      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2011      	movs	r0, #17
 80028fc:	183b      	adds	r3, r7, r0
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	055b      	lsls	r3, r3, #21
 800290a:	4013      	ands	r3, r2
 800290c:	d110      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b44      	ldr	r3, [pc, #272]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0549      	lsls	r1, r1, #21
 8002918:	430a      	orrs	r2, r1
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800291e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	055b      	lsls	r3, r3, #21
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	183b      	adds	r3, r7, r0
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002930:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	0049      	lsls	r1, r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800293e:	f7fe fa11 	bl	8000d64 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002946:	e00b      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe fa0c 	bl	8000d64 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d904      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002956:	2313      	movs	r3, #19
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2203      	movs	r2, #3
 800295c:	701a      	strb	r2, [r3, #0]
        break;
 800295e:	e005      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d0ed      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800296c:	2313      	movs	r3, #19
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d15e      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800297a:	23c0      	movs	r3, #192	; 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4013      	ands	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	429a      	cmp	r2, r3
 8002990:	d014      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002998:	4013      	ands	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800299e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0249      	lsls	r1, r1, #9
 80029a6:	430a      	orrs	r2, r1
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029b0:	491e      	ldr	r1, [pc, #120]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80029b2:	400a      	ands	r2, r1
 80029b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d016      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe f9ce 	bl	8000d64 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029cc:	e00c      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe f9c9 	bl	8000d64 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d904      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029de:	2313      	movs	r3, #19
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2203      	movs	r2, #3
 80029e4:	701a      	strb	r2, [r3, #0]
            break;
 80029e6:	e004      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d0ed      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80029f2:	2313      	movs	r3, #19
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a10:	e016      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a12:	2312      	movs	r3, #18
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2213      	movs	r2, #19
 8002a18:	18ba      	adds	r2, r7, r2
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e00f      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	fffffcff 	.word	0xfffffcff
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	2312      	movs	r3, #18
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2213      	movs	r2, #19
 8002a3a:	18ba      	adds	r2, r7, r2
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a40:	2311      	movs	r3, #17
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4bb6      	ldr	r3, [pc, #728]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a4e:	4bb5      	ldr	r3, [pc, #724]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a50:	49b5      	ldr	r1, [pc, #724]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a60:	4bb0      	ldr	r3, [pc, #704]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2203      	movs	r2, #3
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4bad      	ldr	r3, [pc, #692]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7e:	4ba9      	ldr	r3, [pc, #676]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	220c      	movs	r2, #12
 8002a84:	4393      	bics	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4ba5      	ldr	r3, [pc, #660]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2204      	movs	r2, #4
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9c:	4ba1      	ldr	r3, [pc, #644]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	2230      	movs	r2, #48	; 0x30
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aba:	4b9a      	ldr	r3, [pc, #616]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	4a9b      	ldr	r2, [pc, #620]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	4b96      	ldr	r3, [pc, #600]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002ada:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	4a94      	ldr	r2, [pc, #592]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002afa:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	4a8d      	ldr	r2, [pc, #564]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	4a86      	ldr	r2, [pc, #536]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2220      	movs	r2, #32
 8002b34:	4013      	ands	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b38:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	4a7f      	ldr	r2, [pc, #508]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2240      	movs	r2, #64	; 0x40
 8002b52:	4013      	ands	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	4a79      	ldr	r2, [pc, #484]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4013      	ands	r3, r2
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b76:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	0899      	lsrs	r1, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	05db      	lsls	r3, r3, #23
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	0249      	lsls	r1, r1, #9
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	031b      	lsls	r3, r3, #12
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	039b      	lsls	r3, r3, #14
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d016      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bce:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	03db      	lsls	r3, r3, #15
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0449      	lsls	r1, r1, #17
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	03db      	lsls	r3, r3, #15
 8002c04:	4013      	ands	r3, r2
 8002c06:	d016      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	045b      	lsls	r3, r3, #17
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0449      	lsls	r1, r1, #17
 8002c32:	430a      	orrs	r2, r1
 8002c34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d014      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	2203      	movs	r2, #3
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0249      	lsls	r1, r1, #9
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	4013      	ands	r3, r2
 8002c76:	d014      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4393      	bics	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c86:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0249      	lsls	r1, r1, #9
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	045b      	lsls	r3, r3, #17
 8002caa:	4013      	ands	r3, r2
 8002cac:	d016      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	0449      	lsls	r1, r1, #17
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	049b      	lsls	r3, r3, #18
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d016      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0449      	lsls	r1, r1, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d16:	2312      	movs	r3, #18
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	efffffff 	.word	0xefffffff
 8002d2c:	fffff3ff 	.word	0xfffff3ff
 8002d30:	fffffcff 	.word	0xfffffcff
 8002d34:	fff3ffff 	.word	0xfff3ffff
 8002d38:	ffcfffff 	.word	0xffcfffff
 8002d3c:	ffffcfff 	.word	0xffffcfff
 8002d40:	ffff3fff 	.word	0xffff3fff
 8002d44:	ffbfffff 	.word	0xffbfffff
 8002d48:	feffffff 	.word	0xfeffffff

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	2600      	movs	r6, #0
 8002d50:	4d0c      	ldr	r5, [pc, #48]	; (8002d84 <__libc_init_array+0x38>)
 8002d52:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	f000 f821 	bl	8002da4 <_init>
 8002d62:	4d0a      	ldr	r5, [pc, #40]	; (8002d8c <__libc_init_array+0x40>)
 8002d64:	4c0a      	ldr	r4, [pc, #40]	; (8002d90 <__libc_init_array+0x44>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	00b3      	lsls	r3, r6, #2
 8002d72:	58eb      	ldr	r3, [r5, r3]
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	00b3      	lsls	r3, r6, #2
 8002d7c:	58eb      	ldr	r3, [r5, r3]
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002e3c 	.word	0x08002e3c
 8002d88:	08002e3c 	.word	0x08002e3c
 8002d8c:	08002e3c 	.word	0x08002e3c
 8002d90:	08002e40 	.word	0x08002e40

08002d94 <memset>:
 8002d94:	0003      	movs	r3, r0
 8002d96:	1882      	adds	r2, r0, r2
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	7019      	strb	r1, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
