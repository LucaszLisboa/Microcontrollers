
List5-ex02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004804  08004804  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800480c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08004818  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08004818  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d228  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c25  00000000  00000000  0002d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fe  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba33  00000000  00000000  0004a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abc99  00000000  00000000  00056091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  00101d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800475c 	.word	0x0800475c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800475c 	.word	0x0800475c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	flagRx = 1;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_UART_RxCpltCallback+0x38>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t));
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <HAL_UART_RxCpltCallback+0x3c>)
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_UART_RxCpltCallback+0x40>)
 800062e:	2201      	movs	r2, #1
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fe9b 	bl	800236c <HAL_UART_Receive_IT>
	data = temp;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_UART_RxCpltCallback+0x3c>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_UART_RxCpltCallback+0x44>)
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, &data, 1); //sizeof(uint8_t) = 1
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <HAL_UART_RxCpltCallback+0x44>)
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_UART_RxCpltCallback+0x40>)
 8000642:	2201      	movs	r2, #1
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fdd5 	bl	80021f4 <HAL_UART_Transmit_IT>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	20000029 	.word	0x20000029
 8000658:	20000028 	.word	0x20000028
 800065c:	2000002c 	.word	0x2000002c
 8000660:	2000002a 	.word	0x2000002a

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 f9f0 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f822 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8cc 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f87c 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  flagRx = 0;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <main+0x44>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t));
 800067e:	490b      	ldr	r1, [pc, #44]	; (80006ac <main+0x48>)
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <main+0x4c>)
 8000682:	2201      	movs	r2, #1
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fe71 	bl	800236c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flagRx){
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <main+0x44>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0fb      	beq.n	800068a <main+0x26>
		  flagRx = 0;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <main+0x44>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2120      	movs	r1, #32
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fd9f 	bl	80011e2 <HAL_GPIO_TogglePin>
	  if (flagRx){
 80006a4:	e7f1      	b.n	800068a <main+0x26>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000029 	.word	0x20000029
 80006ac:	20000028 	.word	0x20000028
 80006b0:	2000002c 	.word	0x2000002c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b095      	sub	sp, #84	; 0x54
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	2414      	movs	r4, #20
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	233c      	movs	r3, #60	; 0x3c
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f004 f841 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2310      	movs	r3, #16
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f004 f83a 	bl	800474c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fd9b 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2202      	movs	r2, #2
 80006e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	0052      	lsls	r2, r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f0:	0021      	movs	r1, r4
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2240      	movs	r2, #64	; 0x40
 80006fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2202      	movs	r2, #2
 8000702:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2202      	movs	r2, #2
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2208      	movs	r2, #8
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0292      	lsls	r2, r2, #10
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	0492      	lsls	r2, r2, #18
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0592      	lsls	r2, r2, #22
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	187b      	adds	r3, r7, r1
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fdbd 	bl	80012b0 <HAL_RCC_OscConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800073a:	f000 f89d 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2202      	movs	r2, #2
 8000748:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2102      	movs	r1, #2
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f90e 	bl	800197c <HAL_RCC_ClockConfig>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000764:	f000 f888 	bl	8000878 <Error_Handler>
  }
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b015      	add	sp, #84	; 0x54
 800076e:	bd90      	pop	{r4, r7, pc}

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000776:	4a24      	ldr	r2, [pc, #144]	; (8000808 <MX_USART2_UART_Init+0x98>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_USART2_UART_Init+0x94>)
 800077c:	22e1      	movs	r2, #225	; 0xe1
 800077e:	0252      	lsls	r2, r2, #9
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_USART2_UART_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fcc4 	bl	8002148 <HAL_UART_Init>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f858 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 feb9 	bl	8004544 <HAL_UARTEx_SetTxFifoThreshold>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f84f 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007dc:	2100      	movs	r1, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f003 fef0 	bl	80045c4 <HAL_UARTEx_SetRxFifoThreshold>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f846 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x94>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 fe6e 	bl	80044d0 <HAL_UARTEx_DisableFifoMode>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f83e 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 ff96 	bl	800474c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_GPIO_Init+0x68>)
 8000822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_GPIO_Init+0x68>)
 8000826:	2101      	movs	r1, #1
 8000828:	430a      	orrs	r2, r1
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_GPIO_Init+0x68>)
 800082e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000830:	2201      	movs	r2, #1
 8000832:	4013      	ands	r3, r2
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fcb1 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2220      	movs	r2, #32
 800084a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fb32 	bl	8000ed0 <HAL_GPIO_Init>

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b006      	add	sp, #24
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_MspInit+0x4c>)
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	430a      	orrs	r2, r1
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f948 	bl	8000b58 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b09d      	sub	sp, #116	; 0x74
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	235c      	movs	r3, #92	; 0x5c
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f003 ff30 	bl	800474c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	2410      	movs	r4, #16
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	234c      	movs	r3, #76	; 0x4c
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f003 ff28 	bl	800474c <memset>
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <HAL_UART_MspInit+0xc8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d146      	bne.n	8000994 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2202      	movs	r2, #2
 800090a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f9db 	bl	8001cd0 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800091e:	f7ff ffab 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 8000924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0289      	lsls	r1, r1, #10
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 8000932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	029b      	lsls	r3, r3, #10
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0xcc>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	215c      	movs	r1, #92	; 0x5c
 8000958:	187b      	adds	r3, r7, r1
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2202      	movs	r2, #2
 8000962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2201      	movs	r2, #1
 8000974:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	187a      	adds	r2, r7, r1
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f000 faa6 	bl	8000ed0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	201c      	movs	r0, #28
 800098a:	f000 f9a7 	bl	8000cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800098e:	201c      	movs	r0, #28
 8000990:	f000 f9b9 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b01d      	add	sp, #116	; 0x74
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8aa 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <USART2_LPUART2_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fd36 	bl	800244c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000002c 	.word	0x2000002c

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f7ff fff6 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a26:	f003 fe6d 	bl	8004704 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a2a:	f7ff fe1b 	bl	8000664 <main>

08000a2e <LoopForever>:

LoopForever:
  b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a3c:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 8000a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a44:	200000c0 	.word	0x200000c0

08000a48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_COMP_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_Init+0x3c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Init+0x3c>)
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0049      	lsls	r1, r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	2003      	movs	r0, #3
 8000a68:	f000 f810 	bl	8000a8c <HAL_InitTick>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff ff04 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_InitTick+0x88>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02b      	beq.n	8000afc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_InitTick+0x8c>)
 8000aa6:	681c      	ldr	r4, [r3, #0]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_InitTick+0x88>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	0019      	movs	r1, r3
 8000aae:	23fa      	movs	r3, #250	; 0xfa
 8000ab0:	0098      	lsls	r0, r3, #2
 8000ab2:	f7ff fb27 	bl	8000104 <__udivsi3>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0020      	movs	r0, r4
 8000abc:	f7ff fb22 	bl	8000104 <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f92f 	bl	8000d26 <HAL_SYSTICK_Config>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d112      	bne.n	8000af2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80a      	bhi.n	8000ae8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f8fe 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_InitTick+0x90>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e00d      	b.n	8000b04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e008      	b.n	8000b04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e003      	b.n	8000b04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b005      	add	sp, #20
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	18d2      	adds	r2, r2, r3
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_IncTick+0x20>)
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200000bc 	.word	0x200000bc

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200000bc 	.word	0x200000bc

08000b58 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	0019      	movs	r1, r3
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	fffff9ff 	.word	0xfffff9ff

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b7f      	cmp	r3, #127	; 0x7f
 8000b96:	d809      	bhi.n	8000bac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	231f      	movs	r3, #31
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_EnableIRQ+0x30>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	000a      	movs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b7f      	cmp	r3, #127	; 0x7f
 8000bcc:	d828      	bhi.n	8000c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <__NVIC_SetPriority+0xd4>)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	33c0      	adds	r3, #192	; 0xc0
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	589b      	ldr	r3, [r3, r2]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <__NVIC_SetPriority+0xd4>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	33c0      	adds	r3, #192	; 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1e:	e031      	b.n	8000c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3306      	adds	r3, #6
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	; 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001c      	movs	r4, r3
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	3b08      	subs	r3, #8
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	3306      	adds	r3, #6
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	18c3      	adds	r3, r0, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	045b      	lsls	r3, r3, #17
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d301      	bcc.n	8000cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e010      	b.n	8000cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SysTick_Config+0x44>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff7c 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x44>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff33 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ffaf 	bl	8000c94 <SysTick_Config>
 8000d36:	0003      	movs	r3, r0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e04f      	b.n	8000df2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2225      	movs	r2, #37	; 0x25
 8000d56:	5c9b      	ldrb	r3, [r3, r2]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d008      	beq.n	8000d70 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2204      	movs	r2, #4
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2224      	movs	r2, #36	; 0x24
 8000d68:	2100      	movs	r1, #0
 8000d6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e040      	b.n	8000df2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	210e      	movs	r1, #14
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	491c      	ldr	r1, [pc, #112]	; (8000dfc <HAL_DMA_Abort+0xbc>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	221c      	movs	r2, #28
 8000da6:	401a      	ands	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	2101      	movs	r1, #1
 8000dae:	4091      	lsls	r1, r2
 8000db0:	000a      	movs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dbc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd0:	490a      	ldr	r1, [pc, #40]	; (8000dfc <HAL_DMA_Abort+0xbc>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dde:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2225      	movs	r2, #37	; 0x25
 8000de4:	2101      	movs	r1, #1
 8000de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	fffffeff 	.word	0xfffffeff

08000e00 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e08:	210f      	movs	r1, #15
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2225      	movs	r2, #37	; 0x25
 8000e14:	5c9b      	ldrb	r3, [r3, r2]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d006      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e048      	b.n	8000ebc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	210e      	movs	r1, #14
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	438a      	bics	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e54:	491d      	ldr	r1, [pc, #116]	; (8000ecc <HAL_DMA_Abort_IT+0xcc>)
 8000e56:	400a      	ands	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	221c      	movs	r2, #28
 8000e60:	401a      	ands	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2101      	movs	r1, #1
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8a:	4910      	ldr	r1, [pc, #64]	; (8000ecc <HAL_DMA_Abort_IT+0xcc>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2225      	movs	r2, #37	; 0x25
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2224      	movs	r2, #36	; 0x24
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	0010      	movs	r0, r2
 8000eba:	4798      	blx	r3
    }
  }
  return status;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	fffffeff 	.word	0xfffffeff

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e14d      	b.n	800117c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x28>
 8000ef6:	e13e      	b.n	8001176 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	58d3      	ldr	r3, [r2, r3]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4013      	ands	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	6939      	ldr	r1, [r7, #16]
 8001000:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	23c0      	movs	r3, #192	; 0xc0
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d100      	bne.n	8001044 <HAL_GPIO_Init+0x174>
 8001042:	e098      	b.n	8001176 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001044:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3318      	adds	r3, #24
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	589b      	ldr	r3, [r3, r2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2203      	movs	r2, #3
 8001056:	4013      	ands	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	220f      	movs	r2, #15
 800105c:	409a      	lsls	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	23a0      	movs	r3, #160	; 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	429a      	cmp	r2, r3
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x1d6>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2c8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x1d2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x2cc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x1ce>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x1ca>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_GPIO_Init+0x2d4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x1c6>
 8001092:	2304      	movs	r3, #4
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 8001096:	2305      	movs	r3, #5
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a6:	2300      	movs	r3, #0
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	2103      	movs	r1, #3
 80010ac:	400a      	ands	r2, r1
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	4093      	lsls	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010b8:	4936      	ldr	r1, [pc, #216]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3318      	adds	r3, #24
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c6:	4a33      	ldr	r2, [pc, #204]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	58d3      	ldr	r3, [r2, r3]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ec:	4929      	ldr	r1, [pc, #164]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 80010f6:	2384      	movs	r3, #132	; 0x84
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111a:	491e      	ldr	r1, [pc, #120]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	40da      	lsrs	r2, r3
 8001184:	1e13      	subs	r3, r2, #0
 8001186:	d000      	beq.n	800118a <HAL_GPIO_Init+0x2ba>
 8001188:	e6aa      	b.n	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b006      	add	sp, #24
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021800 	.word	0x40021800
 8001198:	50000400 	.word	0x50000400
 800119c:	50000800 	.word	0x50000800
 80011a0:	50000c00 	.word	0x50000c00
 80011a4:	50001000 	.word	0x50001000

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	0008      	movs	r0, r1
 80011b2:	0011      	movs	r1, r2
 80011b4:	1cbb      	adds	r3, r7, #2
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	1c7b      	adds	r3, r7, #1
 80011bc:	1c0a      	adds	r2, r1, #0
 80011be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c0:	1c7b      	adds	r3, r7, #1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	881a      	ldrh	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	000a      	movs	r2, r1
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f6:	1cbb      	adds	r3, r7, #2
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	041a      	lsls	r2, r3, #16
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	1cb9      	adds	r1, r7, #2
 8001206:	8809      	ldrh	r1, [r1, #0]
 8001208:	400b      	ands	r3, r1
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	429a      	cmp	r2, r3
 800123a:	d11f      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	0013      	movs	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	189b      	adds	r3, r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4912      	ldr	r1, [pc, #72]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800124a:	0018      	movs	r0, r3
 800124c:	f7fe ff5a 	bl	8000104 <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001256:	e008      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e001      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e009      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	401a      	ands	r2, r3
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	429a      	cmp	r2, r3
 800127a:	d0ed      	beq.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40007000 	.word	0x40007000
 800128c:	fffff9ff 	.word	0xfffff9ff
 8001290:	20000000 	.word	0x20000000
 8001294:	000f4240 	.word	0x000f4240

08001298 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	23e0      	movs	r3, #224	; 0xe0
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	4013      	ands	r3, r2
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 fb56 	bl	8001970 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	d100      	bne.n	80012d0 <HAL_RCC_OscConfig+0x20>
 80012ce:	e07d      	b.n	80013cc <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d0:	4bc3      	ldr	r3, [pc, #780]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2238      	movs	r2, #56	; 0x38
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012da:	4bc1      	ldr	r3, [pc, #772]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2203      	movs	r2, #3
 80012e0:	4013      	ands	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d102      	bne.n	80012f0 <HAL_RCC_OscConfig+0x40>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d002      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4bba      	ldr	r3, [pc, #744]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	4013      	ands	r3, r2
 8001300:	d063      	beq.n	80013ca <HAL_RCC_OscConfig+0x11a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d15f      	bne.n	80013ca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f000 fb30 	bl	8001970 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	429a      	cmp	r2, r3
 800131a:	d107      	bne.n	800132c <HAL_RCC_OscConfig+0x7c>
 800131c:	4bb0      	ldr	r3, [pc, #704]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4baf      	ldr	r3, [pc, #700]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	0249      	lsls	r1, r1, #9
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e020      	b.n	800136e <HAL_RCC_OscConfig+0xbe>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	23a0      	movs	r3, #160	; 0xa0
 8001332:	02db      	lsls	r3, r3, #11
 8001334:	429a      	cmp	r2, r3
 8001336:	d10e      	bne.n	8001356 <HAL_RCC_OscConfig+0xa6>
 8001338:	4ba9      	ldr	r3, [pc, #676]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4ba8      	ldr	r3, [pc, #672]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	02c9      	lsls	r1, r1, #11
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	4ba6      	ldr	r3, [pc, #664]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4ba5      	ldr	r3, [pc, #660]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0249      	lsls	r1, r1, #9
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e00b      	b.n	800136e <HAL_RCC_OscConfig+0xbe>
 8001356:	4ba2      	ldr	r3, [pc, #648]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4ba1      	ldr	r3, [pc, #644]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800135c:	49a1      	ldr	r1, [pc, #644]	; (80015e4 <HAL_RCC_OscConfig+0x334>)
 800135e:	400a      	ands	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	4b9f      	ldr	r3, [pc, #636]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b9e      	ldr	r3, [pc, #632]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001368:	499f      	ldr	r1, [pc, #636]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d014      	beq.n	80013a0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fbe5 	bl	8000b44 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fbe0 	bl	8000b44 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e2ee      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	4b93      	ldr	r3, [pc, #588]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	029b      	lsls	r3, r3, #10
 800139a:	4013      	ands	r3, r2
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xd0>
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fbd0 	bl	8000b44 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013aa:	f7ff fbcb 	bl	8000b44 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e2d9      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0xfa>
 80013c8:	e000      	b.n	80013cc <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d100      	bne.n	80013d8 <HAL_RCC_OscConfig+0x128>
 80013d6:	e099      	b.n	800150c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d8:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2238      	movs	r2, #56	; 0x38
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e2:	4b7f      	ldr	r3, [pc, #508]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0x148>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d002      	beq.n	80013fe <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d135      	bne.n	800146a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fe:	4b78      	ldr	r3, [pc, #480]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4013      	ands	r3, r2
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x166>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e2ac      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b72      	ldr	r3, [pc, #456]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a74      	ldr	r2, [pc, #464]	; (80015ec <HAL_RCC_OscConfig+0x33c>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d112      	bne.n	8001458 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001432:	4b6b      	ldr	r3, [pc, #428]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x340>)
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	4b67      	ldr	r3, [pc, #412]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001446:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0adb      	lsrs	r3, r3, #11
 800144c:	2207      	movs	r2, #7
 800144e:	4013      	ands	r3, r2
 8001450:	4a68      	ldr	r2, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x344>)
 8001452:	40da      	lsrs	r2, r3
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x348>)
 8001456:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x34c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fb15 	bl	8000a8c <HAL_InitTick>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d051      	beq.n	800150a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e282      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001472:	4b5b      	ldr	r3, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x340>)
 8001478:	4013      	ands	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	0049      	lsls	r1, r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fb56 	bl	8000b44 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fb51 	bl	8000b44 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e25f      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4013      	ands	r3, r2
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_RCC_OscConfig+0x33c>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	021a      	lsls	r2, r3, #8
 80014cc:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014da:	4949      	ldr	r1, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x350>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb30 	bl	8000b44 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb2b 	bl	8000b44 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e239      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4013      	ands	r3, r2
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x23a>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	4013      	ands	r3, r2
 8001514:	d047      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	; 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	2b18      	cmp	r3, #24
 8001520:	d10a      	bne.n	8001538 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001522:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d03c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f6>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d138      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e21b      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d019      	beq.n	8001574 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fafa 	bl	8000b44 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff faf5 	bl	8000b44 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e203      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d0f1      	beq.n	8001556 <HAL_RCC_OscConfig+0x2a6>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fae0 	bl	8000b44 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fadb 	bl	8000b44 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1e9      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d1f1      	bne.n	800158a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2204      	movs	r2, #4
 80015ac:	4013      	ands	r3, r2
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x302>
 80015b0:	e0c6      	b.n	8001740 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	231f      	movs	r3, #31
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d11e      	bne.n	8001604 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	2202      	movs	r2, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x322>
 80015d0:	e0b6      	b.n	8001740 <HAL_RCC_OscConfig+0x490>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <HAL_RCC_OscConfig+0x32c>
 80015da:	e0b1      	b.n	8001740 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e1c7      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
 80015e0:	40021000 	.word	0x40021000
 80015e4:	fffeffff 	.word	0xfffeffff
 80015e8:	fffbffff 	.word	0xfffbffff
 80015ec:	ffff80ff 	.word	0xffff80ff
 80015f0:	ffffc7ff 	.word	0xffffc7ff
 80015f4:	00f42400 	.word	0x00f42400
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004
 8001600:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001604:	4bb8      	ldr	r3, [pc, #736]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	055b      	lsls	r3, r3, #21
 800160c:	4013      	ands	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x364>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x366>
 8001614:	2300      	movs	r3, #0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d011      	beq.n	800163e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4bb3      	ldr	r3, [pc, #716]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800161c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161e:	4bb2      	ldr	r3, [pc, #712]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0549      	lsls	r1, r1, #21
 8001624:	430a      	orrs	r2, r1
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	4baf      	ldr	r3, [pc, #700]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800162a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001636:	231f      	movs	r3, #31
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4bab      	ldr	r3, [pc, #684]	; (80018ec <HAL_RCC_OscConfig+0x63c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4013      	ands	r3, r2
 8001648:	d11a      	bne.n	8001680 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164a:	4ba8      	ldr	r3, [pc, #672]	; (80018ec <HAL_RCC_OscConfig+0x63c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4ba7      	ldr	r3, [pc, #668]	; (80018ec <HAL_RCC_OscConfig+0x63c>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0049      	lsls	r1, r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa74 	bl	8000b44 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fa6f 	bl	8000b44 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e17d      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4b9d      	ldr	r3, [pc, #628]	; (80018ec <HAL_RCC_OscConfig+0x63c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4013      	ands	r3, r2
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x3e6>
 8001688:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800168a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168c:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	65da      	str	r2, [r3, #92]	; 0x5c
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x420>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x408>
 800169e:	4b92      	ldr	r3, [pc, #584]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a2:	4b91      	ldr	r3, [pc, #580]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016a4:	2104      	movs	r1, #4
 80016a6:	430a      	orrs	r2, r1
 80016a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016aa:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x420>
 80016b8:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016bc:	4b8a      	ldr	r3, [pc, #552]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c4:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c8:	4b87      	ldr	r3, [pc, #540]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	438a      	bics	r2, r1
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa34 	bl	8000b44 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e0:	e009      	b.n	80016f6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fa2f 	bl	8000b44 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x640>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e13c      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	4b7c      	ldr	r3, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2202      	movs	r2, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x432>
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fa1f 	bl	8000b44 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170a:	e009      	b.n	8001720 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fa1a 	bl	8000b44 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x640>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e127      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	4b71      	ldr	r3, [pc, #452]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800172a:	231f      	movs	r3, #31
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001738:	4b6b      	ldr	r3, [pc, #428]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800173a:	496e      	ldr	r1, [pc, #440]	; (80018f4 <HAL_RCC_OscConfig+0x644>)
 800173c:	400a      	ands	r2, r1
 800173e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2220      	movs	r2, #32
 8001746:	4013      	ands	r3, r2
 8001748:	d039      	beq.n	80017be <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01b      	beq.n	800178a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	03c9      	lsls	r1, r1, #15
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff f9f0 	bl	8000b44 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800176a:	f7ff f9eb 	bl	8000b44 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0f9      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	4013      	ands	r3, r2
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x4ba>
 8001788:	e019      	b.n	80017be <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800178a:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001790:	4959      	ldr	r1, [pc, #356]	; (80018f8 <HAL_RCC_OscConfig+0x648>)
 8001792:	400a      	ands	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f9d5 	bl	8000b44 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a0:	f7ff f9d0 	bl	8000b44 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0de      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017b2:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d100      	bne.n	80017c8 <HAL_RCC_OscConfig+0x518>
 80017c6:	e0d2      	b.n	800196e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2238      	movs	r2, #56	; 0x38
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x526>
 80017d4:	e081      	b.n	80018da <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d156      	bne.n	800188c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80017e4:	4945      	ldr	r1, [pc, #276]	; (80018fc <HAL_RCC_OscConfig+0x64c>)
 80017e6:	400a      	ands	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff f9ab 	bl	8000b44 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f9a6 	bl	8000b44 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0b4      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	049b      	lsls	r3, r3, #18
 800180e:	4013      	ands	r3, r2
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4a3a      	ldr	r2, [pc, #232]	; (8001900 <HAL_RCC_OscConfig+0x650>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	431a      	orrs	r2, r3
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001842:	430a      	orrs	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0449      	lsls	r1, r1, #17
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0549      	lsls	r1, r1, #21
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f96f 	bl	8000b44 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f96a 	bl	8000b44 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e078      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x5bc>
 800188a:	e070      	b.n	800196e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 8001892:	491a      	ldr	r1, [pc, #104]	; (80018fc <HAL_RCC_OscConfig+0x64c>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 800189e:	2103      	movs	r1, #3
 80018a0:	438a      	bics	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80018aa:	4916      	ldr	r1, [pc, #88]	; (8001904 <HAL_RCC_OscConfig+0x654>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f948 	bl	8000b44 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f943 	bl	8000b44 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e051      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_OscConfig+0x638>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	049b      	lsls	r3, r3, #18
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x60a>
 80018d8:	e049      	b.n	800196e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e044      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40007000 	.word	0x40007000
 80018f0:	00001388 	.word	0x00001388
 80018f4:	efffffff 	.word	0xefffffff
 80018f8:	ffbfffff 	.word	0xffbfffff
 80018fc:	feffffff 	.word	0xfeffffff
 8001900:	11c1808c 	.word	0x11c1808c
 8001904:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x6c8>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2203      	movs	r2, #3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	429a      	cmp	r2, r3
 800191a:	d126      	bne.n	800196a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2270      	movs	r2, #112	; 0x70
 8001920:	401a      	ands	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d11f      	bne.n	800196a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	23fe      	movs	r3, #254	; 0xfe
 800192e:	01db      	lsls	r3, r3, #7
 8001930:	401a      	ands	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d116      	bne.n	800196a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	23f8      	movs	r3, #248	; 0xf8
 8001940:	039b      	lsls	r3, r3, #14
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	23e0      	movs	r3, #224	; 0xe0
 8001950:	051b      	lsls	r3, r3, #20
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	0f5b      	lsrs	r3, r3, #29
 8001960:	075a      	lsls	r2, r3, #29
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b008      	add	sp, #32
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0e9      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2207      	movs	r2, #7
 8001996:	4013      	ands	r3, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d91e      	bls.n	80019dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2207      	movs	r2, #7
 80019a4:	4393      	bics	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f8c8 	bl	8000b44 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019b8:	e009      	b.n	80019ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ba:	f7ff f8c3 	bl	8000b44 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x1f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0ca      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d015      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2204      	movs	r2, #4
 80019ec:	4013      	ands	r3, r2
 80019ee:	d006      	beq.n	80019fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019f0:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 80019f6:	21e0      	movs	r1, #224	; 0xe0
 80019f8:	01c9      	lsls	r1, r1, #7
 80019fa:	430a      	orrs	r2, r1
 80019fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <HAL_RCC_ClockConfig+0x1fc>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d057      	beq.n	8001acc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d12b      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e097      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	049b      	lsls	r3, r3, #18
 8001a44:	4013      	ands	r3, r2
 8001a46:	d11f      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e08b      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d113      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e07f      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e074      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e06d      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f852 	bl	8000b44 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f84d 	bl	8000b44 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e054      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ec      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d21e      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aec:	f7ff f82a 	bl	8000b44 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7ff f825 	bl	8000b44 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_RCC_ClockConfig+0x1f4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e02c      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <HAL_RCC_ClockConfig+0x200>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b36:	f000 f829 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	220f      	movs	r2, #15
 8001b44:	401a      	ands	r2, r3
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_RCC_ClockConfig+0x204>)
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	58d3      	ldr	r3, [r2, r3]
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	4013      	ands	r3, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x208>)
 8001b56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x20c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe ff95 	bl	8000a8c <HAL_InitTick>
 8001b62:	0003      	movs	r3, r0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	00001388 	.word	0x00001388
 8001b74:	40021000 	.word	0x40021000
 8001b78:	fffff0ff 	.word	0xfffff0ff
 8001b7c:	ffff8fff 	.word	0xffff8fff
 8001b80:	08004774 	.word	0x08004774
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2238      	movs	r2, #56	; 0x38
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d10f      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0adb      	lsrs	r3, r3, #11
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	4835      	ldr	r0, [pc, #212]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bb2:	f7fe faa7 	bl	8000104 <__udivsi3>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e05d      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2238      	movs	r2, #56	; 0x38
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x100>)
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	e054      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d138      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2203      	movs	r2, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	2207      	movs	r2, #7
 8001bec:	4013      	ands	r3, r2
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	4824      	ldr	r0, [pc, #144]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x100>)
 8001bfc:	f7fe fa82 	bl	8000104 <__udivsi3>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0019      	movs	r1, r3
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	227f      	movs	r2, #127	; 0x7f
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	434b      	muls	r3, r1
 8001c10:	617b      	str	r3, [r7, #20]
        break;
 8001c12:	e00d      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	481c      	ldr	r0, [pc, #112]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c18:	f7fe fa74 	bl	8000104 <__udivsi3>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	227f      	movs	r2, #127	; 0x7f
 8001c28:	4013      	ands	r3, r2
 8001c2a:	434b      	muls	r3, r1
 8001c2c:	617b      	str	r3, [r7, #20]
        break;
 8001c2e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0f5b      	lsrs	r3, r3, #29
 8001c36:	2207      	movs	r2, #7
 8001c38:	4013      	ands	r3, r2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7fe fa5f 	bl	8000104 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e015      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	; 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d103      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2238      	movs	r2, #56	; 0x38
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b18      	cmp	r3, #24
 8001c6a:	d103      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c6c:	23fa      	movs	r3, #250	; 0xfa
 8001c6e:	01db      	lsls	r3, r3, #7
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e001      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c78:	693b      	ldr	r3, [r7, #16]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200

08001c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ca8:	f7ff fff2 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cac:	0004      	movs	r4, r0
 8001cae:	f7ff faf3 	bl	8001298 <LL_RCC_GetAPB1Prescaler>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	0b1a      	lsrs	r2, r3, #12
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	58d3      	ldr	r3, [r2, r3]
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	40dc      	lsrs	r4, r3
 8001cc2:	0023      	movs	r3, r4
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	080047b4 	.word	0x080047b4

08001cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cd8:	2313      	movs	r3, #19
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cf4:	e0ad      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2011      	movs	r0, #17
 8001cf8:	183b      	adds	r3, r7, r0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	055b      	lsls	r3, r3, #21
 8001d06:	4013      	ands	r3, r2
 8001d08:	d110      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0549      	lsls	r1, r1, #21
 8001d14:	430a      	orrs	r2, r1
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0049      	lsls	r1, r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d3a:	f7fe ff03 	bl	8000b44 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d42:	e00b      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d44:	f7fe fefe 	bl	8000b44 <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d904      	bls.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d52:	2313      	movs	r3, #19
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2203      	movs	r2, #3
 8001d58:	701a      	strb	r2, [r3, #0]
        break;
 8001d5a:	e005      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0ed      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d68:	2313      	movs	r3, #19
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d15e      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	0249      	lsls	r1, r1, #9
 8001da2:	430a      	orrs	r2, r1
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dac:	491e      	ldr	r1, [pc, #120]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d016      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fec0 	bl	8000b44 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	e00c      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe febb 	bl	8000b44 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d904      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001dda:	2313      	movs	r3, #19
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2203      	movs	r2, #3
 8001de0:	701a      	strb	r2, [r3, #0]
            break;
 8001de2:	e004      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0ed      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dee:	2313      	movs	r3, #19
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e0c:	e016      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e0e:	2312      	movs	r3, #18
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2213      	movs	r2, #19
 8001e14:	18ba      	adds	r2, r7, r2
 8001e16:	7812      	ldrb	r2, [r2, #0]
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e00f      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	fffffcff 	.word	0xfffffcff
 8001e28:	fffeffff 	.word	0xfffeffff
 8001e2c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e30:	2312      	movs	r3, #18
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2213      	movs	r2, #19
 8001e36:	18ba      	adds	r2, r7, r2
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e3c:	2311      	movs	r3, #17
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4bb6      	ldr	r3, [pc, #728]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4a:	4bb5      	ldr	r3, [pc, #724]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4c:	49b5      	ldr	r1, [pc, #724]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e5c:	4bb0      	ldr	r3, [pc, #704]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	2203      	movs	r2, #3
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4bad      	ldr	r3, [pc, #692]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e7a:	4ba9      	ldr	r3, [pc, #676]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	220c      	movs	r2, #12
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4ba5      	ldr	r3, [pc, #660]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	2230      	movs	r2, #48	; 0x30
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eb6:	4b9a      	ldr	r3, [pc, #616]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	4a9b      	ldr	r2, [pc, #620]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b96      	ldr	r3, [pc, #600]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	4a8d      	ldr	r2, [pc, #564]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f04:	4b86      	ldr	r3, [pc, #536]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f16:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	4a86      	ldr	r2, [pc, #536]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f24:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f34:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	4a7f      	ldr	r2, [pc, #508]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	01db      	lsls	r3, r3, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d015      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	0899      	lsrs	r1, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7e:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	05db      	lsls	r3, r3, #23
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f90:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0249      	lsls	r1, r1, #9
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	031b      	lsls	r3, r3, #12
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	039b      	lsls	r3, r3, #14
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fca:	4b55      	ldr	r3, [pc, #340]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	4a5c      	ldr	r2, [pc, #368]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd8:	4b51      	ldr	r3, [pc, #324]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	03db      	lsls	r3, r3, #15
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fea:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0449      	lsls	r1, r1, #17
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	03db      	lsls	r3, r3, #15
 8002000:	4013      	ands	r3, r2
 8002002:	d016      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002014:	430a      	orrs	r2, r1
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	045b      	lsls	r3, r3, #17
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0449      	lsls	r1, r1, #17
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4013      	ands	r3, r2
 800203c:	d014      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	2203      	movs	r2, #3
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204e:	430a      	orrs	r2, r1
 8002050:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d106      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0249      	lsls	r1, r1, #9
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	4013      	ands	r3, r2
 8002072:	d014      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	220c      	movs	r2, #12
 800207a:	4393      	bics	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002084:	430a      	orrs	r2, r1
 8002086:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b04      	cmp	r3, #4
 800208e:	d106      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	4013      	ands	r3, r2
 80020a8:	d016      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d106      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0449      	lsls	r1, r1, #17
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	049b      	lsls	r3, r3, #18
 80020e0:	4013      	ands	r3, r2
 80020e2:	d016      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0449      	lsls	r1, r1, #17
 800210e:	430a      	orrs	r2, r1
 8002110:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002112:	2312      	movs	r3, #18
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b006      	add	sp, #24
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	efffffff 	.word	0xefffffff
 8002128:	fffff3ff 	.word	0xfffff3ff
 800212c:	fffffcff 	.word	0xfffffcff
 8002130:	fff3ffff 	.word	0xfff3ffff
 8002134:	ffcfffff 	.word	0xffcfffff
 8002138:	ffffcfff 	.word	0xffffcfff
 800213c:	ffff3fff 	.word	0xffff3fff
 8002140:	ffbfffff 	.word	0xffbfffff
 8002144:	feffffff 	.word	0xfeffffff

08002148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e046      	b.n	80021e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2284      	movs	r2, #132	; 0x84
 800215e:	589b      	ldr	r3, [r3, r2]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f7fe fbb0 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2284      	movs	r2, #132	; 0x84
 8002178:	2124      	movs	r1, #36	; 0x24
 800217a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fc92 	bl	8002ab8 <UART_SetConfig>
 8002194:	0003      	movs	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e024      	b.n	80021e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f001 f805 	bl	80031b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	490d      	ldr	r1, [pc, #52]	; (80021f0 <HAL_UART_Init+0xa8>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	212a      	movs	r1, #42	; 0x2a
 80021ca:	438a      	bics	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f001 f89d 	bl	8003320 <UART_CheckIdleState>
 80021e6:	0003      	movs	r3, r0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	ffffb7ff 	.word	0xffffb7ff

080021f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	1dbb      	adds	r3, r7, #6
 8002200:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2284      	movs	r2, #132	; 0x84
 8002206:	589b      	ldr	r3, [r3, r2]
 8002208:	2b20      	cmp	r3, #32
 800220a:	d000      	beq.n	800220e <HAL_UART_Transmit_IT+0x1a>
 800220c:	e0a0      	b.n	8002350 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_UART_Transmit_IT+0x28>
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e098      	b.n	8002352 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	429a      	cmp	r2, r3
 800222a:	d109      	bne.n	8002240 <HAL_UART_Transmit_IT+0x4c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e088      	b.n	8002352 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	5c9b      	ldrb	r3, [r3, r2]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_UART_Transmit_IT+0x5a>
 800224a:	2302      	movs	r3, #2
 800224c:	e081      	b.n	8002352 <HAL_UART_Transmit_IT+0x15e>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1dba      	adds	r2, r7, #6
 8002260:	2154      	movs	r1, #84	; 0x54
 8002262:	8812      	ldrh	r2, [r2, #0]
 8002264:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1dba      	adds	r2, r7, #6
 800226a:	2156      	movs	r1, #86	; 0x56
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	228c      	movs	r2, #140	; 0x8c
 800227a:	2100      	movs	r1, #0
 800227c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2284      	movs	r2, #132	; 0x84
 8002282:	2121      	movs	r1, #33	; 0x21
 8002284:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	059b      	lsls	r3, r3, #22
 800228e:	429a      	cmp	r2, r3
 8002290:	d12e      	bne.n	80022f0 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	015b      	lsls	r3, r3, #5
 800229a:	429a      	cmp	r2, r3
 800229c:	d107      	bne.n	80022ae <HAL_UART_Transmit_IT+0xba>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a2c      	ldr	r2, [pc, #176]	; (800235c <HAL_UART_Transmit_IT+0x168>)
 80022aa:	675a      	str	r2, [r3, #116]	; 0x74
 80022ac:	e002      	b.n	80022b4 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <HAL_UART_Transmit_IT+0x16c>)
 80022b2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022bc:	f3ef 8310 	mrs	r3, PRIMASK
 80022c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80022c2:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f383 8810 	msr	PRIMASK, r3
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0409      	lsls	r1, r1, #16
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	e02d      	b.n	800234c <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_UART_Transmit_IT+0x118>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_UART_Transmit_IT+0x170>)
 8002308:	675a      	str	r2, [r3, #116]	; 0x74
 800230a:	e002      	b.n	8002312 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_UART_Transmit_IT+0x174>)
 8002310:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231a:	f3ef 8310 	mrs	r3, PRIMASK
 800231e:	613b      	str	r3, [r7, #16]
  return(result);
 8002320:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002324:	2301      	movs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f383 8810 	msr	PRIMASK, r3
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f383 8810 	msr	PRIMASK, r3
}
 800234a:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b00c      	add	sp, #48	; 0x30
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	08003ab5 	.word	0x08003ab5
 8002360:	080039c9 	.word	0x080039c9
 8002364:	0800390b 	.word	0x0800390b
 8002368:	08003857 	.word	0x08003857

0800236c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2288      	movs	r2, #136	; 0x88
 800237e:	589b      	ldr	r3, [r3, r2]
 8002380:	2b20      	cmp	r3, #32
 8002382:	d15a      	bne.n	800243a <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_Receive_IT+0x26>
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e052      	b.n	800243c <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	429a      	cmp	r2, r3
 80023a0:	d109      	bne.n	80023b6 <HAL_UART_Receive_IT+0x4a>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_UART_Receive_IT+0x58>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e03b      	b.n	800243c <HAL_UART_Receive_IT+0xd0>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_UART_Receive_IT+0xd8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d025      	beq.n	8002428 <HAL_UART_Receive_IT+0xbc>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_UART_Receive_IT+0xdc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d020      	beq.n	8002428 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	4013      	ands	r3, r2
 80023f2:	d019      	beq.n	8002428 <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f4:	f3ef 8310 	mrs	r3, PRIMASK
 80023f8:	613b      	str	r3, [r7, #16]
  return(result);
 80023fa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2301      	movs	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	04c9      	lsls	r1, r1, #19
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f383 8810 	msr	PRIMASK, r3
}
 8002426:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0018      	movs	r0, r3
 8002432:	f001 f887 	bl	8003544 <UART_Start_Receive_IT>
 8002436:	0003      	movs	r3, r0
 8002438:	e000      	b.n	800243c <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b008      	add	sp, #32
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40008000 	.word	0x40008000
 8002448:	40008400 	.word	0x40008400

0800244c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b0aa      	sub	sp, #168	; 0xa8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	22a4      	movs	r2, #164	; 0xa4
 800245c:	18b9      	adds	r1, r7, r2
 800245e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	20a0      	movs	r0, #160	; 0xa0
 8002468:	1839      	adds	r1, r7, r0
 800246a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	249c      	movs	r4, #156	; 0x9c
 8002474:	1939      	adds	r1, r7, r4
 8002476:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002478:	0011      	movs	r1, r2
 800247a:	18bb      	adds	r3, r7, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4aa0      	ldr	r2, [pc, #640]	; (8002700 <HAL_UART_IRQHandler+0x2b4>)
 8002480:	4013      	ands	r3, r2
 8002482:	2298      	movs	r2, #152	; 0x98
 8002484:	18bd      	adds	r5, r7, r2
 8002486:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002488:	18bb      	adds	r3, r7, r2
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11a      	bne.n	80024c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002490:	187b      	adds	r3, r7, r1
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800249a:	183b      	adds	r3, r7, r0
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2220      	movs	r2, #32
 80024a0:	4013      	ands	r3, r2
 80024a2:	d105      	bne.n	80024b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	055b      	lsls	r3, r3, #21
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00a      	beq.n	80024c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x6e>
 80024b8:	e2cf      	b.n	8002a5a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0010      	movs	r0, r2
 80024c2:	4798      	blx	r3
      }
      return;
 80024c4:	e2c9      	b.n	8002a5a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024c6:	2398      	movs	r3, #152	; 0x98
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <HAL_UART_IRQHandler+0x86>
 80024d0:	e11e      	b.n	8002710 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024d2:	239c      	movs	r3, #156	; 0x9c
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8a      	ldr	r2, [pc, #552]	; (8002704 <HAL_UART_IRQHandler+0x2b8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	d106      	bne.n	80024ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024de:	23a0      	movs	r3, #160	; 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a88      	ldr	r2, [pc, #544]	; (8002708 <HAL_UART_IRQHandler+0x2bc>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_UART_IRQHandler+0xa0>
 80024ea:	e111      	b.n	8002710 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024ec:	23a4      	movs	r3, #164	; 0xa4
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_UART_IRQHandler+0xd2>
 80024f8:	23a0      	movs	r3, #160	; 0xa0
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	228c      	movs	r2, #140	; 0x8c
 8002512:	589b      	ldr	r3, [r3, r2]
 8002514:	2201      	movs	r2, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	218c      	movs	r1, #140	; 0x8c
 800251c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800251e:	23a4      	movs	r3, #164	; 0xa4
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d011      	beq.n	800254e <HAL_UART_IRQHandler+0x102>
 800252a:	239c      	movs	r3, #156	; 0x9c
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	d00b      	beq.n	800254e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	228c      	movs	r2, #140	; 0x8c
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	2204      	movs	r2, #4
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	218c      	movs	r1, #140	; 0x8c
 800254c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800254e:	23a4      	movs	r3, #164	; 0xa4
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d011      	beq.n	800257e <HAL_UART_IRQHandler+0x132>
 800255a:	239c      	movs	r3, #156	; 0x9c
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2204      	movs	r2, #4
 800256c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	228c      	movs	r2, #140	; 0x8c
 8002572:	589b      	ldr	r3, [r3, r2]
 8002574:	2202      	movs	r2, #2
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	218c      	movs	r1, #140	; 0x8c
 800257c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800257e:	23a4      	movs	r3, #164	; 0xa4
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d017      	beq.n	80025ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800258a:	23a0      	movs	r3, #160	; 0xa0
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2220      	movs	r2, #32
 8002592:	4013      	ands	r3, r2
 8002594:	d105      	bne.n	80025a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002596:	239c      	movs	r3, #156	; 0x9c
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a59      	ldr	r2, [pc, #356]	; (8002704 <HAL_UART_IRQHandler+0x2b8>)
 800259e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2208      	movs	r2, #8
 80025a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	228c      	movs	r2, #140	; 0x8c
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	2208      	movs	r2, #8
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	218c      	movs	r1, #140	; 0x8c
 80025b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025ba:	23a4      	movs	r3, #164	; 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1a4>
 80025c8:	23a0      	movs	r3, #160	; 0xa0
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	04db      	lsls	r3, r3, #19
 80025d2:	4013      	ands	r3, r2
 80025d4:	d00c      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	228c      	movs	r2, #140	; 0x8c
 80025e4:	589b      	ldr	r3, [r3, r2]
 80025e6:	2220      	movs	r2, #32
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	218c      	movs	r1, #140	; 0x8c
 80025ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	228c      	movs	r2, #140	; 0x8c
 80025f4:	589b      	ldr	r3, [r3, r2]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d100      	bne.n	80025fc <HAL_UART_IRQHandler+0x1b0>
 80025fa:	e230      	b.n	8002a5e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025fc:	23a4      	movs	r3, #164	; 0xa4
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2220      	movs	r2, #32
 8002604:	4013      	ands	r3, r2
 8002606:	d015      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002608:	23a0      	movs	r3, #160	; 0xa0
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d106      	bne.n	8002622 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002614:	239c      	movs	r3, #156	; 0x9c
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	055b      	lsls	r3, r3, #21
 800261e:	4013      	ands	r3, r2
 8002620:	d008      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	0010      	movs	r0, r2
 8002632:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	228c      	movs	r2, #140	; 0x8c
 8002638:	589b      	ldr	r3, [r3, r2]
 800263a:	2194      	movs	r1, #148	; 0x94
 800263c:	187a      	adds	r2, r7, r1
 800263e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	4013      	ands	r3, r2
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d004      	beq.n	8002658 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800264e:	187b      	adds	r3, r7, r1
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2228      	movs	r2, #40	; 0x28
 8002654:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002656:	d047      	beq.n	80026e8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f001 f87e 	bl	800375c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	4013      	ands	r3, r2
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d137      	bne.n	80026de <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8310 	mrs	r3, PRIMASK
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002676:	2090      	movs	r0, #144	; 0x90
 8002678:	183a      	adds	r2, r7, r0
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	2301      	movs	r3, #1
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	438a      	bics	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	183b      	adds	r3, r7, r0
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_UART_IRQHandler+0x2c0>)
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7fe fba0 	bl	8000e00 <HAL_DMA_Abort_IT>
 80026c0:	1e03      	subs	r3, r0, #0
 80026c2:	d01a      	beq.n	80026fa <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ce:	0018      	movs	r0, r3
 80026d0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d2:	e012      	b.n	80026fa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f9da 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00d      	b.n	80026fa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f9d5 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e6:	e008      	b.n	80026fa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f9d0 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	228c      	movs	r2, #140	; 0x8c
 80026f4:	2100      	movs	r1, #0
 80026f6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026f8:	e1b1      	b.n	8002a5e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fa:	46c0      	nop			; (mov r8, r8)
    return;
 80026fc:	e1af      	b.n	8002a5e <HAL_UART_IRQHandler+0x612>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	0000080f 	.word	0x0000080f
 8002704:	10000001 	.word	0x10000001
 8002708:	04000120 	.word	0x04000120
 800270c:	08003829 	.word	0x08003829

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d000      	beq.n	800271a <HAL_UART_IRQHandler+0x2ce>
 8002718:	e135      	b.n	8002986 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800271a:	23a4      	movs	r3, #164	; 0xa4
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d100      	bne.n	8002728 <HAL_UART_IRQHandler+0x2dc>
 8002726:	e12e      	b.n	8002986 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002728:	23a0      	movs	r3, #160	; 0xa0
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2210      	movs	r2, #16
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_UART_IRQHandler+0x2ea>
 8002734:	e127      	b.n	8002986 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2210      	movs	r2, #16
 800273c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	4013      	ands	r3, r2
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d000      	beq.n	800274e <HAL_UART_IRQHandler+0x302>
 800274c:	e09e      	b.n	800288c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	217e      	movs	r1, #126	; 0x7e
 8002758:	187b      	adds	r3, r7, r1
 800275a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800275c:	187b      	adds	r3, r7, r1
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d100      	bne.n	8002766 <HAL_UART_IRQHandler+0x31a>
 8002764:	e17d      	b.n	8002a62 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	225c      	movs	r2, #92	; 0x5c
 800276a:	5a9b      	ldrh	r3, [r3, r2]
 800276c:	187a      	adds	r2, r7, r1
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d300      	bcc.n	8002776 <HAL_UART_IRQHandler+0x32a>
 8002774:	e175      	b.n	8002a62 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	187a      	adds	r2, r7, r1
 800277a:	215e      	movs	r1, #94	; 0x5e
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2220      	movs	r2, #32
 800278a:	4013      	ands	r3, r2
 800278c:	d16f      	bne.n	800286e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278e:	f3ef 8310 	mrs	r3, PRIMASK
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
 8002798:	2301      	movs	r3, #1
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	49b1      	ldr	r1, [pc, #708]	; (8002a74 <HAL_UART_IRQHandler+0x628>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c0:	f3ef 8310 	mrs	r3, PRIMASK
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	677b      	str	r3, [r7, #116]	; 0x74
 80027ca:	2301      	movs	r3, #1
 80027cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	f383 8810 	msr	PRIMASK, r3
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	438a      	bics	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f2:	f3ef 8310 	mrs	r3, PRIMASK
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fa:	673b      	str	r3, [r7, #112]	; 0x70
 80027fc:	2301      	movs	r3, #1
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002802:	f383 8810 	msr	PRIMASK, r3
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	438a      	bics	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	f383 8810 	msr	PRIMASK, r3
}
 8002822:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2288      	movs	r2, #136	; 0x88
 8002828:	2120      	movs	r1, #32
 800282a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002832:	f3ef 8310 	mrs	r3, PRIMASK
 8002836:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002838:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800283c:	2301      	movs	r3, #1
 800283e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2110      	movs	r1, #16
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285e:	f383 8810 	msr	PRIMASK, r3
}
 8002862:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fa69 	bl	8000d40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	225c      	movs	r2, #92	; 0x5c
 8002872:	5a9a      	ldrh	r2, [r3, r2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	215e      	movs	r1, #94	; 0x5e
 8002878:	5a5b      	ldrh	r3, [r3, r1]
 800287a:	b29b      	uxth	r3, r3
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	b29a      	uxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f90b 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800288a:	e0ea      	b.n	8002a62 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	225c      	movs	r2, #92	; 0x5c
 8002890:	5a99      	ldrh	r1, [r3, r2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	225e      	movs	r2, #94	; 0x5e
 8002896:	5a9b      	ldrh	r3, [r3, r2]
 8002898:	b29a      	uxth	r2, r3
 800289a:	208e      	movs	r0, #142	; 0x8e
 800289c:	183b      	adds	r3, r7, r0
 800289e:	1a8a      	subs	r2, r1, r2
 80028a0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	225e      	movs	r2, #94	; 0x5e
 80028a6:	5a9b      	ldrh	r3, [r3, r2]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_UART_IRQHandler+0x464>
 80028ae:	e0da      	b.n	8002a66 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <HAL_UART_IRQHandler+0x46e>
 80028b8:	e0d5      	b.n	8002a66 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ba:	f3ef 8310 	mrs	r3, PRIMASK
 80028be:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028c2:	2488      	movs	r4, #136	; 0x88
 80028c4:	193a      	adds	r2, r7, r4
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4966      	ldr	r1, [pc, #408]	; (8002a78 <HAL_UART_IRQHandler+0x62c>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f2:	f3ef 8310 	mrs	r3, PRIMASK
 80028f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80028f8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028fa:	2484      	movs	r4, #132	; 0x84
 80028fc:	193a      	adds	r2, r7, r4
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f383 8810 	msr	PRIMASK, r3
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4959      	ldr	r1, [pc, #356]	; (8002a7c <HAL_UART_IRQHandler+0x630>)
 8002918:	400a      	ands	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	193b      	adds	r3, r7, r4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2288      	movs	r2, #136	; 0x88
 800292e:	2120      	movs	r1, #32
 8002930:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293e:	f3ef 8310 	mrs	r3, PRIMASK
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002946:	2480      	movs	r4, #128	; 0x80
 8002948:	193a      	adds	r2, r7, r4
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2110      	movs	r1, #16
 8002964:	438a      	bics	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	193b      	adds	r3, r7, r4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002976:	183b      	adds	r3, r7, r0
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f88e 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002984:	e06f      	b.n	8002a66 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002986:	23a4      	movs	r3, #164	; 0xa4
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	035b      	lsls	r3, r3, #13
 8002990:	4013      	ands	r3, r2
 8002992:	d010      	beq.n	80029b6 <HAL_UART_IRQHandler+0x56a>
 8002994:	239c      	movs	r3, #156	; 0x9c
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	03db      	lsls	r3, r3, #15
 800299e:	4013      	ands	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	0352      	lsls	r2, r2, #13
 80029aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f001 fd76 	bl	80044a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b4:	e05a      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80029b6:	23a4      	movs	r3, #164	; 0xa4
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	4013      	ands	r3, r2
 80029c0:	d016      	beq.n	80029f0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029c2:	23a0      	movs	r3, #160	; 0xa0
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	4013      	ands	r3, r2
 80029cc:	d106      	bne.n	80029dc <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029ce:	239c      	movs	r3, #156	; 0x9c
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	4013      	ands	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d042      	beq.n	8002a6a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	0010      	movs	r0, r2
 80029ec:	4798      	blx	r3
    }
    return;
 80029ee:	e03c      	b.n	8002a6a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029f0:	23a4      	movs	r3, #164	; 0xa4
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	4013      	ands	r3, r2
 80029fa:	d00a      	beq.n	8002a12 <HAL_UART_IRQHandler+0x5c6>
 80029fc:	23a0      	movs	r3, #160	; 0xa0
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	4013      	ands	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f001 f8cc 	bl	8003ba8 <UART_EndTransmit_IT>
    return;
 8002a10:	e02c      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a12:	23a4      	movs	r3, #164	; 0xa4
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0x5ec>
 8002a20:	23a0      	movs	r3, #160	; 0xa0
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	05db      	lsls	r3, r3, #23
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f001 fd45 	bl	80044c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a36:	e019      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a38:	23a4      	movs	r3, #164	; 0xa4
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	045b      	lsls	r3, r3, #17
 8002a42:	4013      	ands	r3, r2
 8002a44:	d012      	beq.n	8002a6c <HAL_UART_IRQHandler+0x620>
 8002a46:	23a0      	movs	r3, #160	; 0xa0
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da0d      	bge.n	8002a6c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 fd2c 	bl	80044b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a58:	e008      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
      return;
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	e006      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
    return;
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	e004      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
      return;
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	e002      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
      return;
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	e000      	b.n	8002a6c <HAL_UART_IRQHandler+0x620>
    return;
 8002a6a:	46c0      	nop			; (mov r8, r8)
  }
}
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b02a      	add	sp, #168	; 0xa8
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	fffffeff 	.word	0xfffffeff
 8002a78:	fffffedf 	.word	0xfffffedf
 8002a7c:	effffffe 	.word	0xeffffffe

08002a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	1cbb      	adds	r3, r7, #2
 8002aac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac0:	231a      	movs	r3, #26
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	44bc      	add	ip, r7
 8002ac8:	4463      	add	r3, ip
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4ac1      	ldr	r2, [pc, #772]	; (8002df4 <UART_SetConfig+0x33c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4abd      	ldr	r2, [pc, #756]	; (8002df8 <UART_SetConfig+0x340>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0018      	movs	r0, r3
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	68d9      	ldr	r1, [r3, #12]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	0003      	movs	r3, r0
 8002b12:	430b      	orrs	r3, r1
 8002b14:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4ab6      	ldr	r2, [pc, #728]	; (8002dfc <UART_SetConfig+0x344>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d009      	beq.n	8002b3a <UART_SetConfig+0x82>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4ab5      	ldr	r2, [pc, #724]	; (8002e00 <UART_SetConfig+0x348>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d004      	beq.n	8002b3a <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b36:	4313      	orrs	r3, r2
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4ab0      	ldr	r2, [pc, #704]	; (8002e04 <UART_SetConfig+0x34c>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	220f      	movs	r2, #15
 8002b58:	4393      	bics	r3, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	0003      	movs	r3, r0
 8002b66:	430b      	orrs	r3, r1
 8002b68:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4aa6      	ldr	r2, [pc, #664]	; (8002e08 <UART_SetConfig+0x350>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d136      	bne.n	8002be2 <UART_SetConfig+0x12a>
 8002b74:	4ba5      	ldr	r3, [pc, #660]	; (8002e0c <UART_SetConfig+0x354>)
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d020      	beq.n	8002bc2 <UART_SetConfig+0x10a>
 8002b80:	d827      	bhi.n	8002bd2 <UART_SetConfig+0x11a>
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d00d      	beq.n	8002ba2 <UART_SetConfig+0xea>
 8002b86:	d824      	bhi.n	8002bd2 <UART_SetConfig+0x11a>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <UART_SetConfig+0xda>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d010      	beq.n	8002bb2 <UART_SetConfig+0xfa>
 8002b90:	e01f      	b.n	8002bd2 <UART_SetConfig+0x11a>
 8002b92:	231b      	movs	r3, #27
 8002b94:	2220      	movs	r2, #32
 8002b96:	4694      	mov	ip, r2
 8002b98:	44bc      	add	ip, r7
 8002b9a:	4463      	add	r3, ip
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e16f      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002ba2:	231b      	movs	r3, #27
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	44bc      	add	ip, r7
 8002baa:	4463      	add	r3, ip
 8002bac:	2202      	movs	r2, #2
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e167      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002bb2:	231b      	movs	r3, #27
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	4694      	mov	ip, r2
 8002bb8:	44bc      	add	ip, r7
 8002bba:	4463      	add	r3, ip
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e15f      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002bc2:	231b      	movs	r3, #27
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	44bc      	add	ip, r7
 8002bca:	4463      	add	r3, ip
 8002bcc:	2208      	movs	r2, #8
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e157      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002bd2:	231b      	movs	r3, #27
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	4694      	mov	ip, r2
 8002bd8:	44bc      	add	ip, r7
 8002bda:	4463      	add	r3, ip
 8002bdc:	2210      	movs	r2, #16
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e14f      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a8a      	ldr	r2, [pc, #552]	; (8002e10 <UART_SetConfig+0x358>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d136      	bne.n	8002c5a <UART_SetConfig+0x1a2>
 8002bec:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <UART_SetConfig+0x354>)
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	220c      	movs	r2, #12
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d020      	beq.n	8002c3a <UART_SetConfig+0x182>
 8002bf8:	d827      	bhi.n	8002c4a <UART_SetConfig+0x192>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d00d      	beq.n	8002c1a <UART_SetConfig+0x162>
 8002bfe:	d824      	bhi.n	8002c4a <UART_SetConfig+0x192>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <UART_SetConfig+0x152>
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d010      	beq.n	8002c2a <UART_SetConfig+0x172>
 8002c08:	e01f      	b.n	8002c4a <UART_SetConfig+0x192>
 8002c0a:	231b      	movs	r3, #27
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4694      	mov	ip, r2
 8002c10:	44bc      	add	ip, r7
 8002c12:	4463      	add	r3, ip
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e133      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c1a:	231b      	movs	r3, #27
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	4694      	mov	ip, r2
 8002c20:	44bc      	add	ip, r7
 8002c22:	4463      	add	r3, ip
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e12b      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c2a:	231b      	movs	r3, #27
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4694      	mov	ip, r2
 8002c30:	44bc      	add	ip, r7
 8002c32:	4463      	add	r3, ip
 8002c34:	2204      	movs	r2, #4
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e123      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c3a:	231b      	movs	r3, #27
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	4694      	mov	ip, r2
 8002c40:	44bc      	add	ip, r7
 8002c42:	4463      	add	r3, ip
 8002c44:	2208      	movs	r2, #8
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e11b      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4694      	mov	ip, r2
 8002c50:	44bc      	add	ip, r7
 8002c52:	4463      	add	r3, ip
 8002c54:	2210      	movs	r2, #16
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e113      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6d      	ldr	r2, [pc, #436]	; (8002e14 <UART_SetConfig+0x35c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d136      	bne.n	8002cd2 <UART_SetConfig+0x21a>
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <UART_SetConfig+0x354>)
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	2230      	movs	r2, #48	; 0x30
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b30      	cmp	r3, #48	; 0x30
 8002c6e:	d020      	beq.n	8002cb2 <UART_SetConfig+0x1fa>
 8002c70:	d827      	bhi.n	8002cc2 <UART_SetConfig+0x20a>
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d00d      	beq.n	8002c92 <UART_SetConfig+0x1da>
 8002c76:	d824      	bhi.n	8002cc2 <UART_SetConfig+0x20a>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x1ca>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d010      	beq.n	8002ca2 <UART_SetConfig+0x1ea>
 8002c80:	e01f      	b.n	8002cc2 <UART_SetConfig+0x20a>
 8002c82:	231b      	movs	r3, #27
 8002c84:	2220      	movs	r2, #32
 8002c86:	4694      	mov	ip, r2
 8002c88:	44bc      	add	ip, r7
 8002c8a:	4463      	add	r3, ip
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e0f7      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002c92:	231b      	movs	r3, #27
 8002c94:	2220      	movs	r2, #32
 8002c96:	4694      	mov	ip, r2
 8002c98:	44bc      	add	ip, r7
 8002c9a:	4463      	add	r3, ip
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e0ef      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002ca2:	231b      	movs	r3, #27
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	4694      	mov	ip, r2
 8002ca8:	44bc      	add	ip, r7
 8002caa:	4463      	add	r3, ip
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e0e7      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002cb2:	231b      	movs	r3, #27
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	4694      	mov	ip, r2
 8002cb8:	44bc      	add	ip, r7
 8002cba:	4463      	add	r3, ip
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e0df      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002cc2:	231b      	movs	r3, #27
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	4694      	mov	ip, r2
 8002cc8:	44bc      	add	ip, r7
 8002cca:	4463      	add	r3, ip
 8002ccc:	2210      	movs	r2, #16
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0d7      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <UART_SetConfig+0x360>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d107      	bne.n	8002cec <UART_SetConfig+0x234>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2220      	movs	r2, #32
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	44bc      	add	ip, r7
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e0ca      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <UART_SetConfig+0x364>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d107      	bne.n	8002d06 <UART_SetConfig+0x24e>
 8002cf6:	231b      	movs	r3, #27
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4694      	mov	ip, r2
 8002cfc:	44bc      	add	ip, r7
 8002cfe:	4463      	add	r3, ip
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e0bd      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <UART_SetConfig+0x368>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d107      	bne.n	8002d20 <UART_SetConfig+0x268>
 8002d10:	231b      	movs	r3, #27
 8002d12:	2220      	movs	r2, #32
 8002d14:	4694      	mov	ip, r2
 8002d16:	44bc      	add	ip, r7
 8002d18:	4463      	add	r3, ip
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e0b0      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a35      	ldr	r2, [pc, #212]	; (8002dfc <UART_SetConfig+0x344>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d143      	bne.n	8002db2 <UART_SetConfig+0x2fa>
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <UART_SetConfig+0x354>)
 8002d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	22c0      	movs	r2, #192	; 0xc0
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d02a      	beq.n	8002d92 <UART_SetConfig+0x2da>
 8002d3c:	22c0      	movs	r2, #192	; 0xc0
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d82e      	bhi.n	8002da2 <UART_SetConfig+0x2ea>
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <UART_SetConfig+0x2ba>
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d826      	bhi.n	8002da2 <UART_SetConfig+0x2ea>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <UART_SetConfig+0x2aa>
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	00d2      	lsls	r2, r2, #3
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d010      	beq.n	8002d82 <UART_SetConfig+0x2ca>
 8002d60:	e01f      	b.n	8002da2 <UART_SetConfig+0x2ea>
 8002d62:	231b      	movs	r3, #27
 8002d64:	2220      	movs	r2, #32
 8002d66:	4694      	mov	ip, r2
 8002d68:	44bc      	add	ip, r7
 8002d6a:	4463      	add	r3, ip
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e087      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002d72:	231b      	movs	r3, #27
 8002d74:	2220      	movs	r2, #32
 8002d76:	4694      	mov	ip, r2
 8002d78:	44bc      	add	ip, r7
 8002d7a:	4463      	add	r3, ip
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e07f      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002d82:	231b      	movs	r3, #27
 8002d84:	2220      	movs	r2, #32
 8002d86:	4694      	mov	ip, r2
 8002d88:	44bc      	add	ip, r7
 8002d8a:	4463      	add	r3, ip
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e077      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002d92:	231b      	movs	r3, #27
 8002d94:	2220      	movs	r2, #32
 8002d96:	4694      	mov	ip, r2
 8002d98:	44bc      	add	ip, r7
 8002d9a:	4463      	add	r3, ip
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e06f      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002da2:	231b      	movs	r3, #27
 8002da4:	2220      	movs	r2, #32
 8002da6:	4694      	mov	ip, r2
 8002da8:	44bc      	add	ip, r7
 8002daa:	4463      	add	r3, ip
 8002dac:	2210      	movs	r2, #16
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e067      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <UART_SetConfig+0x348>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d15b      	bne.n	8002e74 <UART_SetConfig+0x3bc>
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <UART_SetConfig+0x354>)
 8002dbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dc0:	23c0      	movs	r3, #192	; 0xc0
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	22c0      	movs	r2, #192	; 0xc0
 8002dc8:	0092      	lsls	r2, r2, #2
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d042      	beq.n	8002e54 <UART_SetConfig+0x39c>
 8002dce:	22c0      	movs	r2, #192	; 0xc0
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d846      	bhi.n	8002e64 <UART_SetConfig+0x3ac>
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02a      	beq.n	8002e34 <UART_SetConfig+0x37c>
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0092      	lsls	r2, r2, #2
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d83e      	bhi.n	8002e64 <UART_SetConfig+0x3ac>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01c      	beq.n	8002e24 <UART_SetConfig+0x36c>
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0052      	lsls	r2, r2, #1
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d028      	beq.n	8002e44 <UART_SetConfig+0x38c>
 8002df2:	e037      	b.n	8002e64 <UART_SetConfig+0x3ac>
 8002df4:	cfff69f3 	.word	0xcfff69f3
 8002df8:	ffffcfff 	.word	0xffffcfff
 8002dfc:	40008000 	.word	0x40008000
 8002e00:	40008400 	.word	0x40008400
 8002e04:	11fff4ff 	.word	0x11fff4ff
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40004400 	.word	0x40004400
 8002e14:	40004800 	.word	0x40004800
 8002e18:	40004c00 	.word	0x40004c00
 8002e1c:	40005000 	.word	0x40005000
 8002e20:	40013c00 	.word	0x40013c00
 8002e24:	231b      	movs	r3, #27
 8002e26:	2220      	movs	r2, #32
 8002e28:	4694      	mov	ip, r2
 8002e2a:	44bc      	add	ip, r7
 8002e2c:	4463      	add	r3, ip
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e026      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002e34:	231b      	movs	r3, #27
 8002e36:	2220      	movs	r2, #32
 8002e38:	4694      	mov	ip, r2
 8002e3a:	44bc      	add	ip, r7
 8002e3c:	4463      	add	r3, ip
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e01e      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002e44:	231b      	movs	r3, #27
 8002e46:	2220      	movs	r2, #32
 8002e48:	4694      	mov	ip, r2
 8002e4a:	44bc      	add	ip, r7
 8002e4c:	4463      	add	r3, ip
 8002e4e:	2204      	movs	r2, #4
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e016      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002e54:	231b      	movs	r3, #27
 8002e56:	2220      	movs	r2, #32
 8002e58:	4694      	mov	ip, r2
 8002e5a:	44bc      	add	ip, r7
 8002e5c:	4463      	add	r3, ip
 8002e5e:	2208      	movs	r2, #8
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e00e      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002e64:	231b      	movs	r3, #27
 8002e66:	2220      	movs	r2, #32
 8002e68:	4694      	mov	ip, r2
 8002e6a:	44bc      	add	ip, r7
 8002e6c:	4463      	add	r3, ip
 8002e6e:	2210      	movs	r2, #16
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e006      	b.n	8002e82 <UART_SetConfig+0x3ca>
 8002e74:	231b      	movs	r3, #27
 8002e76:	2220      	movs	r2, #32
 8002e78:	4694      	mov	ip, r2
 8002e7a:	44bc      	add	ip, r7
 8002e7c:	4463      	add	r3, ip
 8002e7e:	2210      	movs	r2, #16
 8002e80:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4ab8      	ldr	r2, [pc, #736]	; (8003168 <UART_SetConfig+0x6b0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0x3e0>
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4ab6      	ldr	r2, [pc, #728]	; (800316c <UART_SetConfig+0x6b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d000      	beq.n	8002e98 <UART_SetConfig+0x3e0>
 8002e96:	e097      	b.n	8002fc8 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e98:	231b      	movs	r3, #27
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	4694      	mov	ip, r2
 8002e9e:	44bc      	add	ip, r7
 8002ea0:	4463      	add	r3, ip
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d015      	beq.n	8002ed4 <UART_SetConfig+0x41c>
 8002ea8:	dc18      	bgt.n	8002edc <UART_SetConfig+0x424>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00d      	beq.n	8002eca <UART_SetConfig+0x412>
 8002eae:	dc15      	bgt.n	8002edc <UART_SetConfig+0x424>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <UART_SetConfig+0x402>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d005      	beq.n	8002ec4 <UART_SetConfig+0x40c>
 8002eb8:	e010      	b.n	8002edc <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eba:	f7fe fef3 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ec2:	e015      	b.n	8002ef0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec4:	4baa      	ldr	r3, [pc, #680]	; (8003170 <UART_SetConfig+0x6b8>)
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ec8:	e012      	b.n	8002ef0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eca:	f7fe fe5f 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ed2:	e00d      	b.n	8002ef0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eda:	e009      	b.n	8002ef0 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ee0:	231a      	movs	r3, #26
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
        break;
 8002eee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <UART_SetConfig+0x440>
 8002ef6:	e146      	b.n	8003186 <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	4b9d      	ldr	r3, [pc, #628]	; (8003174 <UART_SetConfig+0x6bc>)
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	5ad3      	ldrh	r3, [r2, r3]
 8002f02:	0019      	movs	r1, r3
 8002f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f06:	f7fd f8fd 	bl	8000104 <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	0013      	movs	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d305      	bcc.n	8002f2a <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d907      	bls.n	8002f3a <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8002f2a:	231a      	movs	r3, #26
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	4694      	mov	ip, r2
 8002f30:	44bc      	add	ip, r7
 8002f32:	4463      	add	r3, ip
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e045      	b.n	8002fc6 <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <UART_SetConfig+0x6bc>)
 8002f48:	0052      	lsls	r2, r2, #1
 8002f4a:	5ad3      	ldrh	r3, [r2, r3]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	69b8      	ldr	r0, [r7, #24]
 8002f58:	69f9      	ldr	r1, [r7, #28]
 8002f5a:	f7fd fa49 	bl	80003f0 <__aeabi_uldivmod>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	000b      	movs	r3, r1
 8002f62:	0e11      	lsrs	r1, r2, #24
 8002f64:	021d      	lsls	r5, r3, #8
 8002f66:	430d      	orrs	r5, r1
 8002f68:	0214      	lsls	r4, r2, #8
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68b8      	ldr	r0, [r7, #8]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	1900      	adds	r0, r0, r4
 8002f7c:	4169      	adcs	r1, r5
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f7fd fa30 	bl	80003f0 <__aeabi_uldivmod>
 8002f90:	0002      	movs	r2, r0
 8002f92:	000b      	movs	r3, r1
 8002f94:	0013      	movs	r3, r2
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	23c0      	movs	r3, #192	; 0xc0
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d309      	bcc.n	8002fb6 <UART_SetConfig+0x4fe>
 8002fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	035b      	lsls	r3, r3, #13
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d204      	bcs.n	8002fb6 <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e007      	b.n	8002fc6 <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8002fb6:	231a      	movs	r3, #26
 8002fb8:	2220      	movs	r2, #32
 8002fba:	4694      	mov	ip, r2
 8002fbc:	44bc      	add	ip, r7
 8002fbe:	4463      	add	r3, ip
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002fc4:	e0df      	b.n	8003186 <UART_SetConfig+0x6ce>
 8002fc6:	e0de      	b.n	8003186 <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d000      	beq.n	8002fd6 <UART_SetConfig+0x51e>
 8002fd4:	e074      	b.n	80030c0 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8002fd6:	231b      	movs	r3, #27
 8002fd8:	2220      	movs	r2, #32
 8002fda:	4694      	mov	ip, r2
 8002fdc:	44bc      	add	ip, r7
 8002fde:	4463      	add	r3, ip
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d015      	beq.n	8003012 <UART_SetConfig+0x55a>
 8002fe6:	dc18      	bgt.n	800301a <UART_SetConfig+0x562>
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d00d      	beq.n	8003008 <UART_SetConfig+0x550>
 8002fec:	dc15      	bgt.n	800301a <UART_SetConfig+0x562>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <UART_SetConfig+0x540>
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d005      	beq.n	8003002 <UART_SetConfig+0x54a>
 8002ff6:	e010      	b.n	800301a <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7fe fe54 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003000:	e015      	b.n	800302e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003002:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <UART_SetConfig+0x6b8>)
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003006:	e012      	b.n	800302e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003008:	f7fe fdc0 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 800300c:	0003      	movs	r3, r0
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003018:	e009      	b.n	800302e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800301e:	231a      	movs	r3, #26
 8003020:	2220      	movs	r2, #32
 8003022:	4694      	mov	ip, r2
 8003024:	44bc      	add	ip, r7
 8003026:	4463      	add	r3, ip
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
        break;
 800302c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d100      	bne.n	8003036 <UART_SetConfig+0x57e>
 8003034:	e0a7      	b.n	8003186 <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303a:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <UART_SetConfig+0x6bc>)
 800303c:	0052      	lsls	r2, r2, #1
 800303e:	5ad3      	ldrh	r3, [r2, r3]
 8003040:	0019      	movs	r1, r3
 8003042:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003044:	f7fd f85e 	bl	8000104 <__udivsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	005a      	lsls	r2, r3, #1
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	18d2      	adds	r2, r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0019      	movs	r1, r3
 800305a:	0010      	movs	r0, r2
 800305c:	f7fd f852 	bl	8000104 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	b29b      	uxth	r3, r3
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d921      	bls.n	80030b0 <UART_SetConfig+0x5f8>
 800306c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	025b      	lsls	r3, r3, #9
 8003072:	429a      	cmp	r2, r3
 8003074:	d21c      	bcs.n	80030b0 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	b29a      	uxth	r2, r3
 800307a:	200e      	movs	r0, #14
 800307c:	2420      	movs	r4, #32
 800307e:	193b      	adds	r3, r7, r4
 8003080:	181b      	adds	r3, r3, r0
 8003082:	210f      	movs	r1, #15
 8003084:	438a      	bics	r2, r1
 8003086:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	2207      	movs	r2, #7
 8003090:	4013      	ands	r3, r2
 8003092:	b299      	uxth	r1, r3
 8003094:	193b      	adds	r3, r7, r4
 8003096:	181b      	adds	r3, r3, r0
 8003098:	193a      	adds	r2, r7, r4
 800309a:	1812      	adds	r2, r2, r0
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	193a      	adds	r2, r7, r4
 80030a8:	1812      	adds	r2, r2, r0
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	e06a      	b.n	8003186 <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 80030b0:	231a      	movs	r3, #26
 80030b2:	2220      	movs	r2, #32
 80030b4:	4694      	mov	ip, r2
 80030b6:	44bc      	add	ip, r7
 80030b8:	4463      	add	r3, ip
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e062      	b.n	8003186 <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030c0:	231b      	movs	r3, #27
 80030c2:	2220      	movs	r2, #32
 80030c4:	4694      	mov	ip, r2
 80030c6:	44bc      	add	ip, r7
 80030c8:	4463      	add	r3, ip
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d015      	beq.n	80030fc <UART_SetConfig+0x644>
 80030d0:	dc18      	bgt.n	8003104 <UART_SetConfig+0x64c>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00d      	beq.n	80030f2 <UART_SetConfig+0x63a>
 80030d6:	dc15      	bgt.n	8003104 <UART_SetConfig+0x64c>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <UART_SetConfig+0x62a>
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d005      	beq.n	80030ec <UART_SetConfig+0x634>
 80030e0:	e010      	b.n	8003104 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e2:	f7fe fddf 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80030e6:	0003      	movs	r3, r0
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030ea:	e015      	b.n	8003118 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <UART_SetConfig+0x6b8>)
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030f0:	e012      	b.n	8003118 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f2:	f7fe fd4b 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80030f6:	0003      	movs	r3, r0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030fa:	e00d      	b.n	8003118 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003102:	e009      	b.n	8003118 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003108:	231a      	movs	r3, #26
 800310a:	2220      	movs	r2, #32
 800310c:	4694      	mov	ip, r2
 800310e:	44bc      	add	ip, r7
 8003110:	4463      	add	r3, ip
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
        break;
 8003116:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d033      	beq.n	8003186 <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <UART_SetConfig+0x6bc>)
 8003124:	0052      	lsls	r2, r2, #1
 8003126:	5ad3      	ldrh	r3, [r2, r3]
 8003128:	0019      	movs	r1, r3
 800312a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800312c:	f7fc ffea 	bl	8000104 <__udivsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	001a      	movs	r2, r3
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	18d2      	adds	r2, r2, r3
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0019      	movs	r1, r3
 8003142:	0010      	movs	r0, r2
 8003144:	f7fc ffde 	bl	8000104 <__udivsi3>
 8003148:	0003      	movs	r3, r0
 800314a:	b29b      	uxth	r3, r3
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	2b0f      	cmp	r3, #15
 8003152:	d911      	bls.n	8003178 <UART_SetConfig+0x6c0>
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	025b      	lsls	r3, r3, #9
 800315a:	429a      	cmp	r2, r3
 800315c:	d20c      	bcs.n	8003178 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	e00e      	b.n	8003186 <UART_SetConfig+0x6ce>
 8003168:	40008000 	.word	0x40008000
 800316c:	40008400 	.word	0x40008400
 8003170:	00f42400 	.word	0x00f42400
 8003174:	080047d4 	.word	0x080047d4
      }
      else
      {
        ret = HAL_ERROR;
 8003178:	231a      	movs	r3, #26
 800317a:	2220      	movs	r2, #32
 800317c:	4694      	mov	ip, r2
 800317e:	44bc      	add	ip, r7
 8003180:	4463      	add	r3, ip
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	226a      	movs	r2, #106	; 0x6a
 800318a:	2101      	movs	r1, #1
 800318c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2268      	movs	r2, #104	; 0x68
 8003192:	2101      	movs	r1, #1
 8003194:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2200      	movs	r2, #0
 800319a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	2200      	movs	r2, #0
 80031a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80031a2:	231a      	movs	r3, #26
 80031a4:	2220      	movs	r2, #32
 80031a6:	4694      	mov	ip, r2
 80031a8:	44bc      	add	ip, r7
 80031aa:	4463      	add	r3, ip
 80031ac:	781b      	ldrb	r3, [r3, #0]
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b010      	add	sp, #64	; 0x40
 80031b4:	bdb0      	pop	{r4, r5, r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)

080031b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <UART_AdvFeatureConfig+0x144>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00b      	beq.n	8003204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a43      	ldr	r2, [pc, #268]	; (8003300 <UART_AdvFeatureConfig+0x148>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2204      	movs	r2, #4
 800320a:	4013      	ands	r3, r2
 800320c:	d00b      	beq.n	8003226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <UART_AdvFeatureConfig+0x14c>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	2208      	movs	r2, #8
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <UART_AdvFeatureConfig+0x150>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	2210      	movs	r2, #16
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <UART_AdvFeatureConfig+0x154>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	2220      	movs	r2, #32
 8003270:	4013      	ands	r3, r2
 8003272:	d00b      	beq.n	800328c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <UART_AdvFeatureConfig+0x158>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	4013      	ands	r3, r2
 8003294:	d01d      	beq.n	80032d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <UART_AdvFeatureConfig+0x15c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	035b      	lsls	r3, r3, #13
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10b      	bne.n	80032d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <UART_AdvFeatureConfig+0x160>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a0e      	ldr	r2, [pc, #56]	; (800331c <UART_AdvFeatureConfig+0x164>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	fffdffff 	.word	0xfffdffff
 8003300:	fffeffff 	.word	0xfffeffff
 8003304:	fffbffff 	.word	0xfffbffff
 8003308:	ffff7fff 	.word	0xffff7fff
 800330c:	ffffefff 	.word	0xffffefff
 8003310:	ffffdfff 	.word	0xffffdfff
 8003314:	ffefffff 	.word	0xffefffff
 8003318:	ff9fffff 	.word	0xff9fffff
 800331c:	fff7ffff 	.word	0xfff7ffff

08003320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	228c      	movs	r2, #140	; 0x8c
 800332c:	2100      	movs	r1, #0
 800332e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003330:	f7fd fc08 	bl	8000b44 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	4013      	ands	r3, r2
 8003342:	2b08      	cmp	r3, #8
 8003344:	d10c      	bne.n	8003360 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	0391      	lsls	r1, r2, #14
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <UART_CheckIdleState+0x90>)
 8003350:	9200      	str	r2, [sp, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	f000 f82e 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e023      	b.n	80033a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2204      	movs	r2, #4
 8003368:	4013      	ands	r3, r2
 800336a:	2b04      	cmp	r3, #4
 800336c:	d10c      	bne.n	8003388 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	03d1      	lsls	r1, r2, #15
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <UART_CheckIdleState+0x90>)
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	f000 f81a 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00f      	b.n	80033a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2284      	movs	r2, #132	; 0x84
 800338c:	2120      	movs	r1, #32
 800338e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2288      	movs	r2, #136	; 0x88
 8003394:	2120      	movs	r1, #32
 8003396:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b004      	add	sp, #16
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	01ffffff 	.word	0x01ffffff

080033b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b094      	sub	sp, #80	; 0x50
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	e0a7      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	3301      	adds	r3, #1
 80033ca:	d100      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80033cc:	e0a3      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fd fbb9 	bl	8000b44 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d13f      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e4:	f3ef 8310 	mrs	r3, PRIMASK
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	494e      	ldr	r1, [pc, #312]	; (8003540 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
 8003420:	2301      	movs	r3, #1
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003442:	f383 8810 	msr	PRIMASK, r3
}
 8003446:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2284      	movs	r2, #132	; 0x84
 800344c:	2120      	movs	r1, #32
 800344e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2288      	movs	r2, #136	; 0x88
 8003454:	2120      	movs	r1, #32
 8003456:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e069      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2204      	movs	r2, #4
 800346c:	4013      	ands	r3, r2
 800346e:	d052      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	401a      	ands	r2, r3
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	429a      	cmp	r2, r3
 8003482:	d148      	bne.n	8003516 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	613b      	str	r3, [r7, #16]
  return(result);
 8003494:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4924      	ldr	r1, [pc, #144]	; (8003540 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c0:	f3ef 8310 	mrs	r3, PRIMASK
 80034c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80034c6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ca:	2301      	movs	r3, #1
 80034cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	438a      	bics	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2284      	movs	r2, #132	; 0x84
 80034f6:	2120      	movs	r1, #32
 80034f8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2288      	movs	r2, #136	; 0x88
 80034fe:	2120      	movs	r1, #32
 8003500:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	228c      	movs	r2, #140	; 0x8c
 8003506:	2120      	movs	r1, #32
 8003508:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e010      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	425a      	negs	r2, r3
 8003526:	4153      	adcs	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	001a      	movs	r2, r3
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d100      	bne.n	8003536 <UART_WaitOnFlagUntilTimeout+0x182>
 8003534:	e747      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b014      	add	sp, #80	; 0x50
 800353e:	bd80      	pop	{r7, pc}
 8003540:	fffffe5f 	.word	0xfffffe5f

08003544 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	; 0x50
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	1dbb      	adds	r3, r7, #6
 8003550:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1dba      	adds	r2, r7, #6
 800355c:	215c      	movs	r1, #92	; 0x5c
 800355e:	8812      	ldrh	r2, [r2, #0]
 8003560:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1dba      	adds	r2, r7, #6
 8003566:	215e      	movs	r1, #94	; 0x5e
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	015b      	lsls	r3, r3, #5
 800357a:	429a      	cmp	r2, r3
 800357c:	d10d      	bne.n	800359a <UART_Start_Receive_IT+0x56>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <UART_Start_Receive_IT+0x4c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2260      	movs	r2, #96	; 0x60
 800358a:	496f      	ldr	r1, [pc, #444]	; (8003748 <UART_Start_Receive_IT+0x204>)
 800358c:	5299      	strh	r1, [r3, r2]
 800358e:	e02e      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2260      	movs	r2, #96	; 0x60
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	5299      	strh	r1, [r3, r2]
 8003598:	e029      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10d      	bne.n	80035be <UART_Start_Receive_IT+0x7a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <UART_Start_Receive_IT+0x70>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2260      	movs	r2, #96	; 0x60
 80035ae:	21ff      	movs	r1, #255	; 0xff
 80035b0:	5299      	strh	r1, [r3, r2]
 80035b2:	e01c      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2260      	movs	r2, #96	; 0x60
 80035b8:	217f      	movs	r1, #127	; 0x7f
 80035ba:	5299      	strh	r1, [r3, r2]
 80035bc:	e017      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	055b      	lsls	r3, r3, #21
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d10d      	bne.n	80035e6 <UART_Start_Receive_IT+0xa2>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <UART_Start_Receive_IT+0x98>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2260      	movs	r2, #96	; 0x60
 80035d6:	217f      	movs	r1, #127	; 0x7f
 80035d8:	5299      	strh	r1, [r3, r2]
 80035da:	e008      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2260      	movs	r2, #96	; 0x60
 80035e0:	213f      	movs	r1, #63	; 0x3f
 80035e2:	5299      	strh	r1, [r3, r2]
 80035e4:	e003      	b.n	80035ee <UART_Start_Receive_IT+0xaa>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2260      	movs	r2, #96	; 0x60
 80035ea:	2100      	movs	r1, #0
 80035ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	228c      	movs	r2, #140	; 0x8c
 80035f2:	2100      	movs	r1, #0
 80035f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2288      	movs	r2, #136	; 0x88
 80035fa:	2122      	movs	r1, #34	; 0x22
 80035fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003604:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	2301      	movs	r3, #1
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	059b      	lsls	r3, r3, #22
 8003638:	429a      	cmp	r2, r3
 800363a:	d150      	bne.n	80036de <UART_Start_Receive_IT+0x19a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2268      	movs	r2, #104	; 0x68
 8003640:	5a9b      	ldrh	r3, [r3, r2]
 8003642:	1dba      	adds	r2, r7, #6
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d349      	bcc.n	80036de <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <UART_Start_Receive_IT+0x122>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <UART_Start_Receive_IT+0x208>)
 8003662:	671a      	str	r2, [r3, #112]	; 0x70
 8003664:	e002      	b.n	800366c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a39      	ldr	r2, [pc, #228]	; (8003750 <UART_Start_Receive_IT+0x20c>)
 800366a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	61fb      	str	r3, [r7, #28]
  return(result);
 800367a:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
 800367e:	2301      	movs	r3, #1
 8003680:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0049      	lsls	r1, r1, #1
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	2301      	movs	r3, #1
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	f383 8810 	msr	PRIMASK, r3
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0549      	lsls	r1, r1, #21
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	e02e      	b.n	800373c <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	015b      	lsls	r3, r3, #5
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d107      	bne.n	80036fa <UART_Start_Receive_IT+0x1b6>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <UART_Start_Receive_IT+0x210>)
 80036f6:	671a      	str	r2, [r3, #112]	; 0x70
 80036f8:	e002      	b.n	8003700 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <UART_Start_Receive_IT+0x214>)
 80036fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	613b      	str	r3, [r7, #16]
  return(result);
 800370e:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
 8003712:	2301      	movs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2190      	movs	r1, #144	; 0x90
 800372a:	0049      	lsls	r1, r1, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003732:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b014      	add	sp, #80	; 0x50
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	000001ff 	.word	0x000001ff
 800374c:	080041bd 	.word	0x080041bd
 8003750:	08003ed9 	.word	0x08003ed9
 8003754:	08003d6d 	.word	0x08003d6d
 8003758:	08003c01 	.word	0x08003c01

0800375c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	; 0x38
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	617b      	str	r3, [r7, #20]
  return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4926      	ldr	r1, [pc, #152]	; (8003820 <UART_EndRxTransfer+0xc4>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f383 8810 	msr	PRIMASK, r3
}
 8003794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	623b      	str	r3, [r7, #32]
  return(result);
 800379c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
 80037a0:	2301      	movs	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <UART_EndRxTransfer+0xc8>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d118      	bne.n	8003802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	2301      	movs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f383 8810 	msr	PRIMASK, r3
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2110      	movs	r1, #16
 80037f2:	438a      	bics	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2288      	movs	r2, #136	; 0x88
 8003806:	2120      	movs	r1, #32
 8003808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b00e      	add	sp, #56	; 0x38
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	fffffedf 	.word	0xfffffedf
 8003824:	effffffe 	.word	0xeffffffe

08003828 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	225e      	movs	r2, #94	; 0x5e
 800383a:	2100      	movs	r1, #0
 800383c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2256      	movs	r2, #86	; 0x56
 8003842:	2100      	movs	r1, #0
 8003844:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff f921 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08a      	sub	sp, #40	; 0x28
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2284      	movs	r2, #132	; 0x84
 8003862:	589b      	ldr	r3, [r3, r2]
 8003864:	2b21      	cmp	r3, #33	; 0x21
 8003866:	d14c      	bne.n	8003902 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2256      	movs	r2, #86	; 0x56
 800386c:	5a9b      	ldrh	r3, [r3, r2]
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d132      	bne.n	80038da <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003874:	f3ef 8310 	mrs	r3, PRIMASK
 8003878:	60bb      	str	r3, [r7, #8]
  return(result);
 800387a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2301      	movs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	438a      	bics	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a6:	f3ef 8310 	mrs	r3, PRIMASK
 80038aa:	617b      	str	r3, [r7, #20]
  return(result);
 80038ac:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	2301      	movs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2140      	movs	r1, #64	; 0x40
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038d8:	e013      	b.n	8003902 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2256      	movs	r2, #86	; 0x56
 80038f4:	5a9b      	ldrh	r3, [r3, r2]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b299      	uxth	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2256      	movs	r2, #86	; 0x56
 8003900:	5299      	strh	r1, [r3, r2]
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b00a      	add	sp, #40	; 0x28
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08c      	sub	sp, #48	; 0x30
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2284      	movs	r2, #132	; 0x84
 8003916:	589b      	ldr	r3, [r3, r2]
 8003918:	2b21      	cmp	r3, #33	; 0x21
 800391a:	d151      	bne.n	80039c0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2256      	movs	r2, #86	; 0x56
 8003920:	5a9b      	ldrh	r3, [r3, r2]
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d132      	bne.n	800398e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003928:	f3ef 8310 	mrs	r3, PRIMASK
 800392c:	60fb      	str	r3, [r7, #12]
  return(result);
 800392e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
 8003932:	2301      	movs	r3, #1
 8003934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	438a      	bics	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003960:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	2301      	movs	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2140      	movs	r1, #64	; 0x40
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800398c:	e018      	b.n	80039c0 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	001a      	movs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	05d2      	lsls	r2, r2, #23
 80039a0:	0dd2      	lsrs	r2, r2, #23
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2256      	movs	r2, #86	; 0x56
 80039b2:	5a9b      	ldrh	r3, [r3, r2]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b299      	uxth	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2256      	movs	r2, #86	; 0x56
 80039be:	5299      	strh	r1, [r3, r2]
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b00c      	add	sp, #48	; 0x30
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	; 0x30
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2284      	movs	r2, #132	; 0x84
 80039d4:	589b      	ldr	r3, [r3, r2]
 80039d6:	2b21      	cmp	r3, #33	; 0x21
 80039d8:	d165      	bne.n	8003aa6 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80039da:	232e      	movs	r3, #46	; 0x2e
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	216a      	movs	r1, #106	; 0x6a
 80039e2:	5a52      	ldrh	r2, [r2, r1]
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	e059      	b.n	8003a9c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2256      	movs	r2, #86	; 0x56
 80039ec:	5a9b      	ldrh	r3, [r3, r2]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d133      	bne.n	8003a5c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fe:	2301      	movs	r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4926      	ldr	r1, [pc, #152]	; (8003ab0 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a26:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a2c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	2301      	movs	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2140      	movs	r1, #64	; 0x40
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003a58:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a5a:	e024      	b.n	8003aa6 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	4013      	ands	r3, r2
 8003a66:	d013      	beq.n	8003a90 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2256      	movs	r2, #86	; 0x56
 8003a82:	5a9b      	ldrh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2256      	movs	r2, #86	; 0x56
 8003a8e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a90:	212e      	movs	r1, #46	; 0x2e
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	232e      	movs	r3, #46	; 0x2e
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1a0      	bne.n	80039e8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b00c      	add	sp, #48	; 0x30
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	ff7fffff 	.word	0xff7fffff

08003ab4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2284      	movs	r2, #132	; 0x84
 8003ac0:	589b      	ldr	r3, [r3, r2]
 8003ac2:	2b21      	cmp	r3, #33	; 0x21
 8003ac4:	d16a      	bne.n	8003b9c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ac6:	232e      	movs	r3, #46	; 0x2e
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	216a      	movs	r1, #106	; 0x6a
 8003ace:	5a52      	ldrh	r2, [r2, r1]
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	e05e      	b.n	8003b92 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2256      	movs	r2, #86	; 0x56
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d133      	bne.n	8003b48 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	2301      	movs	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b12:	f3ef 8310 	mrs	r3, PRIMASK
 8003b16:	617b      	str	r3, [r7, #20]
  return(result);
 8003b18:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003b44:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003b46:	e029      	b.n	8003b9c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4013      	ands	r3, r2
 8003b52:	d018      	beq.n	8003b86 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	05d2      	lsls	r2, r2, #23
 8003b66:	0dd2      	lsrs	r2, r2, #23
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2256      	movs	r2, #86	; 0x56
 8003b78:	5a9b      	ldrh	r3, [r3, r2]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2256      	movs	r2, #86	; 0x56
 8003b84:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b86:	212e      	movs	r1, #46	; 0x2e
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	232e      	movs	r3, #46	; 0x2e
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d19b      	bne.n	8003ad4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b00c      	add	sp, #48	; 0x30
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	ff7fffff 	.word	0xff7fffff

08003ba8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	438a      	bics	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f383 8810 	msr	PRIMASK, r3
}
 8003be0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2284      	movs	r2, #132	; 0x84
 8003be6:	2120      	movs	r1, #32
 8003be8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fe ff44 	bl	8002a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b006      	add	sp, #24
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b090      	sub	sp, #64	; 0x40
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c08:	203e      	movs	r0, #62	; 0x3e
 8003c0a:	183b      	adds	r3, r7, r0
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	2160      	movs	r1, #96	; 0x60
 8003c10:	5a52      	ldrh	r2, [r2, r1]
 8003c12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2288      	movs	r2, #136	; 0x88
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	d000      	beq.n	8003c20 <UART_RxISR_8BIT+0x20>
 8003c1e:	e097      	b.n	8003d50 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c26:	213c      	movs	r1, #60	; 0x3c
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b2d9      	uxtb	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	225e      	movs	r2, #94	; 0x5e
 8003c50:	5a9b      	ldrh	r3, [r3, r2]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b299      	uxth	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	225e      	movs	r2, #94	; 0x5e
 8003c5c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	225e      	movs	r2, #94	; 0x5e
 8003c62:	5a9b      	ldrh	r3, [r3, r2]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d000      	beq.n	8003c6c <UART_RxISR_8BIT+0x6c>
 8003c6a:	e079      	b.n	8003d60 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4936      	ldr	r1, [pc, #216]	; (8003d68 <UART_RxISR_8BIT+0x168>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2288      	movs	r2, #136	; 0x88
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d12f      	bne.n	8003d46 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cf2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	438a      	bics	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d103      	bne.n	8003d34 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2210      	movs	r2, #16
 8003d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	225c      	movs	r2, #92	; 0x5c
 8003d38:	5a9a      	ldrh	r2, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fe feae 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d44:	e00c      	b.n	8003d60 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fc fc67 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003d4e:	e007      	b.n	8003d60 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2108      	movs	r1, #8
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	619a      	str	r2, [r3, #24]
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b010      	add	sp, #64	; 0x40
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	fffffedf 	.word	0xfffffedf

08003d6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b090      	sub	sp, #64	; 0x40
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d74:	203e      	movs	r0, #62	; 0x3e
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	2160      	movs	r1, #96	; 0x60
 8003d7c:	5a52      	ldrh	r2, [r2, r1]
 8003d7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2288      	movs	r2, #136	; 0x88
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	2b22      	cmp	r3, #34	; 0x22
 8003d88:	d000      	beq.n	8003d8c <UART_RxISR_16BIT+0x20>
 8003d8a:	e097      	b.n	8003ebc <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d92:	213c      	movs	r1, #60	; 0x3c
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	183a      	adds	r2, r7, r0
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	225e      	movs	r2, #94	; 0x5e
 8003dbc:	5a9b      	ldrh	r3, [r3, r2]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b299      	uxth	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	225e      	movs	r2, #94	; 0x5e
 8003dc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	225e      	movs	r2, #94	; 0x5e
 8003dce:	5a9b      	ldrh	r3, [r3, r2]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d000      	beq.n	8003dd8 <UART_RxISR_16BIT+0x6c>
 8003dd6:	e079      	b.n	8003ecc <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dde:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4936      	ldr	r1, [pc, #216]	; (8003ed4 <UART_RxISR_16BIT+0x168>)
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	623b      	str	r3, [r7, #32]
  return(result);
 8003e10:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
 8003e14:	2301      	movs	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f383 8810 	msr	PRIMASK, r3
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2288      	movs	r2, #136	; 0x88
 8003e40:	2120      	movs	r1, #32
 8003e42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d12f      	bne.n	8003eb2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	2301      	movs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2110      	movs	r1, #16
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2210      	movs	r2, #16
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d103      	bne.n	8003ea0 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	225c      	movs	r2, #92	; 0x5c
 8003ea4:	5a9a      	ldrh	r2, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7fe fdf8 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eb0:	e00c      	b.n	8003ecc <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7fc fbb1 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003eba:	e007      	b.n	8003ecc <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2108      	movs	r1, #8
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	619a      	str	r2, [r3, #24]
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b010      	add	sp, #64	; 0x40
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	fffffedf 	.word	0xfffffedf

08003ed8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b09c      	sub	sp, #112	; 0x70
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003ee0:	236a      	movs	r3, #106	; 0x6a
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	2160      	movs	r1, #96	; 0x60
 8003ee8:	5a52      	ldrh	r2, [r2, r1]
 8003eea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2288      	movs	r2, #136	; 0x88
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	d000      	beq.n	8003f10 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003f0e:	e141      	b.n	8004194 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f10:	235e      	movs	r3, #94	; 0x5e
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	2168      	movs	r1, #104	; 0x68
 8003f18:	5a52      	ldrh	r2, [r2, r1]
 8003f1a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f1c:	e0e8      	b.n	80040f0 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f24:	215c      	movs	r1, #92	; 0x5c
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	236a      	movs	r3, #106	; 0x6a
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b2d9      	uxtb	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	225e      	movs	r2, #94	; 0x5e
 8003f50:	5a9b      	ldrh	r3, [r3, r2]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b299      	uxth	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	225e      	movs	r2, #94	; 0x5e
 8003f5c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	2207      	movs	r2, #7
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d049      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	d010      	beq.n	8003f98 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003f76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	228c      	movs	r2, #140	; 0x8c
 8003f8c:	589b      	ldr	r3, [r3, r2]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	218c      	movs	r1, #140	; 0x8c
 8003f96:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00f      	beq.n	8003fc0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	228c      	movs	r2, #140	; 0x8c
 8003fb4:	589b      	ldr	r3, [r3, r2]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	218c      	movs	r1, #140	; 0x8c
 8003fbe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d00f      	beq.n	8003fe8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	228c      	movs	r2, #140	; 0x8c
 8003fdc:	589b      	ldr	r3, [r3, r2]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	218c      	movs	r1, #140	; 0x8c
 8003fe6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	228c      	movs	r2, #140	; 0x8c
 8003fec:	589b      	ldr	r3, [r3, r2]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fe fd4b 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	228c      	movs	r2, #140	; 0x8c
 8003ffe:	2100      	movs	r1, #0
 8004000:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	225e      	movs	r2, #94	; 0x5e
 8004006:	5a9b      	ldrh	r3, [r3, r2]
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d170      	bne.n	80040f0 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004016:	65bb      	str	r3, [r7, #88]	; 0x58
 8004018:	2301      	movs	r3, #1
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	495f      	ldr	r1, [pc, #380]	; (80041ac <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004030:	400a      	ands	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004048:	657b      	str	r3, [r7, #84]	; 0x54
 800404a:	2301      	movs	r3, #1
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4953      	ldr	r1, [pc, #332]	; (80041b0 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004062:	400a      	ands	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2288      	movs	r2, #136	; 0x88
 8004076:	2120      	movs	r1, #32
 8004078:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d12f      	bne.n	80040e8 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408e:	f3ef 8310 	mrs	r3, PRIMASK
 8004092:	623b      	str	r3, [r7, #32]
  return(result);
 8004094:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
 8004098:	2301      	movs	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2110      	movs	r1, #16
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2210      	movs	r2, #16
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d103      	bne.n	80040d6 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2210      	movs	r2, #16
 80040d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	225c      	movs	r2, #92	; 0x5c
 80040da:	5a9a      	ldrh	r2, [r3, r2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe fcdd 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
 80040e6:	e003      	b.n	80040f0 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7fc fa96 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040f0:	235e      	movs	r3, #94	; 0x5e
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	2220      	movs	r2, #32
 80040fe:	4013      	ands	r3, r2
 8004100:	d000      	beq.n	8004104 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004102:	e70c      	b.n	8003f1e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004104:	204e      	movs	r0, #78	; 0x4e
 8004106:	183b      	adds	r3, r7, r0
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	215e      	movs	r1, #94	; 0x5e
 800410c:	5a52      	ldrh	r2, [r2, r1]
 800410e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004110:	0001      	movs	r1, r0
 8004112:	187b      	adds	r3, r7, r1
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2268      	movs	r2, #104	; 0x68
 800411e:	5a9b      	ldrh	r3, [r3, r2]
 8004120:	187a      	adds	r2, r7, r1
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d23d      	bcs.n	80041a4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	60bb      	str	r3, [r7, #8]
  return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
 8004132:	2301      	movs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	491a      	ldr	r1, [pc, #104]	; (80041b4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800414a:	400a      	ands	r2, r1
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800415e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004160:	f3ef 8310 	mrs	r3, PRIMASK
 8004164:	617b      	str	r3, [r7, #20]
  return(result);
 8004166:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
 800416a:	2301      	movs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2120      	movs	r1, #32
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004192:	e007      	b.n	80041a4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2108      	movs	r1, #8
 80041a0:	430a      	orrs	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b01c      	add	sp, #112	; 0x70
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	fffffeff 	.word	0xfffffeff
 80041b0:	effffffe 	.word	0xeffffffe
 80041b4:	efffffff 	.word	0xefffffff
 80041b8:	08003c01 	.word	0x08003c01

080041bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b09e      	sub	sp, #120	; 0x78
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80041c4:	2372      	movs	r3, #114	; 0x72
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	2160      	movs	r1, #96	; 0x60
 80041cc:	5a52      	ldrh	r2, [r2, r1]
 80041ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2288      	movs	r2, #136	; 0x88
 80041ec:	589b      	ldr	r3, [r3, r2]
 80041ee:	2b22      	cmp	r3, #34	; 0x22
 80041f0:	d000      	beq.n	80041f4 <UART_RxISR_16BIT_FIFOEN+0x38>
 80041f2:	e141      	b.n	8004478 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041f4:	2366      	movs	r3, #102	; 0x66
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	2168      	movs	r1, #104	; 0x68
 80041fc:	5a52      	ldrh	r2, [r2, r1]
 80041fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004200:	e0e8      	b.n	80043d4 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004208:	2164      	movs	r1, #100	; 0x64
 800420a:	187b      	adds	r3, r7, r1
 800420c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004214:	187b      	adds	r3, r7, r1
 8004216:	2272      	movs	r2, #114	; 0x72
 8004218:	18ba      	adds	r2, r7, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	4013      	ands	r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	225e      	movs	r2, #94	; 0x5e
 8004234:	5a9b      	ldrh	r3, [r3, r2]
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b299      	uxth	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	225e      	movs	r2, #94	; 0x5e
 8004240:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800424a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424c:	2207      	movs	r2, #7
 800424e:	4013      	ands	r3, r2
 8004250:	d049      	beq.n	80042e6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d010      	beq.n	800427c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800425a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d00b      	beq.n	800427c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	228c      	movs	r2, #140	; 0x8c
 8004270:	589b      	ldr	r3, [r3, r2]
 8004272:	2201      	movs	r2, #1
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	218c      	movs	r1, #140	; 0x8c
 800427a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	d00f      	beq.n	80042a4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004286:	2201      	movs	r2, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	228c      	movs	r2, #140	; 0x8c
 8004298:	589b      	ldr	r3, [r3, r2]
 800429a:	2204      	movs	r2, #4
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	218c      	movs	r1, #140	; 0x8c
 80042a2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00f      	beq.n	80042cc <UART_RxISR_16BIT_FIFOEN+0x110>
 80042ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ae:	2201      	movs	r2, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00b      	beq.n	80042cc <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2204      	movs	r2, #4
 80042ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	228c      	movs	r2, #140	; 0x8c
 80042c0:	589b      	ldr	r3, [r3, r2]
 80042c2:	2202      	movs	r2, #2
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	218c      	movs	r1, #140	; 0x8c
 80042ca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	228c      	movs	r2, #140	; 0x8c
 80042d0:	589b      	ldr	r3, [r3, r2]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fe fbd9 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	228c      	movs	r2, #140	; 0x8c
 80042e2:	2100      	movs	r1, #0
 80042e4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	225e      	movs	r2, #94	; 0x5e
 80042ea:	5a9b      	ldrh	r3, [r3, r2]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d170      	bne.n	80043d4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fc:	2301      	movs	r3, #1
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	495f      	ldr	r1, [pc, #380]	; (8004490 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800432c:	65bb      	str	r3, [r7, #88]	; 0x58
 800432e:	2301      	movs	r3, #1
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4953      	ldr	r1, [pc, #332]	; (8004494 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004346:	400a      	ands	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2288      	movs	r2, #136	; 0x88
 800435a:	2120      	movs	r1, #32
 800435c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d12f      	bne.n	80043cc <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004372:	f3ef 8310 	mrs	r3, PRIMASK
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
 800437c:	2301      	movs	r3, #1
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2110      	movs	r1, #16
 8004394:	438a      	bics	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2210      	movs	r2, #16
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d103      	bne.n	80043ba <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	225c      	movs	r2, #92	; 0x5c
 80043be:	5a9a      	ldrh	r2, [r3, r2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe fb6b 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
 80043ca:	e003      	b.n	80043d4 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fc f924 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043d4:	2366      	movs	r3, #102	; 0x66
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80043de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e0:	2220      	movs	r2, #32
 80043e2:	4013      	ands	r3, r2
 80043e4:	d000      	beq.n	80043e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80043e6:	e70c      	b.n	8004202 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80043e8:	2052      	movs	r0, #82	; 0x52
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	215e      	movs	r1, #94	; 0x5e
 80043f0:	5a52      	ldrh	r2, [r2, r1]
 80043f2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043f4:	0001      	movs	r1, r0
 80043f6:	187b      	adds	r3, r7, r1
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d044      	beq.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2268      	movs	r2, #104	; 0x68
 8004402:	5a9b      	ldrh	r3, [r3, r2]
 8004404:	187a      	adds	r2, r7, r1
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d23d      	bcs.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440c:	f3ef 8310 	mrs	r3, PRIMASK
 8004410:	60fb      	str	r3, [r7, #12]
  return(result);
 8004412:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004416:	2301      	movs	r3, #1
 8004418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	491a      	ldr	r1, [pc, #104]	; (8004498 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800442e:	400a      	ands	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004442:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004444:	f3ef 8310 	mrs	r3, PRIMASK
 8004448:	61bb      	str	r3, [r7, #24]
  return(result);
 800444a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800444c:	64bb      	str	r3, [r7, #72]	; 0x48
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f383 8810 	msr	PRIMASK, r3
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2120      	movs	r1, #32
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004476:	e007      	b.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2108      	movs	r1, #8
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b01e      	add	sp, #120	; 0x78
 800448e:	bd80      	pop	{r7, pc}
 8004490:	fffffeff 	.word	0xfffffeff
 8004494:	effffffe 	.word	0xeffffffe
 8004498:	efffffff 	.word	0xefffffff
 800449c:	08003d6d 	.word	0x08003d6d

080044a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2280      	movs	r2, #128	; 0x80
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e027      	b.n	8004536 <HAL_UARTEx_DisableFifoMode+0x66>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2284      	movs	r2, #132	; 0x84
 80044f2:	2124      	movs	r1, #36	; 0x24
 80044f4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	438a      	bics	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2284      	movs	r2, #132	; 0x84
 8004528:	2120      	movs	r1, #32
 800452a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b004      	add	sp, #16
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	dfffffff 	.word	0xdfffffff

08004544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004558:	2302      	movs	r3, #2
 800455a:	e02e      	b.n	80045ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	2101      	movs	r1, #1
 8004562:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2284      	movs	r2, #132	; 0x84
 8004568:	2124      	movs	r1, #36	; 0x24
 800456a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	08d9      	lsrs	r1, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f854 	bl	8004648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2284      	movs	r2, #132	; 0x84
 80045ac:	2120      	movs	r1, #32
 80045ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	5c9b      	ldrb	r3, [r3, r2]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e02f      	b.n	800463c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	2101      	movs	r1, #1
 80045e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2284      	movs	r2, #132	; 0x84
 80045e8:	2124      	movs	r1, #36	; 0x24
 80045ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2101      	movs	r1, #1
 8004600:	438a      	bics	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800460c:	4013      	ands	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f000 f813 	bl	8004648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2284      	movs	r2, #132	; 0x84
 800462e:	2120      	movs	r1, #32
 8004630:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}
 8004644:	f1ffffff 	.word	0xf1ffffff

08004648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	226a      	movs	r2, #106	; 0x6a
 800465c:	2101      	movs	r1, #1
 800465e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2268      	movs	r2, #104	; 0x68
 8004664:	2101      	movs	r1, #1
 8004666:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004668:	e043      	b.n	80046f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800466a:	260f      	movs	r6, #15
 800466c:	19bb      	adds	r3, r7, r6
 800466e:	2208      	movs	r2, #8
 8004670:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004672:	200e      	movs	r0, #14
 8004674:	183b      	adds	r3, r7, r0
 8004676:	2208      	movs	r2, #8
 8004678:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	0e5b      	lsrs	r3, r3, #25
 8004682:	b2da      	uxtb	r2, r3
 8004684:	240d      	movs	r4, #13
 8004686:	193b      	adds	r3, r7, r4
 8004688:	2107      	movs	r1, #7
 800468a:	400a      	ands	r2, r1
 800468c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	0f5b      	lsrs	r3, r3, #29
 8004696:	b2da      	uxtb	r2, r3
 8004698:	250c      	movs	r5, #12
 800469a:	197b      	adds	r3, r7, r5
 800469c:	2107      	movs	r1, #7
 800469e:	400a      	ands	r2, r1
 80046a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046a2:	183b      	adds	r3, r7, r0
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	197a      	adds	r2, r7, r5
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	4914      	ldr	r1, [pc, #80]	; (80046fc <UARTEx_SetNbDataToProcess+0xb4>)
 80046ac:	5c8a      	ldrb	r2, [r1, r2]
 80046ae:	435a      	muls	r2, r3
 80046b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80046b2:	197b      	adds	r3, r7, r5
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4a12      	ldr	r2, [pc, #72]	; (8004700 <UARTEx_SetNbDataToProcess+0xb8>)
 80046b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ba:	0019      	movs	r1, r3
 80046bc:	f7fb fdac 	bl	8000218 <__divsi3>
 80046c0:	0003      	movs	r3, r0
 80046c2:	b299      	uxth	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	226a      	movs	r2, #106	; 0x6a
 80046c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046ca:	19bb      	adds	r3, r7, r6
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	193a      	adds	r2, r7, r4
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	490a      	ldr	r1, [pc, #40]	; (80046fc <UARTEx_SetNbDataToProcess+0xb4>)
 80046d4:	5c8a      	ldrb	r2, [r1, r2]
 80046d6:	435a      	muls	r2, r3
 80046d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80046da:	193b      	adds	r3, r7, r4
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <UARTEx_SetNbDataToProcess+0xb8>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046e2:	0019      	movs	r1, r3
 80046e4:	f7fb fd98 	bl	8000218 <__divsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	b299      	uxth	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2268      	movs	r2, #104	; 0x68
 80046f0:	5299      	strh	r1, [r3, r2]
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b005      	add	sp, #20
 80046f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	080047ec 	.word	0x080047ec
 8004700:	080047f4 	.word	0x080047f4

08004704 <__libc_init_array>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	2600      	movs	r6, #0
 8004708:	4d0c      	ldr	r5, [pc, #48]	; (800473c <__libc_init_array+0x38>)
 800470a:	4c0d      	ldr	r4, [pc, #52]	; (8004740 <__libc_init_array+0x3c>)
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	42a6      	cmp	r6, r4
 8004712:	d109      	bne.n	8004728 <__libc_init_array+0x24>
 8004714:	2600      	movs	r6, #0
 8004716:	f000 f821 	bl	800475c <_init>
 800471a:	4d0a      	ldr	r5, [pc, #40]	; (8004744 <__libc_init_array+0x40>)
 800471c:	4c0a      	ldr	r4, [pc, #40]	; (8004748 <__libc_init_array+0x44>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	42a6      	cmp	r6, r4
 8004724:	d105      	bne.n	8004732 <__libc_init_array+0x2e>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	00b3      	lsls	r3, r6, #2
 800472a:	58eb      	ldr	r3, [r5, r3]
 800472c:	4798      	blx	r3
 800472e:	3601      	adds	r6, #1
 8004730:	e7ee      	b.n	8004710 <__libc_init_array+0xc>
 8004732:	00b3      	lsls	r3, r6, #2
 8004734:	58eb      	ldr	r3, [r5, r3]
 8004736:	4798      	blx	r3
 8004738:	3601      	adds	r6, #1
 800473a:	e7f2      	b.n	8004722 <__libc_init_array+0x1e>
 800473c:	08004804 	.word	0x08004804
 8004740:	08004804 	.word	0x08004804
 8004744:	08004804 	.word	0x08004804
 8004748:	08004808 	.word	0x08004808

0800474c <memset>:
 800474c:	0003      	movs	r3, r0
 800474e:	1882      	adds	r2, r0, r2
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	7019      	strb	r1, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
