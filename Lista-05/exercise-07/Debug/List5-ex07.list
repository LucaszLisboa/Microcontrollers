
List5-ex07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800ab88  0800ab88  0001ab88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001dc  0800b300  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800b300  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a71  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bf  00000000  00000000  00031c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d263  00000000  00000000  00035a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edd9  00000000  00000000  00052cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb5b2  00000000  00000000  00061acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  0011d0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ab6c 	.word	0x0800ab6c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	0800ab6c 	.word	0x0800ab6c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fac7 	bl	80019cc <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa11 	bl	8001870 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fab9 	bl	80019cc <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 faaf 	bl	80019cc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fa33 	bl	80018e8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fa29 	bl	80018e8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 fa68 	bl	80029d8 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 fa63 	bl	80029d8 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	4646      	mov	r6, r8
 8000680:	46d6      	mov	lr, sl
 8000682:	464f      	mov	r7, r9
 8000684:	024d      	lsls	r5, r1, #9
 8000686:	0242      	lsls	r2, r0, #9
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	0a52      	lsrs	r2, r2, #9
 800068c:	0a6e      	lsrs	r6, r5, #9
 800068e:	0047      	lsls	r7, r0, #1
 8000690:	46b0      	mov	r8, r6
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	004e      	lsls	r6, r1, #1
 8000696:	0fc4      	lsrs	r4, r0, #31
 8000698:	00d0      	lsls	r0, r2, #3
 800069a:	4694      	mov	ip, r2
 800069c:	003b      	movs	r3, r7
 800069e:	4682      	mov	sl, r0
 80006a0:	0e36      	lsrs	r6, r6, #24
 80006a2:	0fc9      	lsrs	r1, r1, #31
 80006a4:	09ad      	lsrs	r5, r5, #6
 80006a6:	428c      	cmp	r4, r1
 80006a8:	d06d      	beq.n	8000786 <__aeabi_fadd+0x10a>
 80006aa:	1bb8      	subs	r0, r7, r6
 80006ac:	4681      	mov	r9, r0
 80006ae:	2800      	cmp	r0, #0
 80006b0:	dd4d      	ble.n	800074e <__aeabi_fadd+0xd2>
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x3c>
 80006b6:	e088      	b.n	80007ca <__aeabi_fadd+0x14e>
 80006b8:	2fff      	cmp	r7, #255	; 0xff
 80006ba:	d05a      	beq.n	8000772 <__aeabi_fadd+0xf6>
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	04db      	lsls	r3, r3, #19
 80006c0:	431d      	orrs	r5, r3
 80006c2:	464b      	mov	r3, r9
 80006c4:	2201      	movs	r2, #1
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dc0a      	bgt.n	80006e0 <__aeabi_fadd+0x64>
 80006ca:	002b      	movs	r3, r5
 80006cc:	464a      	mov	r2, r9
 80006ce:	4649      	mov	r1, r9
 80006d0:	40d3      	lsrs	r3, r2
 80006d2:	2220      	movs	r2, #32
 80006d4:	1a52      	subs	r2, r2, r1
 80006d6:	4095      	lsls	r5, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	1e55      	subs	r5, r2, #1
 80006dc:	41aa      	sbcs	r2, r5
 80006de:	431a      	orrs	r2, r3
 80006e0:	4653      	mov	r3, sl
 80006e2:	1a9a      	subs	r2, r3, r2
 80006e4:	0153      	lsls	r3, r2, #5
 80006e6:	d400      	bmi.n	80006ea <__aeabi_fadd+0x6e>
 80006e8:	e0b9      	b.n	800085e <__aeabi_fadd+0x1e2>
 80006ea:	0192      	lsls	r2, r2, #6
 80006ec:	0996      	lsrs	r6, r2, #6
 80006ee:	0030      	movs	r0, r6
 80006f0:	f002 f954 	bl	800299c <__clzsi2>
 80006f4:	3805      	subs	r0, #5
 80006f6:	4086      	lsls	r6, r0
 80006f8:	4287      	cmp	r7, r0
 80006fa:	dd00      	ble.n	80006fe <__aeabi_fadd+0x82>
 80006fc:	e0d4      	b.n	80008a8 <__aeabi_fadd+0x22c>
 80006fe:	0033      	movs	r3, r6
 8000700:	1bc7      	subs	r7, r0, r7
 8000702:	2020      	movs	r0, #32
 8000704:	3701      	adds	r7, #1
 8000706:	40fb      	lsrs	r3, r7
 8000708:	1bc7      	subs	r7, r0, r7
 800070a:	40be      	lsls	r6, r7
 800070c:	0032      	movs	r2, r6
 800070e:	1e56      	subs	r6, r2, #1
 8000710:	41b2      	sbcs	r2, r6
 8000712:	2700      	movs	r7, #0
 8000714:	431a      	orrs	r2, r3
 8000716:	0753      	lsls	r3, r2, #29
 8000718:	d004      	beq.n	8000724 <__aeabi_fadd+0xa8>
 800071a:	230f      	movs	r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	2b04      	cmp	r3, #4
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0xa8>
 8000722:	3204      	adds	r2, #4
 8000724:	0153      	lsls	r3, r2, #5
 8000726:	d400      	bmi.n	800072a <__aeabi_fadd+0xae>
 8000728:	e09c      	b.n	8000864 <__aeabi_fadd+0x1e8>
 800072a:	1c7b      	adds	r3, r7, #1
 800072c:	2ffe      	cmp	r7, #254	; 0xfe
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xb6>
 8000730:	e09a      	b.n	8000868 <__aeabi_fadd+0x1ec>
 8000732:	0192      	lsls	r2, r2, #6
 8000734:	0a52      	lsrs	r2, r2, #9
 8000736:	4694      	mov	ip, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	05d8      	lsls	r0, r3, #23
 800073c:	4663      	mov	r3, ip
 800073e:	07e4      	lsls	r4, r4, #31
 8000740:	4318      	orrs	r0, r3
 8000742:	4320      	orrs	r0, r4
 8000744:	bce0      	pop	{r5, r6, r7}
 8000746:	46ba      	mov	sl, r7
 8000748:	46b1      	mov	r9, r6
 800074a:	46a8      	mov	r8, r5
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074e:	2800      	cmp	r0, #0
 8000750:	d049      	beq.n	80007e6 <__aeabi_fadd+0x16a>
 8000752:	1bf3      	subs	r3, r6, r7
 8000754:	2f00      	cmp	r7, #0
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0xde>
 8000758:	e0b6      	b.n	80008c8 <__aeabi_fadd+0x24c>
 800075a:	4652      	mov	r2, sl
 800075c:	2a00      	cmp	r2, #0
 800075e:	d060      	beq.n	8000822 <__aeabi_fadd+0x1a6>
 8000760:	3b01      	subs	r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0xec>
 8000766:	e0fc      	b.n	8000962 <__aeabi_fadd+0x2e6>
 8000768:	2eff      	cmp	r6, #255	; 0xff
 800076a:	d000      	beq.n	800076e <__aeabi_fadd+0xf2>
 800076c:	e0b4      	b.n	80008d8 <__aeabi_fadd+0x25c>
 800076e:	000c      	movs	r4, r1
 8000770:	4642      	mov	r2, r8
 8000772:	2a00      	cmp	r2, #0
 8000774:	d078      	beq.n	8000868 <__aeabi_fadd+0x1ec>
 8000776:	2080      	movs	r0, #128	; 0x80
 8000778:	03c0      	lsls	r0, r0, #15
 800077a:	4310      	orrs	r0, r2
 800077c:	0242      	lsls	r2, r0, #9
 800077e:	0a53      	lsrs	r3, r2, #9
 8000780:	469c      	mov	ip, r3
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	e7d9      	b.n	800073a <__aeabi_fadd+0xbe>
 8000786:	1bb9      	subs	r1, r7, r6
 8000788:	2900      	cmp	r1, #0
 800078a:	dd71      	ble.n	8000870 <__aeabi_fadd+0x1f4>
 800078c:	2e00      	cmp	r6, #0
 800078e:	d03f      	beq.n	8000810 <__aeabi_fadd+0x194>
 8000790:	2fff      	cmp	r7, #255	; 0xff
 8000792:	d0ee      	beq.n	8000772 <__aeabi_fadd+0xf6>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	431d      	orrs	r5, r3
 800079a:	2201      	movs	r2, #1
 800079c:	291b      	cmp	r1, #27
 800079e:	dc07      	bgt.n	80007b0 <__aeabi_fadd+0x134>
 80007a0:	002a      	movs	r2, r5
 80007a2:	2320      	movs	r3, #32
 80007a4:	40ca      	lsrs	r2, r1
 80007a6:	1a59      	subs	r1, r3, r1
 80007a8:	408d      	lsls	r5, r1
 80007aa:	1e6b      	subs	r3, r5, #1
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	432a      	orrs	r2, r5
 80007b0:	4452      	add	r2, sl
 80007b2:	0153      	lsls	r3, r2, #5
 80007b4:	d553      	bpl.n	800085e <__aeabi_fadd+0x1e2>
 80007b6:	3701      	adds	r7, #1
 80007b8:	2fff      	cmp	r7, #255	; 0xff
 80007ba:	d055      	beq.n	8000868 <__aeabi_fadd+0x1ec>
 80007bc:	2301      	movs	r3, #1
 80007be:	497b      	ldr	r1, [pc, #492]	; (80009ac <__aeabi_fadd+0x330>)
 80007c0:	4013      	ands	r3, r2
 80007c2:	0852      	lsrs	r2, r2, #1
 80007c4:	400a      	ands	r2, r1
 80007c6:	431a      	orrs	r2, r3
 80007c8:	e7a5      	b.n	8000716 <__aeabi_fadd+0x9a>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d02c      	beq.n	8000828 <__aeabi_fadd+0x1ac>
 80007ce:	2301      	movs	r3, #1
 80007d0:	425b      	negs	r3, r3
 80007d2:	469c      	mov	ip, r3
 80007d4:	44e1      	add	r9, ip
 80007d6:	464b      	mov	r3, r9
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x162>
 80007dc:	e0ad      	b.n	800093a <__aeabi_fadd+0x2be>
 80007de:	2fff      	cmp	r7, #255	; 0xff
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0x168>
 80007e2:	e76e      	b.n	80006c2 <__aeabi_fadd+0x46>
 80007e4:	e7c5      	b.n	8000772 <__aeabi_fadd+0xf6>
 80007e6:	20fe      	movs	r0, #254	; 0xfe
 80007e8:	1c7e      	adds	r6, r7, #1
 80007ea:	4230      	tst	r0, r6
 80007ec:	d160      	bne.n	80008b0 <__aeabi_fadd+0x234>
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x178>
 80007f2:	e093      	b.n	800091c <__aeabi_fadd+0x2a0>
 80007f4:	4652      	mov	r2, sl
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x180>
 80007fa:	e0b6      	b.n	800096a <__aeabi_fadd+0x2ee>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d09c      	beq.n	800073a <__aeabi_fadd+0xbe>
 8000800:	1b52      	subs	r2, r2, r5
 8000802:	0150      	lsls	r0, r2, #5
 8000804:	d400      	bmi.n	8000808 <__aeabi_fadd+0x18c>
 8000806:	e0c3      	b.n	8000990 <__aeabi_fadd+0x314>
 8000808:	4653      	mov	r3, sl
 800080a:	000c      	movs	r4, r1
 800080c:	1aea      	subs	r2, r5, r3
 800080e:	e782      	b.n	8000716 <__aeabi_fadd+0x9a>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d009      	beq.n	8000828 <__aeabi_fadd+0x1ac>
 8000814:	3901      	subs	r1, #1
 8000816:	2900      	cmp	r1, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x1a0>
 800081a:	e08b      	b.n	8000934 <__aeabi_fadd+0x2b8>
 800081c:	2fff      	cmp	r7, #255	; 0xff
 800081e:	d1bc      	bne.n	800079a <__aeabi_fadd+0x11e>
 8000820:	e7a7      	b.n	8000772 <__aeabi_fadd+0xf6>
 8000822:	000c      	movs	r4, r1
 8000824:	4642      	mov	r2, r8
 8000826:	0037      	movs	r7, r6
 8000828:	2fff      	cmp	r7, #255	; 0xff
 800082a:	d0a2      	beq.n	8000772 <__aeabi_fadd+0xf6>
 800082c:	0252      	lsls	r2, r2, #9
 800082e:	0a53      	lsrs	r3, r2, #9
 8000830:	469c      	mov	ip, r3
 8000832:	b2fb      	uxtb	r3, r7
 8000834:	e781      	b.n	800073a <__aeabi_fadd+0xbe>
 8000836:	21fe      	movs	r1, #254	; 0xfe
 8000838:	3701      	adds	r7, #1
 800083a:	4239      	tst	r1, r7
 800083c:	d165      	bne.n	800090a <__aeabi_fadd+0x28e>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d17e      	bne.n	8000940 <__aeabi_fadd+0x2c4>
 8000842:	2800      	cmp	r0, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x1cc>
 8000846:	e0aa      	b.n	800099e <__aeabi_fadd+0x322>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x1d2>
 800084c:	e775      	b.n	800073a <__aeabi_fadd+0xbe>
 800084e:	002a      	movs	r2, r5
 8000850:	4452      	add	r2, sl
 8000852:	2700      	movs	r7, #0
 8000854:	0153      	lsls	r3, r2, #5
 8000856:	d502      	bpl.n	800085e <__aeabi_fadd+0x1e2>
 8000858:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <__aeabi_fadd+0x334>)
 800085a:	3701      	adds	r7, #1
 800085c:	401a      	ands	r2, r3
 800085e:	0753      	lsls	r3, r2, #29
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x1e8>
 8000862:	e75a      	b.n	800071a <__aeabi_fadd+0x9e>
 8000864:	08d2      	lsrs	r2, r2, #3
 8000866:	e7df      	b.n	8000828 <__aeabi_fadd+0x1ac>
 8000868:	2200      	movs	r2, #0
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	4694      	mov	ip, r2
 800086e:	e764      	b.n	800073a <__aeabi_fadd+0xbe>
 8000870:	2900      	cmp	r1, #0
 8000872:	d0e0      	beq.n	8000836 <__aeabi_fadd+0x1ba>
 8000874:	1bf3      	subs	r3, r6, r7
 8000876:	2f00      	cmp	r7, #0
 8000878:	d03e      	beq.n	80008f8 <__aeabi_fadd+0x27c>
 800087a:	2eff      	cmp	r6, #255	; 0xff
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x204>
 800087e:	e777      	b.n	8000770 <__aeabi_fadd+0xf4>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0001      	movs	r1, r0
 8000884:	04d2      	lsls	r2, r2, #19
 8000886:	4311      	orrs	r1, r2
 8000888:	468a      	mov	sl, r1
 800088a:	2201      	movs	r2, #1
 800088c:	2b1b      	cmp	r3, #27
 800088e:	dc08      	bgt.n	80008a2 <__aeabi_fadd+0x226>
 8000890:	4652      	mov	r2, sl
 8000892:	2120      	movs	r1, #32
 8000894:	4650      	mov	r0, sl
 8000896:	40da      	lsrs	r2, r3
 8000898:	1acb      	subs	r3, r1, r3
 800089a:	4098      	lsls	r0, r3
 800089c:	1e43      	subs	r3, r0, #1
 800089e:	4198      	sbcs	r0, r3
 80008a0:	4302      	orrs	r2, r0
 80008a2:	0037      	movs	r7, r6
 80008a4:	1952      	adds	r2, r2, r5
 80008a6:	e784      	b.n	80007b2 <__aeabi_fadd+0x136>
 80008a8:	4a41      	ldr	r2, [pc, #260]	; (80009b0 <__aeabi_fadd+0x334>)
 80008aa:	1a3f      	subs	r7, r7, r0
 80008ac:	4032      	ands	r2, r6
 80008ae:	e732      	b.n	8000716 <__aeabi_fadd+0x9a>
 80008b0:	4653      	mov	r3, sl
 80008b2:	1b5e      	subs	r6, r3, r5
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d42d      	bmi.n	8000914 <__aeabi_fadd+0x298>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x242>
 80008bc:	e717      	b.n	80006ee <__aeabi_fadd+0x72>
 80008be:	2200      	movs	r2, #0
 80008c0:	2400      	movs	r4, #0
 80008c2:	2300      	movs	r3, #0
 80008c4:	4694      	mov	ip, r2
 80008c6:	e738      	b.n	800073a <__aeabi_fadd+0xbe>
 80008c8:	2eff      	cmp	r6, #255	; 0xff
 80008ca:	d100      	bne.n	80008ce <__aeabi_fadd+0x252>
 80008cc:	e74f      	b.n	800076e <__aeabi_fadd+0xf2>
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4650      	mov	r0, sl
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	4310      	orrs	r0, r2
 80008d6:	4682      	mov	sl, r0
 80008d8:	2201      	movs	r2, #1
 80008da:	2b1b      	cmp	r3, #27
 80008dc:	dc08      	bgt.n	80008f0 <__aeabi_fadd+0x274>
 80008de:	4652      	mov	r2, sl
 80008e0:	2420      	movs	r4, #32
 80008e2:	4650      	mov	r0, sl
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	1ae3      	subs	r3, r4, r3
 80008e8:	4098      	lsls	r0, r3
 80008ea:	1e43      	subs	r3, r0, #1
 80008ec:	4198      	sbcs	r0, r3
 80008ee:	4302      	orrs	r2, r0
 80008f0:	000c      	movs	r4, r1
 80008f2:	0037      	movs	r7, r6
 80008f4:	1aaa      	subs	r2, r5, r2
 80008f6:	e6f5      	b.n	80006e4 <__aeabi_fadd+0x68>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d093      	beq.n	8000824 <__aeabi_fadd+0x1a8>
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d04f      	beq.n	80009a2 <__aeabi_fadd+0x326>
 8000902:	2eff      	cmp	r6, #255	; 0xff
 8000904:	d1c1      	bne.n	800088a <__aeabi_fadd+0x20e>
 8000906:	4642      	mov	r2, r8
 8000908:	e733      	b.n	8000772 <__aeabi_fadd+0xf6>
 800090a:	2fff      	cmp	r7, #255	; 0xff
 800090c:	d0ac      	beq.n	8000868 <__aeabi_fadd+0x1ec>
 800090e:	4455      	add	r5, sl
 8000910:	086a      	lsrs	r2, r5, #1
 8000912:	e7a4      	b.n	800085e <__aeabi_fadd+0x1e2>
 8000914:	4653      	mov	r3, sl
 8000916:	000c      	movs	r4, r1
 8000918:	1aee      	subs	r6, r5, r3
 800091a:	e6e8      	b.n	80006ee <__aeabi_fadd+0x72>
 800091c:	4653      	mov	r3, sl
 800091e:	2b00      	cmp	r3, #0
 8000920:	d128      	bne.n	8000974 <__aeabi_fadd+0x2f8>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_fadd+0x2ac>
 8000926:	e722      	b.n	800076e <__aeabi_fadd+0xf2>
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	03db      	lsls	r3, r3, #15
 800092c:	469c      	mov	ip, r3
 800092e:	2400      	movs	r4, #0
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	e702      	b.n	800073a <__aeabi_fadd+0xbe>
 8000934:	002a      	movs	r2, r5
 8000936:	4452      	add	r2, sl
 8000938:	e73b      	b.n	80007b2 <__aeabi_fadd+0x136>
 800093a:	4653      	mov	r3, sl
 800093c:	1b5a      	subs	r2, r3, r5
 800093e:	e6d1      	b.n	80006e4 <__aeabi_fadd+0x68>
 8000940:	2800      	cmp	r0, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fadd+0x2ca>
 8000944:	e714      	b.n	8000770 <__aeabi_fadd+0xf4>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d100      	bne.n	800094c <__aeabi_fadd+0x2d0>
 800094a:	e712      	b.n	8000772 <__aeabi_fadd+0xf6>
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	03db      	lsls	r3, r3, #15
 8000950:	421a      	tst	r2, r3
 8000952:	d100      	bne.n	8000956 <__aeabi_fadd+0x2da>
 8000954:	e70d      	b.n	8000772 <__aeabi_fadd+0xf6>
 8000956:	4641      	mov	r1, r8
 8000958:	4219      	tst	r1, r3
 800095a:	d000      	beq.n	800095e <__aeabi_fadd+0x2e2>
 800095c:	e709      	b.n	8000772 <__aeabi_fadd+0xf6>
 800095e:	4642      	mov	r2, r8
 8000960:	e707      	b.n	8000772 <__aeabi_fadd+0xf6>
 8000962:	000c      	movs	r4, r1
 8000964:	0037      	movs	r7, r6
 8000966:	1aaa      	subs	r2, r5, r2
 8000968:	e6bc      	b.n	80006e4 <__aeabi_fadd+0x68>
 800096a:	2d00      	cmp	r5, #0
 800096c:	d013      	beq.n	8000996 <__aeabi_fadd+0x31a>
 800096e:	000c      	movs	r4, r1
 8000970:	46c4      	mov	ip, r8
 8000972:	e6e2      	b.n	800073a <__aeabi_fadd+0xbe>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fadd+0x2fe>
 8000978:	e6fb      	b.n	8000772 <__aeabi_fadd+0xf6>
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	03db      	lsls	r3, r3, #15
 800097e:	421a      	tst	r2, r3
 8000980:	d100      	bne.n	8000984 <__aeabi_fadd+0x308>
 8000982:	e6f6      	b.n	8000772 <__aeabi_fadd+0xf6>
 8000984:	4640      	mov	r0, r8
 8000986:	4218      	tst	r0, r3
 8000988:	d000      	beq.n	800098c <__aeabi_fadd+0x310>
 800098a:	e6f2      	b.n	8000772 <__aeabi_fadd+0xf6>
 800098c:	000c      	movs	r4, r1
 800098e:	e6ef      	b.n	8000770 <__aeabi_fadd+0xf4>
 8000990:	2a00      	cmp	r2, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_fadd+0x31a>
 8000994:	e763      	b.n	800085e <__aeabi_fadd+0x1e2>
 8000996:	2200      	movs	r2, #0
 8000998:	2400      	movs	r4, #0
 800099a:	4694      	mov	ip, r2
 800099c:	e6cd      	b.n	800073a <__aeabi_fadd+0xbe>
 800099e:	46c4      	mov	ip, r8
 80009a0:	e6cb      	b.n	800073a <__aeabi_fadd+0xbe>
 80009a2:	002a      	movs	r2, r5
 80009a4:	0037      	movs	r7, r6
 80009a6:	4452      	add	r2, sl
 80009a8:	e703      	b.n	80007b2 <__aeabi_fadd+0x136>
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	7dffffff 	.word	0x7dffffff
 80009b0:	fbffffff 	.word	0xfbffffff

080009b4 <__aeabi_fdiv>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	464f      	mov	r7, r9
 80009b8:	4646      	mov	r6, r8
 80009ba:	46d6      	mov	lr, sl
 80009bc:	0245      	lsls	r5, r0, #9
 80009be:	b5c0      	push	{r6, r7, lr}
 80009c0:	0047      	lsls	r7, r0, #1
 80009c2:	1c0c      	adds	r4, r1, #0
 80009c4:	0a6d      	lsrs	r5, r5, #9
 80009c6:	0e3f      	lsrs	r7, r7, #24
 80009c8:	0fc6      	lsrs	r6, r0, #31
 80009ca:	2f00      	cmp	r7, #0
 80009cc:	d066      	beq.n	8000a9c <__aeabi_fdiv+0xe8>
 80009ce:	2fff      	cmp	r7, #255	; 0xff
 80009d0:	d06c      	beq.n	8000aac <__aeabi_fdiv+0xf8>
 80009d2:	2300      	movs	r3, #0
 80009d4:	00ea      	lsls	r2, r5, #3
 80009d6:	2580      	movs	r5, #128	; 0x80
 80009d8:	4699      	mov	r9, r3
 80009da:	469a      	mov	sl, r3
 80009dc:	04ed      	lsls	r5, r5, #19
 80009de:	4315      	orrs	r5, r2
 80009e0:	3f7f      	subs	r7, #127	; 0x7f
 80009e2:	0260      	lsls	r0, r4, #9
 80009e4:	0061      	lsls	r1, r4, #1
 80009e6:	0a43      	lsrs	r3, r0, #9
 80009e8:	4698      	mov	r8, r3
 80009ea:	0e09      	lsrs	r1, r1, #24
 80009ec:	0fe4      	lsrs	r4, r4, #31
 80009ee:	2900      	cmp	r1, #0
 80009f0:	d048      	beq.n	8000a84 <__aeabi_fdiv+0xd0>
 80009f2:	29ff      	cmp	r1, #255	; 0xff
 80009f4:	d010      	beq.n	8000a18 <__aeabi_fdiv+0x64>
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	00d8      	lsls	r0, r3, #3
 80009fa:	04d2      	lsls	r2, r2, #19
 80009fc:	4302      	orrs	r2, r0
 80009fe:	4690      	mov	r8, r2
 8000a00:	2000      	movs	r0, #0
 8000a02:	397f      	subs	r1, #127	; 0x7f
 8000a04:	464a      	mov	r2, r9
 8000a06:	0033      	movs	r3, r6
 8000a08:	1a7f      	subs	r7, r7, r1
 8000a0a:	4302      	orrs	r2, r0
 8000a0c:	496c      	ldr	r1, [pc, #432]	; (8000bc0 <__aeabi_fdiv+0x20c>)
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	588a      	ldr	r2, [r1, r2]
 8000a12:	4063      	eors	r3, r4
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4697      	mov	pc, r2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d16d      	bne.n	8000af8 <__aeabi_fdiv+0x144>
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	3fff      	subs	r7, #255	; 0xff
 8000a20:	e033      	b.n	8000a8a <__aeabi_fdiv+0xd6>
 8000a22:	2300      	movs	r3, #0
 8000a24:	4698      	mov	r8, r3
 8000a26:	0026      	movs	r6, r4
 8000a28:	4645      	mov	r5, r8
 8000a2a:	4682      	mov	sl, r0
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fdiv+0x80>
 8000a32:	e07f      	b.n	8000b34 <__aeabi_fdiv+0x180>
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fdiv+0x86>
 8000a38:	e094      	b.n	8000b64 <__aeabi_fdiv+0x1b0>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d017      	beq.n	8000a6e <__aeabi_fdiv+0xba>
 8000a3e:	0038      	movs	r0, r7
 8000a40:	307f      	adds	r0, #127	; 0x7f
 8000a42:	2800      	cmp	r0, #0
 8000a44:	dd5f      	ble.n	8000b06 <__aeabi_fdiv+0x152>
 8000a46:	076b      	lsls	r3, r5, #29
 8000a48:	d004      	beq.n	8000a54 <__aeabi_fdiv+0xa0>
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	402b      	ands	r3, r5
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fdiv+0xa0>
 8000a52:	3504      	adds	r5, #4
 8000a54:	012b      	lsls	r3, r5, #4
 8000a56:	d503      	bpl.n	8000a60 <__aeabi_fdiv+0xac>
 8000a58:	0038      	movs	r0, r7
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <__aeabi_fdiv+0x210>)
 8000a5c:	3080      	adds	r0, #128	; 0x80
 8000a5e:	401d      	ands	r5, r3
 8000a60:	28fe      	cmp	r0, #254	; 0xfe
 8000a62:	dc67      	bgt.n	8000b34 <__aeabi_fdiv+0x180>
 8000a64:	01ad      	lsls	r5, r5, #6
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	b2c0      	uxtb	r0, r0
 8000a6a:	e002      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2500      	movs	r5, #0
 8000a72:	05c0      	lsls	r0, r0, #23
 8000a74:	4328      	orrs	r0, r5
 8000a76:	07f6      	lsls	r6, r6, #31
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	bce0      	pop	{r5, r6, r7}
 8000a7c:	46ba      	mov	sl, r7
 8000a7e:	46b1      	mov	r9, r6
 8000a80:	46a8      	mov	r8, r5
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d12b      	bne.n	8000ae0 <__aeabi_fdiv+0x12c>
 8000a88:	2001      	movs	r0, #1
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	0033      	movs	r3, r6
 8000a8e:	494e      	ldr	r1, [pc, #312]	; (8000bc8 <__aeabi_fdiv+0x214>)
 8000a90:	4302      	orrs	r2, r0
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	588a      	ldr	r2, [r1, r2]
 8000a96:	4063      	eors	r3, r4
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4697      	mov	pc, r2
 8000a9c:	2d00      	cmp	r5, #0
 8000a9e:	d113      	bne.n	8000ac8 <__aeabi_fdiv+0x114>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	2700      	movs	r7, #0
 8000aa8:	469a      	mov	sl, r3
 8000aaa:	e79a      	b.n	80009e2 <__aeabi_fdiv+0x2e>
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d105      	bne.n	8000abc <__aeabi_fdiv+0x108>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	3b06      	subs	r3, #6
 8000ab6:	27ff      	movs	r7, #255	; 0xff
 8000ab8:	469a      	mov	sl, r3
 8000aba:	e792      	b.n	80009e2 <__aeabi_fdiv+0x2e>
 8000abc:	230c      	movs	r3, #12
 8000abe:	4699      	mov	r9, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	27ff      	movs	r7, #255	; 0xff
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	e78c      	b.n	80009e2 <__aeabi_fdiv+0x2e>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	f001 ff67 	bl	800299c <__clzsi2>
 8000ace:	2776      	movs	r7, #118	; 0x76
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	409d      	lsls	r5, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	427f      	negs	r7, r7
 8000ad8:	4699      	mov	r9, r3
 8000ada:	469a      	mov	sl, r3
 8000adc:	1a3f      	subs	r7, r7, r0
 8000ade:	e780      	b.n	80009e2 <__aeabi_fdiv+0x2e>
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 ff5b 	bl	800299c <__clzsi2>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	1f43      	subs	r3, r0, #5
 8000aea:	2176      	movs	r1, #118	; 0x76
 8000aec:	409a      	lsls	r2, r3
 8000aee:	4249      	negs	r1, r1
 8000af0:	1a09      	subs	r1, r1, r0
 8000af2:	4690      	mov	r8, r2
 8000af4:	2000      	movs	r0, #0
 8000af6:	e785      	b.n	8000a04 <__aeabi_fdiv+0x50>
 8000af8:	21ff      	movs	r1, #255	; 0xff
 8000afa:	2003      	movs	r0, #3
 8000afc:	e782      	b.n	8000a04 <__aeabi_fdiv+0x50>
 8000afe:	001e      	movs	r6, r3
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	2500      	movs	r5, #0
 8000b04:	e7b5      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b06:	2301      	movs	r3, #1
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	2b1b      	cmp	r3, #27
 8000b0c:	dcaf      	bgt.n	8000a6e <__aeabi_fdiv+0xba>
 8000b0e:	379e      	adds	r7, #158	; 0x9e
 8000b10:	0029      	movs	r1, r5
 8000b12:	40bd      	lsls	r5, r7
 8000b14:	40d9      	lsrs	r1, r3
 8000b16:	1e6a      	subs	r2, r5, #1
 8000b18:	4195      	sbcs	r5, r2
 8000b1a:	430d      	orrs	r5, r1
 8000b1c:	076b      	lsls	r3, r5, #29
 8000b1e:	d004      	beq.n	8000b2a <__aeabi_fdiv+0x176>
 8000b20:	230f      	movs	r3, #15
 8000b22:	402b      	ands	r3, r5
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fdiv+0x176>
 8000b28:	3504      	adds	r5, #4
 8000b2a:	016b      	lsls	r3, r5, #5
 8000b2c:	d544      	bpl.n	8000bb8 <__aeabi_fdiv+0x204>
 8000b2e:	2001      	movs	r0, #1
 8000b30:	2500      	movs	r5, #0
 8000b32:	e79e      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b34:	20ff      	movs	r0, #255	; 0xff
 8000b36:	2500      	movs	r5, #0
 8000b38:	e79b      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b3a:	2580      	movs	r5, #128	; 0x80
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	03ed      	lsls	r5, r5, #15
 8000b42:	e796      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b44:	2300      	movs	r3, #0
 8000b46:	4698      	mov	r8, r3
 8000b48:	2080      	movs	r0, #128	; 0x80
 8000b4a:	03c0      	lsls	r0, r0, #15
 8000b4c:	4205      	tst	r5, r0
 8000b4e:	d009      	beq.n	8000b64 <__aeabi_fdiv+0x1b0>
 8000b50:	4643      	mov	r3, r8
 8000b52:	4203      	tst	r3, r0
 8000b54:	d106      	bne.n	8000b64 <__aeabi_fdiv+0x1b0>
 8000b56:	4645      	mov	r5, r8
 8000b58:	4305      	orrs	r5, r0
 8000b5a:	026d      	lsls	r5, r5, #9
 8000b5c:	0026      	movs	r6, r4
 8000b5e:	20ff      	movs	r0, #255	; 0xff
 8000b60:	0a6d      	lsrs	r5, r5, #9
 8000b62:	e786      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b64:	2080      	movs	r0, #128	; 0x80
 8000b66:	03c0      	lsls	r0, r0, #15
 8000b68:	4305      	orrs	r5, r0
 8000b6a:	026d      	lsls	r5, r5, #9
 8000b6c:	20ff      	movs	r0, #255	; 0xff
 8000b6e:	0a6d      	lsrs	r5, r5, #9
 8000b70:	e77f      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b72:	4641      	mov	r1, r8
 8000b74:	016a      	lsls	r2, r5, #5
 8000b76:	0148      	lsls	r0, r1, #5
 8000b78:	4282      	cmp	r2, r0
 8000b7a:	d219      	bcs.n	8000bb0 <__aeabi_fdiv+0x1fc>
 8000b7c:	211b      	movs	r1, #27
 8000b7e:	2500      	movs	r5, #0
 8000b80:	3f01      	subs	r7, #1
 8000b82:	2601      	movs	r6, #1
 8000b84:	0014      	movs	r4, r2
 8000b86:	006d      	lsls	r5, r5, #1
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	db01      	blt.n	8000b92 <__aeabi_fdiv+0x1de>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	d801      	bhi.n	8000b96 <__aeabi_fdiv+0x1e2>
 8000b92:	1a12      	subs	r2, r2, r0
 8000b94:	4335      	orrs	r5, r6
 8000b96:	3901      	subs	r1, #1
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	d1f3      	bne.n	8000b84 <__aeabi_fdiv+0x1d0>
 8000b9c:	1e50      	subs	r0, r2, #1
 8000b9e:	4182      	sbcs	r2, r0
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	307f      	adds	r0, #127	; 0x7f
 8000ba4:	001e      	movs	r6, r3
 8000ba6:	4315      	orrs	r5, r2
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	dd00      	ble.n	8000bae <__aeabi_fdiv+0x1fa>
 8000bac:	e74b      	b.n	8000a46 <__aeabi_fdiv+0x92>
 8000bae:	e7aa      	b.n	8000b06 <__aeabi_fdiv+0x152>
 8000bb0:	211a      	movs	r1, #26
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	1a12      	subs	r2, r2, r0
 8000bb6:	e7e4      	b.n	8000b82 <__aeabi_fdiv+0x1ce>
 8000bb8:	01ad      	lsls	r5, r5, #6
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	e758      	b.n	8000a72 <__aeabi_fdiv+0xbe>
 8000bc0:	0800aba8 	.word	0x0800aba8
 8000bc4:	f7ffffff 	.word	0xf7ffffff
 8000bc8:	0800abe8 	.word	0x0800abe8

08000bcc <__aeabi_dadd>:
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	464f      	mov	r7, r9
 8000bd0:	46d6      	mov	lr, sl
 8000bd2:	4646      	mov	r6, r8
 8000bd4:	000d      	movs	r5, r1
 8000bd6:	0001      	movs	r1, r0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	b5c0      	push	{r6, r7, lr}
 8000bdc:	0017      	movs	r7, r2
 8000bde:	032b      	lsls	r3, r5, #12
 8000be0:	0a5a      	lsrs	r2, r3, #9
 8000be2:	0f4b      	lsrs	r3, r1, #29
 8000be4:	4313      	orrs	r3, r2
 8000be6:	00ca      	lsls	r2, r1, #3
 8000be8:	4691      	mov	r9, r2
 8000bea:	0302      	lsls	r2, r0, #12
 8000bec:	006e      	lsls	r6, r5, #1
 8000bee:	0041      	lsls	r1, r0, #1
 8000bf0:	0a52      	lsrs	r2, r2, #9
 8000bf2:	0fec      	lsrs	r4, r5, #31
 8000bf4:	0f7d      	lsrs	r5, r7, #29
 8000bf6:	4315      	orrs	r5, r2
 8000bf8:	0d76      	lsrs	r6, r6, #21
 8000bfa:	0d49      	lsrs	r1, r1, #21
 8000bfc:	0fc0      	lsrs	r0, r0, #31
 8000bfe:	4682      	mov	sl, r0
 8000c00:	46ac      	mov	ip, r5
 8000c02:	00ff      	lsls	r7, r7, #3
 8000c04:	1a72      	subs	r2, r6, r1
 8000c06:	4284      	cmp	r4, r0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x40>
 8000c0a:	e098      	b.n	8000d3e <__aeabi_dadd+0x172>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	dc00      	bgt.n	8000c12 <__aeabi_dadd+0x46>
 8000c10:	e081      	b.n	8000d16 <__aeabi_dadd+0x14a>
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x4c>
 8000c16:	e0b6      	b.n	8000d86 <__aeabi_dadd+0x1ba>
 8000c18:	49c9      	ldr	r1, [pc, #804]	; (8000f40 <__aeabi_dadd+0x374>)
 8000c1a:	428e      	cmp	r6, r1
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x54>
 8000c1e:	e172      	b.n	8000f06 <__aeabi_dadd+0x33a>
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0028      	movs	r0, r5
 8000c24:	0409      	lsls	r1, r1, #16
 8000c26:	4308      	orrs	r0, r1
 8000c28:	4684      	mov	ip, r0
 8000c2a:	2a38      	cmp	r2, #56	; 0x38
 8000c2c:	dd00      	ble.n	8000c30 <__aeabi_dadd+0x64>
 8000c2e:	e15e      	b.n	8000eee <__aeabi_dadd+0x322>
 8000c30:	2a1f      	cmp	r2, #31
 8000c32:	dd00      	ble.n	8000c36 <__aeabi_dadd+0x6a>
 8000c34:	e1ee      	b.n	8001014 <__aeabi_dadd+0x448>
 8000c36:	2020      	movs	r0, #32
 8000c38:	0039      	movs	r1, r7
 8000c3a:	4665      	mov	r5, ip
 8000c3c:	1a80      	subs	r0, r0, r2
 8000c3e:	4087      	lsls	r7, r0
 8000c40:	40d1      	lsrs	r1, r2
 8000c42:	4085      	lsls	r5, r0
 8000c44:	430d      	orrs	r5, r1
 8000c46:	0039      	movs	r1, r7
 8000c48:	1e4f      	subs	r7, r1, #1
 8000c4a:	41b9      	sbcs	r1, r7
 8000c4c:	4667      	mov	r7, ip
 8000c4e:	40d7      	lsrs	r7, r2
 8000c50:	4329      	orrs	r1, r5
 8000c52:	1bdb      	subs	r3, r3, r7
 8000c54:	464a      	mov	r2, r9
 8000c56:	1a55      	subs	r5, r2, r1
 8000c58:	45a9      	cmp	r9, r5
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	1a5b      	subs	r3, r3, r1
 8000c60:	4698      	mov	r8, r3
 8000c62:	4643      	mov	r3, r8
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	d400      	bmi.n	8000c6a <__aeabi_dadd+0x9e>
 8000c68:	e0cc      	b.n	8000e04 <__aeabi_dadd+0x238>
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	0a5b      	lsrs	r3, r3, #9
 8000c70:	4698      	mov	r8, r3
 8000c72:	4643      	mov	r3, r8
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0xae>
 8000c78:	e12c      	b.n	8000ed4 <__aeabi_dadd+0x308>
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	f001 fe8e 	bl	800299c <__clzsi2>
 8000c80:	0001      	movs	r1, r0
 8000c82:	3908      	subs	r1, #8
 8000c84:	2220      	movs	r2, #32
 8000c86:	0028      	movs	r0, r5
 8000c88:	4643      	mov	r3, r8
 8000c8a:	1a52      	subs	r2, r2, r1
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	40d0      	lsrs	r0, r2
 8000c90:	408d      	lsls	r5, r1
 8000c92:	4303      	orrs	r3, r0
 8000c94:	428e      	cmp	r6, r1
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_dadd+0xce>
 8000c98:	e117      	b.n	8000eca <__aeabi_dadd+0x2fe>
 8000c9a:	1b8e      	subs	r6, r1, r6
 8000c9c:	1c72      	adds	r2, r6, #1
 8000c9e:	2a1f      	cmp	r2, #31
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dadd+0xd8>
 8000ca2:	e1a7      	b.n	8000ff4 <__aeabi_dadd+0x428>
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	002e      	movs	r6, r5
 8000caa:	1a89      	subs	r1, r1, r2
 8000cac:	408d      	lsls	r5, r1
 8000cae:	4088      	lsls	r0, r1
 8000cb0:	40d6      	lsrs	r6, r2
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	1e69      	subs	r1, r5, #1
 8000cb6:	418d      	sbcs	r5, r1
 8000cb8:	4330      	orrs	r0, r6
 8000cba:	4698      	mov	r8, r3
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	4305      	orrs	r5, r0
 8000cc0:	076b      	lsls	r3, r5, #29
 8000cc2:	d009      	beq.n	8000cd8 <__aeabi_dadd+0x10c>
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	402b      	ands	r3, r5
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d005      	beq.n	8000cd8 <__aeabi_dadd+0x10c>
 8000ccc:	1d2b      	adds	r3, r5, #4
 8000cce:	42ab      	cmp	r3, r5
 8000cd0:	41ad      	sbcs	r5, r5
 8000cd2:	426d      	negs	r5, r5
 8000cd4:	44a8      	add	r8, r5
 8000cd6:	001d      	movs	r5, r3
 8000cd8:	4643      	mov	r3, r8
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	d400      	bmi.n	8000ce0 <__aeabi_dadd+0x114>
 8000cde:	e094      	b.n	8000e0a <__aeabi_dadd+0x23e>
 8000ce0:	4b97      	ldr	r3, [pc, #604]	; (8000f40 <__aeabi_dadd+0x374>)
 8000ce2:	1c72      	adds	r2, r6, #1
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x11e>
 8000ce8:	e09d      	b.n	8000e26 <__aeabi_dadd+0x25a>
 8000cea:	4641      	mov	r1, r8
 8000cec:	4b95      	ldr	r3, [pc, #596]	; (8000f44 <__aeabi_dadd+0x378>)
 8000cee:	08ed      	lsrs	r5, r5, #3
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	000b      	movs	r3, r1
 8000cf4:	0552      	lsls	r2, r2, #21
 8000cf6:	0749      	lsls	r1, r1, #29
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	4329      	orrs	r1, r5
 8000cfc:	0b1b      	lsrs	r3, r3, #12
 8000cfe:	0d52      	lsrs	r2, r2, #21
 8000d00:	0512      	lsls	r2, r2, #20
 8000d02:	4313      	orrs	r3, r2
 8000d04:	07e4      	lsls	r4, r4, #31
 8000d06:	4323      	orrs	r3, r4
 8000d08:	0008      	movs	r0, r1
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	bce0      	pop	{r5, r6, r7}
 8000d0e:	46ba      	mov	sl, r7
 8000d10:	46b1      	mov	r9, r6
 8000d12:	46a8      	mov	r8, r5
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d043      	beq.n	8000da2 <__aeabi_dadd+0x1d6>
 8000d1a:	1b8a      	subs	r2, r1, r6
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x156>
 8000d20:	e12a      	b.n	8000f78 <__aeabi_dadd+0x3ac>
 8000d22:	464c      	mov	r4, r9
 8000d24:	431c      	orrs	r4, r3
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x15e>
 8000d28:	e1d1      	b.n	80010ce <__aeabi_dadd+0x502>
 8000d2a:	1e54      	subs	r4, r2, #1
 8000d2c:	2a01      	cmp	r2, #1
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x166>
 8000d30:	e21f      	b.n	8001172 <__aeabi_dadd+0x5a6>
 8000d32:	4d83      	ldr	r5, [pc, #524]	; (8000f40 <__aeabi_dadd+0x374>)
 8000d34:	42aa      	cmp	r2, r5
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x16e>
 8000d38:	e272      	b.n	8001220 <__aeabi_dadd+0x654>
 8000d3a:	0022      	movs	r2, r4
 8000d3c:	e123      	b.n	8000f86 <__aeabi_dadd+0x3ba>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	dc00      	bgt.n	8000d44 <__aeabi_dadd+0x178>
 8000d42:	e098      	b.n	8000e76 <__aeabi_dadd+0x2aa>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	d042      	beq.n	8000dce <__aeabi_dadd+0x202>
 8000d48:	497d      	ldr	r1, [pc, #500]	; (8000f40 <__aeabi_dadd+0x374>)
 8000d4a:	428e      	cmp	r6, r1
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x184>
 8000d4e:	e0da      	b.n	8000f06 <__aeabi_dadd+0x33a>
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0028      	movs	r0, r5
 8000d54:	0409      	lsls	r1, r1, #16
 8000d56:	4308      	orrs	r0, r1
 8000d58:	4684      	mov	ip, r0
 8000d5a:	2a38      	cmp	r2, #56	; 0x38
 8000d5c:	dd00      	ble.n	8000d60 <__aeabi_dadd+0x194>
 8000d5e:	e129      	b.n	8000fb4 <__aeabi_dadd+0x3e8>
 8000d60:	2a1f      	cmp	r2, #31
 8000d62:	dc00      	bgt.n	8000d66 <__aeabi_dadd+0x19a>
 8000d64:	e187      	b.n	8001076 <__aeabi_dadd+0x4aa>
 8000d66:	0011      	movs	r1, r2
 8000d68:	4665      	mov	r5, ip
 8000d6a:	3920      	subs	r1, #32
 8000d6c:	40cd      	lsrs	r5, r1
 8000d6e:	2a20      	cmp	r2, #32
 8000d70:	d004      	beq.n	8000d7c <__aeabi_dadd+0x1b0>
 8000d72:	2040      	movs	r0, #64	; 0x40
 8000d74:	4661      	mov	r1, ip
 8000d76:	1a82      	subs	r2, r0, r2
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	430f      	orrs	r7, r1
 8000d7c:	0039      	movs	r1, r7
 8000d7e:	1e4f      	subs	r7, r1, #1
 8000d80:	41b9      	sbcs	r1, r7
 8000d82:	430d      	orrs	r5, r1
 8000d84:	e11b      	b.n	8000fbe <__aeabi_dadd+0x3f2>
 8000d86:	0029      	movs	r1, r5
 8000d88:	4339      	orrs	r1, r7
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dadd+0x1c2>
 8000d8c:	e0b5      	b.n	8000efa <__aeabi_dadd+0x32e>
 8000d8e:	1e51      	subs	r1, r2, #1
 8000d90:	2a01      	cmp	r2, #1
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x1ca>
 8000d94:	e1ab      	b.n	80010ee <__aeabi_dadd+0x522>
 8000d96:	486a      	ldr	r0, [pc, #424]	; (8000f40 <__aeabi_dadd+0x374>)
 8000d98:	4282      	cmp	r2, r0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x1d2>
 8000d9c:	e1b2      	b.n	8001104 <__aeabi_dadd+0x538>
 8000d9e:	000a      	movs	r2, r1
 8000da0:	e743      	b.n	8000c2a <__aeabi_dadd+0x5e>
 8000da2:	4969      	ldr	r1, [pc, #420]	; (8000f48 <__aeabi_dadd+0x37c>)
 8000da4:	1c75      	adds	r5, r6, #1
 8000da6:	420d      	tst	r5, r1
 8000da8:	d000      	beq.n	8000dac <__aeabi_dadd+0x1e0>
 8000daa:	e0cf      	b.n	8000f4c <__aeabi_dadd+0x380>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d000      	beq.n	8000db2 <__aeabi_dadd+0x1e6>
 8000db0:	e193      	b.n	80010da <__aeabi_dadd+0x50e>
 8000db2:	4649      	mov	r1, r9
 8000db4:	4319      	orrs	r1, r3
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x1ee>
 8000db8:	e1d1      	b.n	800115e <__aeabi_dadd+0x592>
 8000dba:	4661      	mov	r1, ip
 8000dbc:	4339      	orrs	r1, r7
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_dadd+0x1f6>
 8000dc0:	e1e3      	b.n	800118a <__aeabi_dadd+0x5be>
 8000dc2:	4649      	mov	r1, r9
 8000dc4:	0758      	lsls	r0, r3, #29
 8000dc6:	08c9      	lsrs	r1, r1, #3
 8000dc8:	4301      	orrs	r1, r0
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	e026      	b.n	8000e1c <__aeabi_dadd+0x250>
 8000dce:	0029      	movs	r1, r5
 8000dd0:	4339      	orrs	r1, r7
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x20a>
 8000dd4:	e091      	b.n	8000efa <__aeabi_dadd+0x32e>
 8000dd6:	1e51      	subs	r1, r2, #1
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d005      	beq.n	8000de8 <__aeabi_dadd+0x21c>
 8000ddc:	4858      	ldr	r0, [pc, #352]	; (8000f40 <__aeabi_dadd+0x374>)
 8000dde:	4282      	cmp	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x218>
 8000de2:	e18f      	b.n	8001104 <__aeabi_dadd+0x538>
 8000de4:	000a      	movs	r2, r1
 8000de6:	e7b8      	b.n	8000d5a <__aeabi_dadd+0x18e>
 8000de8:	003d      	movs	r5, r7
 8000dea:	444d      	add	r5, r9
 8000dec:	454d      	cmp	r5, r9
 8000dee:	4189      	sbcs	r1, r1
 8000df0:	4463      	add	r3, ip
 8000df2:	4698      	mov	r8, r3
 8000df4:	4249      	negs	r1, r1
 8000df6:	4488      	add	r8, r1
 8000df8:	4643      	mov	r3, r8
 8000dfa:	2602      	movs	r6, #2
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	d500      	bpl.n	8000e02 <__aeabi_dadd+0x236>
 8000e00:	e0eb      	b.n	8000fda <__aeabi_dadd+0x40e>
 8000e02:	3e01      	subs	r6, #1
 8000e04:	076b      	lsls	r3, r5, #29
 8000e06:	d000      	beq.n	8000e0a <__aeabi_dadd+0x23e>
 8000e08:	e75c      	b.n	8000cc4 <__aeabi_dadd+0xf8>
 8000e0a:	4643      	mov	r3, r8
 8000e0c:	08e9      	lsrs	r1, r5, #3
 8000e0e:	075a      	lsls	r2, r3, #29
 8000e10:	4311      	orrs	r1, r2
 8000e12:	0032      	movs	r2, r6
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	484a      	ldr	r0, [pc, #296]	; (8000f40 <__aeabi_dadd+0x374>)
 8000e18:	4282      	cmp	r2, r0
 8000e1a:	d021      	beq.n	8000e60 <__aeabi_dadd+0x294>
 8000e1c:	031b      	lsls	r3, r3, #12
 8000e1e:	0552      	lsls	r2, r2, #21
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	0d52      	lsrs	r2, r2, #21
 8000e24:	e76c      	b.n	8000d00 <__aeabi_dadd+0x134>
 8000e26:	2300      	movs	r3, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e769      	b.n	8000d00 <__aeabi_dadd+0x134>
 8000e2c:	002a      	movs	r2, r5
 8000e2e:	433a      	orrs	r2, r7
 8000e30:	d069      	beq.n	8000f06 <__aeabi_dadd+0x33a>
 8000e32:	464a      	mov	r2, r9
 8000e34:	0758      	lsls	r0, r3, #29
 8000e36:	08d1      	lsrs	r1, r2, #3
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	031b      	lsls	r3, r3, #12
 8000e3e:	4308      	orrs	r0, r1
 8000e40:	421a      	tst	r2, r3
 8000e42:	d007      	beq.n	8000e54 <__aeabi_dadd+0x288>
 8000e44:	0029      	movs	r1, r5
 8000e46:	08ed      	lsrs	r5, r5, #3
 8000e48:	421d      	tst	r5, r3
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_dadd+0x288>
 8000e4c:	002a      	movs	r2, r5
 8000e4e:	08ff      	lsrs	r7, r7, #3
 8000e50:	0748      	lsls	r0, r1, #29
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0f43      	lsrs	r3, r0, #29
 8000e56:	00c1      	lsls	r1, r0, #3
 8000e58:	075b      	lsls	r3, r3, #29
 8000e5a:	08c9      	lsrs	r1, r1, #3
 8000e5c:	4319      	orrs	r1, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	000a      	movs	r2, r1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x29c>
 8000e66:	e213      	b.n	8001290 <__aeabi_dadd+0x6c4>
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0312      	lsls	r2, r2, #12
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	031b      	lsls	r3, r3, #12
 8000e70:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <__aeabi_dadd+0x374>)
 8000e72:	0b1b      	lsrs	r3, r3, #12
 8000e74:	e744      	b.n	8000d00 <__aeabi_dadd+0x134>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d04b      	beq.n	8000f12 <__aeabi_dadd+0x346>
 8000e7a:	1b8a      	subs	r2, r1, r6
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x2b6>
 8000e80:	e0e7      	b.n	8001052 <__aeabi_dadd+0x486>
 8000e82:	482f      	ldr	r0, [pc, #188]	; (8000f40 <__aeabi_dadd+0x374>)
 8000e84:	4281      	cmp	r1, r0
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dadd+0x2be>
 8000e88:	e195      	b.n	80011b6 <__aeabi_dadd+0x5ea>
 8000e8a:	2080      	movs	r0, #128	; 0x80
 8000e8c:	0400      	lsls	r0, r0, #16
 8000e8e:	4303      	orrs	r3, r0
 8000e90:	2a38      	cmp	r2, #56	; 0x38
 8000e92:	dd00      	ble.n	8000e96 <__aeabi_dadd+0x2ca>
 8000e94:	e143      	b.n	800111e <__aeabi_dadd+0x552>
 8000e96:	2a1f      	cmp	r2, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0x2d0>
 8000e9a:	e1db      	b.n	8001254 <__aeabi_dadd+0x688>
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	001d      	movs	r5, r3
 8000ea0:	464e      	mov	r6, r9
 8000ea2:	1a80      	subs	r0, r0, r2
 8000ea4:	4085      	lsls	r5, r0
 8000ea6:	40d6      	lsrs	r6, r2
 8000ea8:	4335      	orrs	r5, r6
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4086      	lsls	r6, r0
 8000eae:	0030      	movs	r0, r6
 8000eb0:	40d3      	lsrs	r3, r2
 8000eb2:	1e46      	subs	r6, r0, #1
 8000eb4:	41b0      	sbcs	r0, r6
 8000eb6:	449c      	add	ip, r3
 8000eb8:	4305      	orrs	r5, r0
 8000eba:	19ed      	adds	r5, r5, r7
 8000ebc:	42bd      	cmp	r5, r7
 8000ebe:	419b      	sbcs	r3, r3
 8000ec0:	425b      	negs	r3, r3
 8000ec2:	4463      	add	r3, ip
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	000e      	movs	r6, r1
 8000ec8:	e07f      	b.n	8000fca <__aeabi_dadd+0x3fe>
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <__aeabi_dadd+0x378>)
 8000ecc:	1a76      	subs	r6, r6, r1
 8000ece:	4013      	ands	r3, r2
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	e6f5      	b.n	8000cc0 <__aeabi_dadd+0xf4>
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	f001 fd61 	bl	800299c <__clzsi2>
 8000eda:	0001      	movs	r1, r0
 8000edc:	3118      	adds	r1, #24
 8000ede:	291f      	cmp	r1, #31
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_dadd+0x318>
 8000ee2:	e6cf      	b.n	8000c84 <__aeabi_dadd+0xb8>
 8000ee4:	002b      	movs	r3, r5
 8000ee6:	3808      	subs	r0, #8
 8000ee8:	4083      	lsls	r3, r0
 8000eea:	2500      	movs	r5, #0
 8000eec:	e6d2      	b.n	8000c94 <__aeabi_dadd+0xc8>
 8000eee:	4662      	mov	r2, ip
 8000ef0:	433a      	orrs	r2, r7
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	1e4f      	subs	r7, r1, #1
 8000ef6:	41b9      	sbcs	r1, r7
 8000ef8:	e6ac      	b.n	8000c54 <__aeabi_dadd+0x88>
 8000efa:	4649      	mov	r1, r9
 8000efc:	0758      	lsls	r0, r3, #29
 8000efe:	08c9      	lsrs	r1, r1, #3
 8000f00:	4301      	orrs	r1, r0
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	e787      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8000f06:	4649      	mov	r1, r9
 8000f08:	075a      	lsls	r2, r3, #29
 8000f0a:	08c9      	lsrs	r1, r1, #3
 8000f0c:	4311      	orrs	r1, r2
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	e7a6      	b.n	8000e60 <__aeabi_dadd+0x294>
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <__aeabi_dadd+0x37c>)
 8000f14:	1c70      	adds	r0, r6, #1
 8000f16:	4208      	tst	r0, r1
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dadd+0x350>
 8000f1a:	e0bb      	b.n	8001094 <__aeabi_dadd+0x4c8>
 8000f1c:	2e00      	cmp	r6, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_dadd+0x356>
 8000f20:	e114      	b.n	800114c <__aeabi_dadd+0x580>
 8000f22:	4649      	mov	r1, r9
 8000f24:	4319      	orrs	r1, r3
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x35e>
 8000f28:	e175      	b.n	8001216 <__aeabi_dadd+0x64a>
 8000f2a:	0029      	movs	r1, r5
 8000f2c:	4339      	orrs	r1, r7
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_dadd+0x366>
 8000f30:	e17e      	b.n	8001230 <__aeabi_dadd+0x664>
 8000f32:	4649      	mov	r1, r9
 8000f34:	0758      	lsls	r0, r3, #29
 8000f36:	08c9      	lsrs	r1, r1, #3
 8000f38:	4301      	orrs	r1, r0
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	e76e      	b.n	8000e1c <__aeabi_dadd+0x250>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	000007ff 	.word	0x000007ff
 8000f44:	ff7fffff 	.word	0xff7fffff
 8000f48:	000007fe 	.word	0x000007fe
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	1bcd      	subs	r5, r1, r7
 8000f50:	4661      	mov	r1, ip
 8000f52:	1a58      	subs	r0, r3, r1
 8000f54:	45a9      	cmp	r9, r5
 8000f56:	4189      	sbcs	r1, r1
 8000f58:	4249      	negs	r1, r1
 8000f5a:	4688      	mov	r8, r1
 8000f5c:	0001      	movs	r1, r0
 8000f5e:	4640      	mov	r0, r8
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	4688      	mov	r8, r1
 8000f64:	0209      	lsls	r1, r1, #8
 8000f66:	d500      	bpl.n	8000f6a <__aeabi_dadd+0x39e>
 8000f68:	e0a6      	b.n	80010b8 <__aeabi_dadd+0x4ec>
 8000f6a:	4641      	mov	r1, r8
 8000f6c:	4329      	orrs	r1, r5
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_dadd+0x3a6>
 8000f70:	e67f      	b.n	8000c72 <__aeabi_dadd+0xa6>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2400      	movs	r4, #0
 8000f76:	e751      	b.n	8000e1c <__aeabi_dadd+0x250>
 8000f78:	4cc7      	ldr	r4, [pc, #796]	; (8001298 <__aeabi_dadd+0x6cc>)
 8000f7a:	42a1      	cmp	r1, r4
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x3b4>
 8000f7e:	e0c7      	b.n	8001110 <__aeabi_dadd+0x544>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	0424      	lsls	r4, r4, #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	2a38      	cmp	r2, #56	; 0x38
 8000f88:	dc54      	bgt.n	8001034 <__aeabi_dadd+0x468>
 8000f8a:	2a1f      	cmp	r2, #31
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_dadd+0x3c4>
 8000f8e:	e0cc      	b.n	800112a <__aeabi_dadd+0x55e>
 8000f90:	2420      	movs	r4, #32
 8000f92:	4648      	mov	r0, r9
 8000f94:	1aa4      	subs	r4, r4, r2
 8000f96:	001d      	movs	r5, r3
 8000f98:	464e      	mov	r6, r9
 8000f9a:	40a0      	lsls	r0, r4
 8000f9c:	40d6      	lsrs	r6, r2
 8000f9e:	40a5      	lsls	r5, r4
 8000fa0:	0004      	movs	r4, r0
 8000fa2:	40d3      	lsrs	r3, r2
 8000fa4:	4662      	mov	r2, ip
 8000fa6:	4335      	orrs	r5, r6
 8000fa8:	1e66      	subs	r6, r4, #1
 8000faa:	41b4      	sbcs	r4, r6
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	469c      	mov	ip, r3
 8000fb0:	4325      	orrs	r5, r4
 8000fb2:	e044      	b.n	800103e <__aeabi_dadd+0x472>
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	433a      	orrs	r2, r7
 8000fb8:	0015      	movs	r5, r2
 8000fba:	1e6f      	subs	r7, r5, #1
 8000fbc:	41bd      	sbcs	r5, r7
 8000fbe:	444d      	add	r5, r9
 8000fc0:	454d      	cmp	r5, r9
 8000fc2:	4189      	sbcs	r1, r1
 8000fc4:	4249      	negs	r1, r1
 8000fc6:	4688      	mov	r8, r1
 8000fc8:	4498      	add	r8, r3
 8000fca:	4643      	mov	r3, r8
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	d400      	bmi.n	8000fd2 <__aeabi_dadd+0x406>
 8000fd0:	e718      	b.n	8000e04 <__aeabi_dadd+0x238>
 8000fd2:	4bb1      	ldr	r3, [pc, #708]	; (8001298 <__aeabi_dadd+0x6cc>)
 8000fd4:	3601      	adds	r6, #1
 8000fd6:	429e      	cmp	r6, r3
 8000fd8:	d049      	beq.n	800106e <__aeabi_dadd+0x4a2>
 8000fda:	4642      	mov	r2, r8
 8000fdc:	4baf      	ldr	r3, [pc, #700]	; (800129c <__aeabi_dadd+0x6d0>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	086a      	lsrs	r2, r5, #1
 8000fe6:	400d      	ands	r5, r1
 8000fe8:	4315      	orrs	r5, r2
 8000fea:	07d9      	lsls	r1, r3, #31
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	4698      	mov	r8, r3
 8000ff0:	430d      	orrs	r5, r1
 8000ff2:	e665      	b.n	8000cc0 <__aeabi_dadd+0xf4>
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	3e1f      	subs	r6, #31
 8000ff8:	40f0      	lsrs	r0, r6
 8000ffa:	2a20      	cmp	r2, #32
 8000ffc:	d003      	beq.n	8001006 <__aeabi_dadd+0x43a>
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	1a8a      	subs	r2, r1, r2
 8001002:	4093      	lsls	r3, r2
 8001004:	431d      	orrs	r5, r3
 8001006:	1e69      	subs	r1, r5, #1
 8001008:	418d      	sbcs	r5, r1
 800100a:	2300      	movs	r3, #0
 800100c:	2600      	movs	r6, #0
 800100e:	4698      	mov	r8, r3
 8001010:	4305      	orrs	r5, r0
 8001012:	e6f7      	b.n	8000e04 <__aeabi_dadd+0x238>
 8001014:	0011      	movs	r1, r2
 8001016:	4665      	mov	r5, ip
 8001018:	3920      	subs	r1, #32
 800101a:	40cd      	lsrs	r5, r1
 800101c:	2a20      	cmp	r2, #32
 800101e:	d004      	beq.n	800102a <__aeabi_dadd+0x45e>
 8001020:	2040      	movs	r0, #64	; 0x40
 8001022:	4661      	mov	r1, ip
 8001024:	1a82      	subs	r2, r0, r2
 8001026:	4091      	lsls	r1, r2
 8001028:	430f      	orrs	r7, r1
 800102a:	0039      	movs	r1, r7
 800102c:	1e4f      	subs	r7, r1, #1
 800102e:	41b9      	sbcs	r1, r7
 8001030:	4329      	orrs	r1, r5
 8001032:	e60f      	b.n	8000c54 <__aeabi_dadd+0x88>
 8001034:	464a      	mov	r2, r9
 8001036:	4313      	orrs	r3, r2
 8001038:	001d      	movs	r5, r3
 800103a:	1e6b      	subs	r3, r5, #1
 800103c:	419d      	sbcs	r5, r3
 800103e:	1b7d      	subs	r5, r7, r5
 8001040:	42af      	cmp	r7, r5
 8001042:	419b      	sbcs	r3, r3
 8001044:	4662      	mov	r2, ip
 8001046:	425b      	negs	r3, r3
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4698      	mov	r8, r3
 800104c:	4654      	mov	r4, sl
 800104e:	000e      	movs	r6, r1
 8001050:	e607      	b.n	8000c62 <__aeabi_dadd+0x96>
 8001052:	4648      	mov	r0, r9
 8001054:	4318      	orrs	r0, r3
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x48e>
 8001058:	e0b3      	b.n	80011c2 <__aeabi_dadd+0x5f6>
 800105a:	1e50      	subs	r0, r2, #1
 800105c:	2a01      	cmp	r2, #1
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x496>
 8001060:	e10d      	b.n	800127e <__aeabi_dadd+0x6b2>
 8001062:	4d8d      	ldr	r5, [pc, #564]	; (8001298 <__aeabi_dadd+0x6cc>)
 8001064:	42aa      	cmp	r2, r5
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x49e>
 8001068:	e0a5      	b.n	80011b6 <__aeabi_dadd+0x5ea>
 800106a:	0002      	movs	r2, r0
 800106c:	e710      	b.n	8000e90 <__aeabi_dadd+0x2c4>
 800106e:	0032      	movs	r2, r6
 8001070:	2300      	movs	r3, #0
 8001072:	2100      	movs	r1, #0
 8001074:	e644      	b.n	8000d00 <__aeabi_dadd+0x134>
 8001076:	2120      	movs	r1, #32
 8001078:	0038      	movs	r0, r7
 800107a:	1a89      	subs	r1, r1, r2
 800107c:	4665      	mov	r5, ip
 800107e:	408f      	lsls	r7, r1
 8001080:	408d      	lsls	r5, r1
 8001082:	40d0      	lsrs	r0, r2
 8001084:	1e79      	subs	r1, r7, #1
 8001086:	418f      	sbcs	r7, r1
 8001088:	4305      	orrs	r5, r0
 800108a:	433d      	orrs	r5, r7
 800108c:	4667      	mov	r7, ip
 800108e:	40d7      	lsrs	r7, r2
 8001090:	19db      	adds	r3, r3, r7
 8001092:	e794      	b.n	8000fbe <__aeabi_dadd+0x3f2>
 8001094:	4a80      	ldr	r2, [pc, #512]	; (8001298 <__aeabi_dadd+0x6cc>)
 8001096:	4290      	cmp	r0, r2
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x4d0>
 800109a:	e0ec      	b.n	8001276 <__aeabi_dadd+0x6aa>
 800109c:	0039      	movs	r1, r7
 800109e:	4449      	add	r1, r9
 80010a0:	4549      	cmp	r1, r9
 80010a2:	4192      	sbcs	r2, r2
 80010a4:	4463      	add	r3, ip
 80010a6:	4252      	negs	r2, r2
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	07dd      	lsls	r5, r3, #31
 80010ac:	0849      	lsrs	r1, r1, #1
 80010ae:	085b      	lsrs	r3, r3, #1
 80010b0:	4698      	mov	r8, r3
 80010b2:	0006      	movs	r6, r0
 80010b4:	430d      	orrs	r5, r1
 80010b6:	e6a5      	b.n	8000e04 <__aeabi_dadd+0x238>
 80010b8:	464a      	mov	r2, r9
 80010ba:	1abd      	subs	r5, r7, r2
 80010bc:	42af      	cmp	r7, r5
 80010be:	4189      	sbcs	r1, r1
 80010c0:	4662      	mov	r2, ip
 80010c2:	4249      	negs	r1, r1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	4698      	mov	r8, r3
 80010ca:	4654      	mov	r4, sl
 80010cc:	e5d1      	b.n	8000c72 <__aeabi_dadd+0xa6>
 80010ce:	076c      	lsls	r4, r5, #29
 80010d0:	08f9      	lsrs	r1, r7, #3
 80010d2:	4321      	orrs	r1, r4
 80010d4:	08eb      	lsrs	r3, r5, #3
 80010d6:	0004      	movs	r4, r0
 80010d8:	e69d      	b.n	8000e16 <__aeabi_dadd+0x24a>
 80010da:	464a      	mov	r2, r9
 80010dc:	431a      	orrs	r2, r3
 80010de:	d175      	bne.n	80011cc <__aeabi_dadd+0x600>
 80010e0:	4661      	mov	r1, ip
 80010e2:	4339      	orrs	r1, r7
 80010e4:	d114      	bne.n	8001110 <__aeabi_dadd+0x544>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	2400      	movs	r4, #0
 80010ea:	031b      	lsls	r3, r3, #12
 80010ec:	e6bc      	b.n	8000e68 <__aeabi_dadd+0x29c>
 80010ee:	464a      	mov	r2, r9
 80010f0:	1bd5      	subs	r5, r2, r7
 80010f2:	45a9      	cmp	r9, r5
 80010f4:	4189      	sbcs	r1, r1
 80010f6:	4662      	mov	r2, ip
 80010f8:	4249      	negs	r1, r1
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	1a5b      	subs	r3, r3, r1
 80010fe:	4698      	mov	r8, r3
 8001100:	2601      	movs	r6, #1
 8001102:	e5ae      	b.n	8000c62 <__aeabi_dadd+0x96>
 8001104:	464a      	mov	r2, r9
 8001106:	08d1      	lsrs	r1, r2, #3
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	4311      	orrs	r1, r2
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	e6a7      	b.n	8000e60 <__aeabi_dadd+0x294>
 8001110:	4663      	mov	r3, ip
 8001112:	08f9      	lsrs	r1, r7, #3
 8001114:	075a      	lsls	r2, r3, #29
 8001116:	4654      	mov	r4, sl
 8001118:	4311      	orrs	r1, r2
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	e6a0      	b.n	8000e60 <__aeabi_dadd+0x294>
 800111e:	464a      	mov	r2, r9
 8001120:	4313      	orrs	r3, r2
 8001122:	001d      	movs	r5, r3
 8001124:	1e6b      	subs	r3, r5, #1
 8001126:	419d      	sbcs	r5, r3
 8001128:	e6c7      	b.n	8000eba <__aeabi_dadd+0x2ee>
 800112a:	0014      	movs	r4, r2
 800112c:	001e      	movs	r6, r3
 800112e:	3c20      	subs	r4, #32
 8001130:	40e6      	lsrs	r6, r4
 8001132:	2a20      	cmp	r2, #32
 8001134:	d005      	beq.n	8001142 <__aeabi_dadd+0x576>
 8001136:	2440      	movs	r4, #64	; 0x40
 8001138:	1aa2      	subs	r2, r4, r2
 800113a:	4093      	lsls	r3, r2
 800113c:	464a      	mov	r2, r9
 800113e:	431a      	orrs	r2, r3
 8001140:	4691      	mov	r9, r2
 8001142:	464d      	mov	r5, r9
 8001144:	1e6b      	subs	r3, r5, #1
 8001146:	419d      	sbcs	r5, r3
 8001148:	4335      	orrs	r5, r6
 800114a:	e778      	b.n	800103e <__aeabi_dadd+0x472>
 800114c:	464a      	mov	r2, r9
 800114e:	431a      	orrs	r2, r3
 8001150:	d000      	beq.n	8001154 <__aeabi_dadd+0x588>
 8001152:	e66b      	b.n	8000e2c <__aeabi_dadd+0x260>
 8001154:	076b      	lsls	r3, r5, #29
 8001156:	08f9      	lsrs	r1, r7, #3
 8001158:	4319      	orrs	r1, r3
 800115a:	08eb      	lsrs	r3, r5, #3
 800115c:	e680      	b.n	8000e60 <__aeabi_dadd+0x294>
 800115e:	4661      	mov	r1, ip
 8001160:	4339      	orrs	r1, r7
 8001162:	d054      	beq.n	800120e <__aeabi_dadd+0x642>
 8001164:	4663      	mov	r3, ip
 8001166:	08f9      	lsrs	r1, r7, #3
 8001168:	075c      	lsls	r4, r3, #29
 800116a:	4321      	orrs	r1, r4
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	0004      	movs	r4, r0
 8001170:	e654      	b.n	8000e1c <__aeabi_dadd+0x250>
 8001172:	464a      	mov	r2, r9
 8001174:	1abd      	subs	r5, r7, r2
 8001176:	42af      	cmp	r7, r5
 8001178:	4189      	sbcs	r1, r1
 800117a:	4662      	mov	r2, ip
 800117c:	4249      	negs	r1, r1
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	1a5b      	subs	r3, r3, r1
 8001182:	4698      	mov	r8, r3
 8001184:	0004      	movs	r4, r0
 8001186:	2601      	movs	r6, #1
 8001188:	e56b      	b.n	8000c62 <__aeabi_dadd+0x96>
 800118a:	464a      	mov	r2, r9
 800118c:	1bd5      	subs	r5, r2, r7
 800118e:	45a9      	cmp	r9, r5
 8001190:	4189      	sbcs	r1, r1
 8001192:	4662      	mov	r2, ip
 8001194:	4249      	negs	r1, r1
 8001196:	1a9a      	subs	r2, r3, r2
 8001198:	1a52      	subs	r2, r2, r1
 800119a:	4690      	mov	r8, r2
 800119c:	0212      	lsls	r2, r2, #8
 800119e:	d532      	bpl.n	8001206 <__aeabi_dadd+0x63a>
 80011a0:	464a      	mov	r2, r9
 80011a2:	1abd      	subs	r5, r7, r2
 80011a4:	42af      	cmp	r7, r5
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	4662      	mov	r2, ip
 80011aa:	4249      	negs	r1, r1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	1a5b      	subs	r3, r3, r1
 80011b0:	4698      	mov	r8, r3
 80011b2:	0004      	movs	r4, r0
 80011b4:	e584      	b.n	8000cc0 <__aeabi_dadd+0xf4>
 80011b6:	4663      	mov	r3, ip
 80011b8:	08f9      	lsrs	r1, r7, #3
 80011ba:	075a      	lsls	r2, r3, #29
 80011bc:	4311      	orrs	r1, r2
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	e64e      	b.n	8000e60 <__aeabi_dadd+0x294>
 80011c2:	08f9      	lsrs	r1, r7, #3
 80011c4:	0768      	lsls	r0, r5, #29
 80011c6:	4301      	orrs	r1, r0
 80011c8:	08eb      	lsrs	r3, r5, #3
 80011ca:	e624      	b.n	8000e16 <__aeabi_dadd+0x24a>
 80011cc:	4662      	mov	r2, ip
 80011ce:	433a      	orrs	r2, r7
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x608>
 80011d2:	e698      	b.n	8000f06 <__aeabi_dadd+0x33a>
 80011d4:	464a      	mov	r2, r9
 80011d6:	08d1      	lsrs	r1, r2, #3
 80011d8:	075a      	lsls	r2, r3, #29
 80011da:	4311      	orrs	r1, r2
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	031b      	lsls	r3, r3, #12
 80011e2:	421a      	tst	r2, r3
 80011e4:	d008      	beq.n	80011f8 <__aeabi_dadd+0x62c>
 80011e6:	4660      	mov	r0, ip
 80011e8:	08c5      	lsrs	r5, r0, #3
 80011ea:	421d      	tst	r5, r3
 80011ec:	d104      	bne.n	80011f8 <__aeabi_dadd+0x62c>
 80011ee:	4654      	mov	r4, sl
 80011f0:	002a      	movs	r2, r5
 80011f2:	08f9      	lsrs	r1, r7, #3
 80011f4:	0743      	lsls	r3, r0, #29
 80011f6:	4319      	orrs	r1, r3
 80011f8:	0f4b      	lsrs	r3, r1, #29
 80011fa:	00c9      	lsls	r1, r1, #3
 80011fc:	075b      	lsls	r3, r3, #29
 80011fe:	08c9      	lsrs	r1, r1, #3
 8001200:	4319      	orrs	r1, r3
 8001202:	0013      	movs	r3, r2
 8001204:	e62c      	b.n	8000e60 <__aeabi_dadd+0x294>
 8001206:	4641      	mov	r1, r8
 8001208:	4329      	orrs	r1, r5
 800120a:	d000      	beq.n	800120e <__aeabi_dadd+0x642>
 800120c:	e5fa      	b.n	8000e04 <__aeabi_dadd+0x238>
 800120e:	2300      	movs	r3, #0
 8001210:	000a      	movs	r2, r1
 8001212:	2400      	movs	r4, #0
 8001214:	e602      	b.n	8000e1c <__aeabi_dadd+0x250>
 8001216:	076b      	lsls	r3, r5, #29
 8001218:	08f9      	lsrs	r1, r7, #3
 800121a:	4319      	orrs	r1, r3
 800121c:	08eb      	lsrs	r3, r5, #3
 800121e:	e5fd      	b.n	8000e1c <__aeabi_dadd+0x250>
 8001220:	4663      	mov	r3, ip
 8001222:	08f9      	lsrs	r1, r7, #3
 8001224:	075b      	lsls	r3, r3, #29
 8001226:	4319      	orrs	r1, r3
 8001228:	4663      	mov	r3, ip
 800122a:	0004      	movs	r4, r0
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	e617      	b.n	8000e60 <__aeabi_dadd+0x294>
 8001230:	003d      	movs	r5, r7
 8001232:	444d      	add	r5, r9
 8001234:	4463      	add	r3, ip
 8001236:	454d      	cmp	r5, r9
 8001238:	4189      	sbcs	r1, r1
 800123a:	4698      	mov	r8, r3
 800123c:	4249      	negs	r1, r1
 800123e:	4488      	add	r8, r1
 8001240:	4643      	mov	r3, r8
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	d400      	bmi.n	8001248 <__aeabi_dadd+0x67c>
 8001246:	e5dd      	b.n	8000e04 <__aeabi_dadd+0x238>
 8001248:	4642      	mov	r2, r8
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <__aeabi_dadd+0x6d0>)
 800124c:	2601      	movs	r6, #1
 800124e:	401a      	ands	r2, r3
 8001250:	4690      	mov	r8, r2
 8001252:	e5d7      	b.n	8000e04 <__aeabi_dadd+0x238>
 8001254:	0010      	movs	r0, r2
 8001256:	001e      	movs	r6, r3
 8001258:	3820      	subs	r0, #32
 800125a:	40c6      	lsrs	r6, r0
 800125c:	2a20      	cmp	r2, #32
 800125e:	d005      	beq.n	800126c <__aeabi_dadd+0x6a0>
 8001260:	2040      	movs	r0, #64	; 0x40
 8001262:	1a82      	subs	r2, r0, r2
 8001264:	4093      	lsls	r3, r2
 8001266:	464a      	mov	r2, r9
 8001268:	431a      	orrs	r2, r3
 800126a:	4691      	mov	r9, r2
 800126c:	464d      	mov	r5, r9
 800126e:	1e6b      	subs	r3, r5, #1
 8001270:	419d      	sbcs	r5, r3
 8001272:	4335      	orrs	r5, r6
 8001274:	e621      	b.n	8000eba <__aeabi_dadd+0x2ee>
 8001276:	0002      	movs	r2, r0
 8001278:	2300      	movs	r3, #0
 800127a:	2100      	movs	r1, #0
 800127c:	e540      	b.n	8000d00 <__aeabi_dadd+0x134>
 800127e:	464a      	mov	r2, r9
 8001280:	19d5      	adds	r5, r2, r7
 8001282:	42bd      	cmp	r5, r7
 8001284:	4189      	sbcs	r1, r1
 8001286:	4463      	add	r3, ip
 8001288:	4698      	mov	r8, r3
 800128a:	4249      	negs	r1, r1
 800128c:	4488      	add	r8, r1
 800128e:	e5b3      	b.n	8000df8 <__aeabi_dadd+0x22c>
 8001290:	2100      	movs	r1, #0
 8001292:	4a01      	ldr	r2, [pc, #4]	; (8001298 <__aeabi_dadd+0x6cc>)
 8001294:	000b      	movs	r3, r1
 8001296:	e533      	b.n	8000d00 <__aeabi_dadd+0x134>
 8001298:	000007ff 	.word	0x000007ff
 800129c:	ff7fffff 	.word	0xff7fffff

080012a0 <__aeabi_ddiv>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	4657      	mov	r7, sl
 80012a4:	464e      	mov	r6, r9
 80012a6:	4645      	mov	r5, r8
 80012a8:	46de      	mov	lr, fp
 80012aa:	b5e0      	push	{r5, r6, r7, lr}
 80012ac:	4681      	mov	r9, r0
 80012ae:	0005      	movs	r5, r0
 80012b0:	030c      	lsls	r4, r1, #12
 80012b2:	0048      	lsls	r0, r1, #1
 80012b4:	4692      	mov	sl, r2
 80012b6:	001f      	movs	r7, r3
 80012b8:	b085      	sub	sp, #20
 80012ba:	0b24      	lsrs	r4, r4, #12
 80012bc:	0d40      	lsrs	r0, r0, #21
 80012be:	0fce      	lsrs	r6, r1, #31
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d059      	beq.n	8001378 <__aeabi_ddiv+0xd8>
 80012c4:	4b87      	ldr	r3, [pc, #540]	; (80014e4 <__aeabi_ddiv+0x244>)
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_ddiv+0x2c>
 80012ca:	e098      	b.n	80013fe <__aeabi_ddiv+0x15e>
 80012cc:	0f6b      	lsrs	r3, r5, #29
 80012ce:	00e4      	lsls	r4, r4, #3
 80012d0:	431c      	orrs	r4, r3
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	4323      	orrs	r3, r4
 80012d8:	4698      	mov	r8, r3
 80012da:	4b83      	ldr	r3, [pc, #524]	; (80014e8 <__aeabi_ddiv+0x248>)
 80012dc:	00ed      	lsls	r5, r5, #3
 80012de:	469b      	mov	fp, r3
 80012e0:	2300      	movs	r3, #0
 80012e2:	4699      	mov	r9, r3
 80012e4:	4483      	add	fp, r0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	033c      	lsls	r4, r7, #12
 80012ea:	007b      	lsls	r3, r7, #1
 80012ec:	4650      	mov	r0, sl
 80012ee:	0b24      	lsrs	r4, r4, #12
 80012f0:	0d5b      	lsrs	r3, r3, #21
 80012f2:	0fff      	lsrs	r7, r7, #31
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d067      	beq.n	80013c8 <__aeabi_ddiv+0x128>
 80012f8:	4a7a      	ldr	r2, [pc, #488]	; (80014e4 <__aeabi_ddiv+0x244>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d018      	beq.n	8001330 <__aeabi_ddiv+0x90>
 80012fe:	497a      	ldr	r1, [pc, #488]	; (80014e8 <__aeabi_ddiv+0x248>)
 8001300:	0f42      	lsrs	r2, r0, #29
 8001302:	468c      	mov	ip, r1
 8001304:	00e4      	lsls	r4, r4, #3
 8001306:	4659      	mov	r1, fp
 8001308:	4314      	orrs	r4, r2
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	4463      	add	r3, ip
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	1acb      	subs	r3, r1, r3
 8001312:	4314      	orrs	r4, r2
 8001314:	469b      	mov	fp, r3
 8001316:	00c2      	lsls	r2, r0, #3
 8001318:	2000      	movs	r0, #0
 800131a:	0033      	movs	r3, r6
 800131c:	407b      	eors	r3, r7
 800131e:	469a      	mov	sl, r3
 8001320:	464b      	mov	r3, r9
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x88>
 8001326:	e0ef      	b.n	8001508 <__aeabi_ddiv+0x268>
 8001328:	4970      	ldr	r1, [pc, #448]	; (80014ec <__aeabi_ddiv+0x24c>)
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	58cb      	ldr	r3, [r1, r3]
 800132e:	469f      	mov	pc, r3
 8001330:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <__aeabi_ddiv+0x250>)
 8001332:	4652      	mov	r2, sl
 8001334:	469c      	mov	ip, r3
 8001336:	4322      	orrs	r2, r4
 8001338:	44e3      	add	fp, ip
 800133a:	2a00      	cmp	r2, #0
 800133c:	d000      	beq.n	8001340 <__aeabi_ddiv+0xa0>
 800133e:	e095      	b.n	800146c <__aeabi_ddiv+0x1cc>
 8001340:	4649      	mov	r1, r9
 8001342:	2302      	movs	r3, #2
 8001344:	4319      	orrs	r1, r3
 8001346:	4689      	mov	r9, r1
 8001348:	2400      	movs	r4, #0
 800134a:	2002      	movs	r0, #2
 800134c:	e7e5      	b.n	800131a <__aeabi_ddiv+0x7a>
 800134e:	2300      	movs	r3, #0
 8001350:	2400      	movs	r4, #0
 8001352:	2500      	movs	r5, #0
 8001354:	4652      	mov	r2, sl
 8001356:	051b      	lsls	r3, r3, #20
 8001358:	4323      	orrs	r3, r4
 800135a:	07d2      	lsls	r2, r2, #31
 800135c:	4313      	orrs	r3, r2
 800135e:	0028      	movs	r0, r5
 8001360:	0019      	movs	r1, r3
 8001362:	b005      	add	sp, #20
 8001364:	bcf0      	pop	{r4, r5, r6, r7}
 8001366:	46bb      	mov	fp, r7
 8001368:	46b2      	mov	sl, r6
 800136a:	46a9      	mov	r9, r5
 800136c:	46a0      	mov	r8, r4
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	2400      	movs	r4, #0
 8001372:	2500      	movs	r5, #0
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <__aeabi_ddiv+0x244>)
 8001376:	e7ed      	b.n	8001354 <__aeabi_ddiv+0xb4>
 8001378:	464b      	mov	r3, r9
 800137a:	4323      	orrs	r3, r4
 800137c:	4698      	mov	r8, r3
 800137e:	d100      	bne.n	8001382 <__aeabi_ddiv+0xe2>
 8001380:	e089      	b.n	8001496 <__aeabi_ddiv+0x1f6>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0xe8>
 8001386:	e1e0      	b.n	800174a <__aeabi_ddiv+0x4aa>
 8001388:	0020      	movs	r0, r4
 800138a:	f001 fb07 	bl	800299c <__clzsi2>
 800138e:	0001      	movs	r1, r0
 8001390:	0002      	movs	r2, r0
 8001392:	390b      	subs	r1, #11
 8001394:	231d      	movs	r3, #29
 8001396:	1a5b      	subs	r3, r3, r1
 8001398:	4649      	mov	r1, r9
 800139a:	0010      	movs	r0, r2
 800139c:	40d9      	lsrs	r1, r3
 800139e:	3808      	subs	r0, #8
 80013a0:	4084      	lsls	r4, r0
 80013a2:	000b      	movs	r3, r1
 80013a4:	464d      	mov	r5, r9
 80013a6:	4323      	orrs	r3, r4
 80013a8:	4698      	mov	r8, r3
 80013aa:	4085      	lsls	r5, r0
 80013ac:	4851      	ldr	r0, [pc, #324]	; (80014f4 <__aeabi_ddiv+0x254>)
 80013ae:	033c      	lsls	r4, r7, #12
 80013b0:	1a83      	subs	r3, r0, r2
 80013b2:	469b      	mov	fp, r3
 80013b4:	2300      	movs	r3, #0
 80013b6:	4699      	mov	r9, r3
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	007b      	lsls	r3, r7, #1
 80013bc:	4650      	mov	r0, sl
 80013be:	0b24      	lsrs	r4, r4, #12
 80013c0:	0d5b      	lsrs	r3, r3, #21
 80013c2:	0fff      	lsrs	r7, r7, #31
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d197      	bne.n	80012f8 <__aeabi_ddiv+0x58>
 80013c8:	4652      	mov	r2, sl
 80013ca:	4322      	orrs	r2, r4
 80013cc:	d055      	beq.n	800147a <__aeabi_ddiv+0x1da>
 80013ce:	2c00      	cmp	r4, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_ddiv+0x134>
 80013d2:	e1ca      	b.n	800176a <__aeabi_ddiv+0x4ca>
 80013d4:	0020      	movs	r0, r4
 80013d6:	f001 fae1 	bl	800299c <__clzsi2>
 80013da:	0002      	movs	r2, r0
 80013dc:	3a0b      	subs	r2, #11
 80013de:	231d      	movs	r3, #29
 80013e0:	0001      	movs	r1, r0
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	4652      	mov	r2, sl
 80013e6:	3908      	subs	r1, #8
 80013e8:	40da      	lsrs	r2, r3
 80013ea:	408c      	lsls	r4, r1
 80013ec:	4314      	orrs	r4, r2
 80013ee:	4652      	mov	r2, sl
 80013f0:	408a      	lsls	r2, r1
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <__aeabi_ddiv+0x258>)
 80013f4:	4458      	add	r0, fp
 80013f6:	469b      	mov	fp, r3
 80013f8:	4483      	add	fp, r0
 80013fa:	2000      	movs	r0, #0
 80013fc:	e78d      	b.n	800131a <__aeabi_ddiv+0x7a>
 80013fe:	464b      	mov	r3, r9
 8001400:	4323      	orrs	r3, r4
 8001402:	4698      	mov	r8, r3
 8001404:	d140      	bne.n	8001488 <__aeabi_ddiv+0x1e8>
 8001406:	2308      	movs	r3, #8
 8001408:	4699      	mov	r9, r3
 800140a:	3b06      	subs	r3, #6
 800140c:	2500      	movs	r5, #0
 800140e:	4683      	mov	fp, r0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	e769      	b.n	80012e8 <__aeabi_ddiv+0x48>
 8001414:	46b2      	mov	sl, r6
 8001416:	9b00      	ldr	r3, [sp, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d0a9      	beq.n	8001370 <__aeabi_ddiv+0xd0>
 800141c:	2b03      	cmp	r3, #3
 800141e:	d100      	bne.n	8001422 <__aeabi_ddiv+0x182>
 8001420:	e211      	b.n	8001846 <__aeabi_ddiv+0x5a6>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d093      	beq.n	800134e <__aeabi_ddiv+0xae>
 8001426:	4a35      	ldr	r2, [pc, #212]	; (80014fc <__aeabi_ddiv+0x25c>)
 8001428:	445a      	add	r2, fp
 800142a:	2a00      	cmp	r2, #0
 800142c:	dc00      	bgt.n	8001430 <__aeabi_ddiv+0x190>
 800142e:	e13c      	b.n	80016aa <__aeabi_ddiv+0x40a>
 8001430:	076b      	lsls	r3, r5, #29
 8001432:	d000      	beq.n	8001436 <__aeabi_ddiv+0x196>
 8001434:	e1a7      	b.n	8001786 <__aeabi_ddiv+0x4e6>
 8001436:	08ed      	lsrs	r5, r5, #3
 8001438:	4643      	mov	r3, r8
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	d506      	bpl.n	800144c <__aeabi_ddiv+0x1ac>
 800143e:	4642      	mov	r2, r8
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <__aeabi_ddiv+0x260>)
 8001442:	401a      	ands	r2, r3
 8001444:	4690      	mov	r8, r2
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	445a      	add	r2, fp
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <__aeabi_ddiv+0x264>)
 800144e:	429a      	cmp	r2, r3
 8001450:	dc8e      	bgt.n	8001370 <__aeabi_ddiv+0xd0>
 8001452:	4643      	mov	r3, r8
 8001454:	0552      	lsls	r2, r2, #21
 8001456:	0758      	lsls	r0, r3, #29
 8001458:	025c      	lsls	r4, r3, #9
 800145a:	4305      	orrs	r5, r0
 800145c:	0b24      	lsrs	r4, r4, #12
 800145e:	0d53      	lsrs	r3, r2, #21
 8001460:	e778      	b.n	8001354 <__aeabi_ddiv+0xb4>
 8001462:	46ba      	mov	sl, r7
 8001464:	46a0      	mov	r8, r4
 8001466:	0015      	movs	r5, r2
 8001468:	9000      	str	r0, [sp, #0]
 800146a:	e7d4      	b.n	8001416 <__aeabi_ddiv+0x176>
 800146c:	464a      	mov	r2, r9
 800146e:	2303      	movs	r3, #3
 8001470:	431a      	orrs	r2, r3
 8001472:	4691      	mov	r9, r2
 8001474:	2003      	movs	r0, #3
 8001476:	4652      	mov	r2, sl
 8001478:	e74f      	b.n	800131a <__aeabi_ddiv+0x7a>
 800147a:	4649      	mov	r1, r9
 800147c:	2301      	movs	r3, #1
 800147e:	4319      	orrs	r1, r3
 8001480:	4689      	mov	r9, r1
 8001482:	2400      	movs	r4, #0
 8001484:	2001      	movs	r0, #1
 8001486:	e748      	b.n	800131a <__aeabi_ddiv+0x7a>
 8001488:	230c      	movs	r3, #12
 800148a:	4699      	mov	r9, r3
 800148c:	3b09      	subs	r3, #9
 800148e:	46a0      	mov	r8, r4
 8001490:	4683      	mov	fp, r0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	e728      	b.n	80012e8 <__aeabi_ddiv+0x48>
 8001496:	2304      	movs	r3, #4
 8001498:	4699      	mov	r9, r3
 800149a:	2300      	movs	r3, #0
 800149c:	469b      	mov	fp, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	2500      	movs	r5, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	e720      	b.n	80012e8 <__aeabi_ddiv+0x48>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	469a      	mov	sl, r3
 80014ac:	2500      	movs	r5, #0
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <__aeabi_ddiv+0x244>)
 80014b0:	0324      	lsls	r4, r4, #12
 80014b2:	e74f      	b.n	8001354 <__aeabi_ddiv+0xb4>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	4641      	mov	r1, r8
 80014b8:	031b      	lsls	r3, r3, #12
 80014ba:	4219      	tst	r1, r3
 80014bc:	d008      	beq.n	80014d0 <__aeabi_ddiv+0x230>
 80014be:	421c      	tst	r4, r3
 80014c0:	d106      	bne.n	80014d0 <__aeabi_ddiv+0x230>
 80014c2:	431c      	orrs	r4, r3
 80014c4:	0324      	lsls	r4, r4, #12
 80014c6:	46ba      	mov	sl, r7
 80014c8:	0015      	movs	r5, r2
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <__aeabi_ddiv+0x244>)
 80014cc:	0b24      	lsrs	r4, r4, #12
 80014ce:	e741      	b.n	8001354 <__aeabi_ddiv+0xb4>
 80014d0:	2480      	movs	r4, #128	; 0x80
 80014d2:	4643      	mov	r3, r8
 80014d4:	0324      	lsls	r4, r4, #12
 80014d6:	431c      	orrs	r4, r3
 80014d8:	0324      	lsls	r4, r4, #12
 80014da:	46b2      	mov	sl, r6
 80014dc:	4b01      	ldr	r3, [pc, #4]	; (80014e4 <__aeabi_ddiv+0x244>)
 80014de:	0b24      	lsrs	r4, r4, #12
 80014e0:	e738      	b.n	8001354 <__aeabi_ddiv+0xb4>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	000007ff 	.word	0x000007ff
 80014e8:	fffffc01 	.word	0xfffffc01
 80014ec:	0800ac28 	.word	0x0800ac28
 80014f0:	fffff801 	.word	0xfffff801
 80014f4:	fffffc0d 	.word	0xfffffc0d
 80014f8:	000003f3 	.word	0x000003f3
 80014fc:	000003ff 	.word	0x000003ff
 8001500:	feffffff 	.word	0xfeffffff
 8001504:	000007fe 	.word	0x000007fe
 8001508:	4544      	cmp	r4, r8
 800150a:	d200      	bcs.n	800150e <__aeabi_ddiv+0x26e>
 800150c:	e116      	b.n	800173c <__aeabi_ddiv+0x49c>
 800150e:	d100      	bne.n	8001512 <__aeabi_ddiv+0x272>
 8001510:	e111      	b.n	8001736 <__aeabi_ddiv+0x496>
 8001512:	2301      	movs	r3, #1
 8001514:	425b      	negs	r3, r3
 8001516:	469c      	mov	ip, r3
 8001518:	002e      	movs	r6, r5
 800151a:	4640      	mov	r0, r8
 800151c:	2500      	movs	r5, #0
 800151e:	44e3      	add	fp, ip
 8001520:	0223      	lsls	r3, r4, #8
 8001522:	0e14      	lsrs	r4, r2, #24
 8001524:	431c      	orrs	r4, r3
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	4699      	mov	r9, r3
 800152a:	0423      	lsls	r3, r4, #16
 800152c:	0c1f      	lsrs	r7, r3, #16
 800152e:	0212      	lsls	r2, r2, #8
 8001530:	4649      	mov	r1, r9
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	9701      	str	r7, [sp, #4]
 8001536:	f7fe fe87 	bl	8000248 <__aeabi_uidivmod>
 800153a:	0002      	movs	r2, r0
 800153c:	437a      	muls	r2, r7
 800153e:	040b      	lsls	r3, r1, #16
 8001540:	0c31      	lsrs	r1, r6, #16
 8001542:	4680      	mov	r8, r0
 8001544:	4319      	orrs	r1, r3
 8001546:	428a      	cmp	r2, r1
 8001548:	d90b      	bls.n	8001562 <__aeabi_ddiv+0x2c2>
 800154a:	2301      	movs	r3, #1
 800154c:	425b      	negs	r3, r3
 800154e:	469c      	mov	ip, r3
 8001550:	1909      	adds	r1, r1, r4
 8001552:	44e0      	add	r8, ip
 8001554:	428c      	cmp	r4, r1
 8001556:	d804      	bhi.n	8001562 <__aeabi_ddiv+0x2c2>
 8001558:	428a      	cmp	r2, r1
 800155a:	d902      	bls.n	8001562 <__aeabi_ddiv+0x2c2>
 800155c:	1e83      	subs	r3, r0, #2
 800155e:	4698      	mov	r8, r3
 8001560:	1909      	adds	r1, r1, r4
 8001562:	1a88      	subs	r0, r1, r2
 8001564:	4649      	mov	r1, r9
 8001566:	f7fe fe6f 	bl	8000248 <__aeabi_uidivmod>
 800156a:	0409      	lsls	r1, r1, #16
 800156c:	468c      	mov	ip, r1
 800156e:	0431      	lsls	r1, r6, #16
 8001570:	4666      	mov	r6, ip
 8001572:	9a01      	ldr	r2, [sp, #4]
 8001574:	0c09      	lsrs	r1, r1, #16
 8001576:	4342      	muls	r2, r0
 8001578:	0003      	movs	r3, r0
 800157a:	4331      	orrs	r1, r6
 800157c:	428a      	cmp	r2, r1
 800157e:	d904      	bls.n	800158a <__aeabi_ddiv+0x2ea>
 8001580:	1909      	adds	r1, r1, r4
 8001582:	3b01      	subs	r3, #1
 8001584:	428c      	cmp	r4, r1
 8001586:	d800      	bhi.n	800158a <__aeabi_ddiv+0x2ea>
 8001588:	e111      	b.n	80017ae <__aeabi_ddiv+0x50e>
 800158a:	1a89      	subs	r1, r1, r2
 800158c:	4642      	mov	r2, r8
 800158e:	9e00      	ldr	r6, [sp, #0]
 8001590:	0412      	lsls	r2, r2, #16
 8001592:	431a      	orrs	r2, r3
 8001594:	0c33      	lsrs	r3, r6, #16
 8001596:	001f      	movs	r7, r3
 8001598:	0c10      	lsrs	r0, r2, #16
 800159a:	4690      	mov	r8, r2
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	0413      	lsls	r3, r2, #16
 80015a0:	0432      	lsls	r2, r6, #16
 80015a2:	0c16      	lsrs	r6, r2, #16
 80015a4:	0032      	movs	r2, r6
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	435a      	muls	r2, r3
 80015aa:	9603      	str	r6, [sp, #12]
 80015ac:	437b      	muls	r3, r7
 80015ae:	4346      	muls	r6, r0
 80015b0:	4378      	muls	r0, r7
 80015b2:	0c17      	lsrs	r7, r2, #16
 80015b4:	46bc      	mov	ip, r7
 80015b6:	199b      	adds	r3, r3, r6
 80015b8:	4463      	add	r3, ip
 80015ba:	429e      	cmp	r6, r3
 80015bc:	d903      	bls.n	80015c6 <__aeabi_ddiv+0x326>
 80015be:	2680      	movs	r6, #128	; 0x80
 80015c0:	0276      	lsls	r6, r6, #9
 80015c2:	46b4      	mov	ip, r6
 80015c4:	4460      	add	r0, ip
 80015c6:	0c1e      	lsrs	r6, r3, #16
 80015c8:	1830      	adds	r0, r6, r0
 80015ca:	0416      	lsls	r6, r2, #16
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	0c36      	lsrs	r6, r6, #16
 80015d0:	199e      	adds	r6, r3, r6
 80015d2:	4281      	cmp	r1, r0
 80015d4:	d200      	bcs.n	80015d8 <__aeabi_ddiv+0x338>
 80015d6:	e09c      	b.n	8001712 <__aeabi_ddiv+0x472>
 80015d8:	d100      	bne.n	80015dc <__aeabi_ddiv+0x33c>
 80015da:	e097      	b.n	800170c <__aeabi_ddiv+0x46c>
 80015dc:	1bae      	subs	r6, r5, r6
 80015de:	1a09      	subs	r1, r1, r0
 80015e0:	42b5      	cmp	r5, r6
 80015e2:	4180      	sbcs	r0, r0
 80015e4:	4240      	negs	r0, r0
 80015e6:	1a08      	subs	r0, r1, r0
 80015e8:	4284      	cmp	r4, r0
 80015ea:	d100      	bne.n	80015ee <__aeabi_ddiv+0x34e>
 80015ec:	e111      	b.n	8001812 <__aeabi_ddiv+0x572>
 80015ee:	4649      	mov	r1, r9
 80015f0:	f7fe fe2a 	bl	8000248 <__aeabi_uidivmod>
 80015f4:	9a01      	ldr	r2, [sp, #4]
 80015f6:	040b      	lsls	r3, r1, #16
 80015f8:	4342      	muls	r2, r0
 80015fa:	0c31      	lsrs	r1, r6, #16
 80015fc:	0005      	movs	r5, r0
 80015fe:	4319      	orrs	r1, r3
 8001600:	428a      	cmp	r2, r1
 8001602:	d907      	bls.n	8001614 <__aeabi_ddiv+0x374>
 8001604:	1909      	adds	r1, r1, r4
 8001606:	3d01      	subs	r5, #1
 8001608:	428c      	cmp	r4, r1
 800160a:	d803      	bhi.n	8001614 <__aeabi_ddiv+0x374>
 800160c:	428a      	cmp	r2, r1
 800160e:	d901      	bls.n	8001614 <__aeabi_ddiv+0x374>
 8001610:	1e85      	subs	r5, r0, #2
 8001612:	1909      	adds	r1, r1, r4
 8001614:	1a88      	subs	r0, r1, r2
 8001616:	4649      	mov	r1, r9
 8001618:	f7fe fe16 	bl	8000248 <__aeabi_uidivmod>
 800161c:	0409      	lsls	r1, r1, #16
 800161e:	468c      	mov	ip, r1
 8001620:	0431      	lsls	r1, r6, #16
 8001622:	4666      	mov	r6, ip
 8001624:	9a01      	ldr	r2, [sp, #4]
 8001626:	0c09      	lsrs	r1, r1, #16
 8001628:	4342      	muls	r2, r0
 800162a:	0003      	movs	r3, r0
 800162c:	4331      	orrs	r1, r6
 800162e:	428a      	cmp	r2, r1
 8001630:	d907      	bls.n	8001642 <__aeabi_ddiv+0x3a2>
 8001632:	1909      	adds	r1, r1, r4
 8001634:	3b01      	subs	r3, #1
 8001636:	428c      	cmp	r4, r1
 8001638:	d803      	bhi.n	8001642 <__aeabi_ddiv+0x3a2>
 800163a:	428a      	cmp	r2, r1
 800163c:	d901      	bls.n	8001642 <__aeabi_ddiv+0x3a2>
 800163e:	1e83      	subs	r3, r0, #2
 8001640:	1909      	adds	r1, r1, r4
 8001642:	9e03      	ldr	r6, [sp, #12]
 8001644:	1a89      	subs	r1, r1, r2
 8001646:	0032      	movs	r2, r6
 8001648:	042d      	lsls	r5, r5, #16
 800164a:	431d      	orrs	r5, r3
 800164c:	9f02      	ldr	r7, [sp, #8]
 800164e:	042b      	lsls	r3, r5, #16
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	435a      	muls	r2, r3
 8001654:	437b      	muls	r3, r7
 8001656:	469c      	mov	ip, r3
 8001658:	0c28      	lsrs	r0, r5, #16
 800165a:	4346      	muls	r6, r0
 800165c:	0c13      	lsrs	r3, r2, #16
 800165e:	44b4      	add	ip, r6
 8001660:	4463      	add	r3, ip
 8001662:	4378      	muls	r0, r7
 8001664:	429e      	cmp	r6, r3
 8001666:	d903      	bls.n	8001670 <__aeabi_ddiv+0x3d0>
 8001668:	2680      	movs	r6, #128	; 0x80
 800166a:	0276      	lsls	r6, r6, #9
 800166c:	46b4      	mov	ip, r6
 800166e:	4460      	add	r0, ip
 8001670:	0c1e      	lsrs	r6, r3, #16
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	0c12      	lsrs	r2, r2, #16
 8001678:	1830      	adds	r0, r6, r0
 800167a:	189b      	adds	r3, r3, r2
 800167c:	4281      	cmp	r1, r0
 800167e:	d306      	bcc.n	800168e <__aeabi_ddiv+0x3ee>
 8001680:	d002      	beq.n	8001688 <__aeabi_ddiv+0x3e8>
 8001682:	2301      	movs	r3, #1
 8001684:	431d      	orrs	r5, r3
 8001686:	e6ce      	b.n	8001426 <__aeabi_ddiv+0x186>
 8001688:	2b00      	cmp	r3, #0
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x3ee>
 800168c:	e6cb      	b.n	8001426 <__aeabi_ddiv+0x186>
 800168e:	1861      	adds	r1, r4, r1
 8001690:	1e6e      	subs	r6, r5, #1
 8001692:	42a1      	cmp	r1, r4
 8001694:	d200      	bcs.n	8001698 <__aeabi_ddiv+0x3f8>
 8001696:	e0a4      	b.n	80017e2 <__aeabi_ddiv+0x542>
 8001698:	4281      	cmp	r1, r0
 800169a:	d200      	bcs.n	800169e <__aeabi_ddiv+0x3fe>
 800169c:	e0c9      	b.n	8001832 <__aeabi_ddiv+0x592>
 800169e:	d100      	bne.n	80016a2 <__aeabi_ddiv+0x402>
 80016a0:	e0d9      	b.n	8001856 <__aeabi_ddiv+0x5b6>
 80016a2:	0035      	movs	r5, r6
 80016a4:	e7ed      	b.n	8001682 <__aeabi_ddiv+0x3e2>
 80016a6:	2501      	movs	r5, #1
 80016a8:	426d      	negs	r5, r5
 80016aa:	2101      	movs	r1, #1
 80016ac:	1a89      	subs	r1, r1, r2
 80016ae:	2938      	cmp	r1, #56	; 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_ddiv+0x414>
 80016b2:	e64c      	b.n	800134e <__aeabi_ddiv+0xae>
 80016b4:	291f      	cmp	r1, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_ddiv+0x41a>
 80016b8:	e07f      	b.n	80017ba <__aeabi_ddiv+0x51a>
 80016ba:	231f      	movs	r3, #31
 80016bc:	425b      	negs	r3, r3
 80016be:	1a9a      	subs	r2, r3, r2
 80016c0:	4643      	mov	r3, r8
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	2920      	cmp	r1, #32
 80016c6:	d004      	beq.n	80016d2 <__aeabi_ddiv+0x432>
 80016c8:	4644      	mov	r4, r8
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <__aeabi_ddiv+0x5c0>)
 80016cc:	445a      	add	r2, fp
 80016ce:	4094      	lsls	r4, r2
 80016d0:	4325      	orrs	r5, r4
 80016d2:	1e6a      	subs	r2, r5, #1
 80016d4:	4195      	sbcs	r5, r2
 80016d6:	2207      	movs	r2, #7
 80016d8:	432b      	orrs	r3, r5
 80016da:	0015      	movs	r5, r2
 80016dc:	2400      	movs	r4, #0
 80016de:	401d      	ands	r5, r3
 80016e0:	421a      	tst	r2, r3
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x446>
 80016e4:	e0a1      	b.n	800182a <__aeabi_ddiv+0x58a>
 80016e6:	220f      	movs	r2, #15
 80016e8:	2400      	movs	r4, #0
 80016ea:	401a      	ands	r2, r3
 80016ec:	2a04      	cmp	r2, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_ddiv+0x452>
 80016f0:	e098      	b.n	8001824 <__aeabi_ddiv+0x584>
 80016f2:	1d1a      	adds	r2, r3, #4
 80016f4:	429a      	cmp	r2, r3
 80016f6:	419b      	sbcs	r3, r3
 80016f8:	425b      	negs	r3, r3
 80016fa:	18e4      	adds	r4, r4, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	0222      	lsls	r2, r4, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_ddiv+0x464>
 8001702:	e08f      	b.n	8001824 <__aeabi_ddiv+0x584>
 8001704:	2301      	movs	r3, #1
 8001706:	2400      	movs	r4, #0
 8001708:	2500      	movs	r5, #0
 800170a:	e623      	b.n	8001354 <__aeabi_ddiv+0xb4>
 800170c:	42b5      	cmp	r5, r6
 800170e:	d300      	bcc.n	8001712 <__aeabi_ddiv+0x472>
 8001710:	e764      	b.n	80015dc <__aeabi_ddiv+0x33c>
 8001712:	4643      	mov	r3, r8
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	469c      	mov	ip, r3
 800171a:	4465      	add	r5, ip
 800171c:	001f      	movs	r7, r3
 800171e:	429d      	cmp	r5, r3
 8001720:	419b      	sbcs	r3, r3
 8001722:	425b      	negs	r3, r3
 8001724:	191b      	adds	r3, r3, r4
 8001726:	18c9      	adds	r1, r1, r3
 8001728:	428c      	cmp	r4, r1
 800172a:	d23a      	bcs.n	80017a2 <__aeabi_ddiv+0x502>
 800172c:	4288      	cmp	r0, r1
 800172e:	d863      	bhi.n	80017f8 <__aeabi_ddiv+0x558>
 8001730:	d060      	beq.n	80017f4 <__aeabi_ddiv+0x554>
 8001732:	4690      	mov	r8, r2
 8001734:	e752      	b.n	80015dc <__aeabi_ddiv+0x33c>
 8001736:	42aa      	cmp	r2, r5
 8001738:	d900      	bls.n	800173c <__aeabi_ddiv+0x49c>
 800173a:	e6ea      	b.n	8001512 <__aeabi_ddiv+0x272>
 800173c:	4643      	mov	r3, r8
 800173e:	07de      	lsls	r6, r3, #31
 8001740:	0858      	lsrs	r0, r3, #1
 8001742:	086b      	lsrs	r3, r5, #1
 8001744:	431e      	orrs	r6, r3
 8001746:	07ed      	lsls	r5, r5, #31
 8001748:	e6ea      	b.n	8001520 <__aeabi_ddiv+0x280>
 800174a:	4648      	mov	r0, r9
 800174c:	f001 f926 	bl	800299c <__clzsi2>
 8001750:	0001      	movs	r1, r0
 8001752:	0002      	movs	r2, r0
 8001754:	3115      	adds	r1, #21
 8001756:	3220      	adds	r2, #32
 8001758:	291c      	cmp	r1, #28
 800175a:	dc00      	bgt.n	800175e <__aeabi_ddiv+0x4be>
 800175c:	e61a      	b.n	8001394 <__aeabi_ddiv+0xf4>
 800175e:	464b      	mov	r3, r9
 8001760:	3808      	subs	r0, #8
 8001762:	4083      	lsls	r3, r0
 8001764:	2500      	movs	r5, #0
 8001766:	4698      	mov	r8, r3
 8001768:	e620      	b.n	80013ac <__aeabi_ddiv+0x10c>
 800176a:	f001 f917 	bl	800299c <__clzsi2>
 800176e:	0003      	movs	r3, r0
 8001770:	001a      	movs	r2, r3
 8001772:	3215      	adds	r2, #21
 8001774:	3020      	adds	r0, #32
 8001776:	2a1c      	cmp	r2, #28
 8001778:	dc00      	bgt.n	800177c <__aeabi_ddiv+0x4dc>
 800177a:	e630      	b.n	80013de <__aeabi_ddiv+0x13e>
 800177c:	4654      	mov	r4, sl
 800177e:	3b08      	subs	r3, #8
 8001780:	2200      	movs	r2, #0
 8001782:	409c      	lsls	r4, r3
 8001784:	e635      	b.n	80013f2 <__aeabi_ddiv+0x152>
 8001786:	230f      	movs	r3, #15
 8001788:	402b      	ands	r3, r5
 800178a:	2b04      	cmp	r3, #4
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x4f0>
 800178e:	e652      	b.n	8001436 <__aeabi_ddiv+0x196>
 8001790:	2305      	movs	r3, #5
 8001792:	425b      	negs	r3, r3
 8001794:	42ab      	cmp	r3, r5
 8001796:	419b      	sbcs	r3, r3
 8001798:	3504      	adds	r5, #4
 800179a:	425b      	negs	r3, r3
 800179c:	08ed      	lsrs	r5, r5, #3
 800179e:	4498      	add	r8, r3
 80017a0:	e64a      	b.n	8001438 <__aeabi_ddiv+0x198>
 80017a2:	428c      	cmp	r4, r1
 80017a4:	d1c5      	bne.n	8001732 <__aeabi_ddiv+0x492>
 80017a6:	42af      	cmp	r7, r5
 80017a8:	d9c0      	bls.n	800172c <__aeabi_ddiv+0x48c>
 80017aa:	4690      	mov	r8, r2
 80017ac:	e716      	b.n	80015dc <__aeabi_ddiv+0x33c>
 80017ae:	428a      	cmp	r2, r1
 80017b0:	d800      	bhi.n	80017b4 <__aeabi_ddiv+0x514>
 80017b2:	e6ea      	b.n	800158a <__aeabi_ddiv+0x2ea>
 80017b4:	1e83      	subs	r3, r0, #2
 80017b6:	1909      	adds	r1, r1, r4
 80017b8:	e6e7      	b.n	800158a <__aeabi_ddiv+0x2ea>
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <__aeabi_ddiv+0x5c4>)
 80017bc:	0028      	movs	r0, r5
 80017be:	445a      	add	r2, fp
 80017c0:	4643      	mov	r3, r8
 80017c2:	4095      	lsls	r5, r2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	40c8      	lsrs	r0, r1
 80017c8:	1e6a      	subs	r2, r5, #1
 80017ca:	4195      	sbcs	r5, r2
 80017cc:	4644      	mov	r4, r8
 80017ce:	4303      	orrs	r3, r0
 80017d0:	432b      	orrs	r3, r5
 80017d2:	40cc      	lsrs	r4, r1
 80017d4:	075a      	lsls	r2, r3, #29
 80017d6:	d092      	beq.n	80016fe <__aeabi_ddiv+0x45e>
 80017d8:	220f      	movs	r2, #15
 80017da:	401a      	ands	r2, r3
 80017dc:	2a04      	cmp	r2, #4
 80017de:	d188      	bne.n	80016f2 <__aeabi_ddiv+0x452>
 80017e0:	e78d      	b.n	80016fe <__aeabi_ddiv+0x45e>
 80017e2:	0035      	movs	r5, r6
 80017e4:	4281      	cmp	r1, r0
 80017e6:	d000      	beq.n	80017ea <__aeabi_ddiv+0x54a>
 80017e8:	e74b      	b.n	8001682 <__aeabi_ddiv+0x3e2>
 80017ea:	9a00      	ldr	r2, [sp, #0]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d000      	beq.n	80017f2 <__aeabi_ddiv+0x552>
 80017f0:	e747      	b.n	8001682 <__aeabi_ddiv+0x3e2>
 80017f2:	e618      	b.n	8001426 <__aeabi_ddiv+0x186>
 80017f4:	42ae      	cmp	r6, r5
 80017f6:	d99c      	bls.n	8001732 <__aeabi_ddiv+0x492>
 80017f8:	2302      	movs	r3, #2
 80017fa:	425b      	negs	r3, r3
 80017fc:	469c      	mov	ip, r3
 80017fe:	9b00      	ldr	r3, [sp, #0]
 8001800:	44e0      	add	r8, ip
 8001802:	469c      	mov	ip, r3
 8001804:	4465      	add	r5, ip
 8001806:	429d      	cmp	r5, r3
 8001808:	419b      	sbcs	r3, r3
 800180a:	425b      	negs	r3, r3
 800180c:	191b      	adds	r3, r3, r4
 800180e:	18c9      	adds	r1, r1, r3
 8001810:	e6e4      	b.n	80015dc <__aeabi_ddiv+0x33c>
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <__aeabi_ddiv+0x5c8>)
 8001814:	445a      	add	r2, fp
 8001816:	2a00      	cmp	r2, #0
 8001818:	dc00      	bgt.n	800181c <__aeabi_ddiv+0x57c>
 800181a:	e744      	b.n	80016a6 <__aeabi_ddiv+0x406>
 800181c:	2301      	movs	r3, #1
 800181e:	2500      	movs	r5, #0
 8001820:	4498      	add	r8, r3
 8001822:	e609      	b.n	8001438 <__aeabi_ddiv+0x198>
 8001824:	0765      	lsls	r5, r4, #29
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	431d      	orrs	r5, r3
 800182e:	2300      	movs	r3, #0
 8001830:	e590      	b.n	8001354 <__aeabi_ddiv+0xb4>
 8001832:	9e00      	ldr	r6, [sp, #0]
 8001834:	3d02      	subs	r5, #2
 8001836:	0072      	lsls	r2, r6, #1
 8001838:	42b2      	cmp	r2, r6
 800183a:	41bf      	sbcs	r7, r7
 800183c:	427f      	negs	r7, r7
 800183e:	193c      	adds	r4, r7, r4
 8001840:	1909      	adds	r1, r1, r4
 8001842:	9200      	str	r2, [sp, #0]
 8001844:	e7ce      	b.n	80017e4 <__aeabi_ddiv+0x544>
 8001846:	2480      	movs	r4, #128	; 0x80
 8001848:	4643      	mov	r3, r8
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	431c      	orrs	r4, r3
 800184e:	0324      	lsls	r4, r4, #12
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <__aeabi_ddiv+0x5cc>)
 8001852:	0b24      	lsrs	r4, r4, #12
 8001854:	e57e      	b.n	8001354 <__aeabi_ddiv+0xb4>
 8001856:	9a00      	ldr	r2, [sp, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3ea      	bcc.n	8001832 <__aeabi_ddiv+0x592>
 800185c:	0035      	movs	r5, r6
 800185e:	e7c4      	b.n	80017ea <__aeabi_ddiv+0x54a>
 8001860:	0000043e 	.word	0x0000043e
 8001864:	0000041e 	.word	0x0000041e
 8001868:	000003ff 	.word	0x000003ff
 800186c:	000007ff 	.word	0x000007ff

08001870 <__eqdf2>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	464f      	mov	r7, r9
 8001874:	4646      	mov	r6, r8
 8001876:	46d6      	mov	lr, sl
 8001878:	4694      	mov	ip, r2
 800187a:	4691      	mov	r9, r2
 800187c:	031a      	lsls	r2, r3, #12
 800187e:	0b12      	lsrs	r2, r2, #12
 8001880:	4d18      	ldr	r5, [pc, #96]	; (80018e4 <__eqdf2+0x74>)
 8001882:	b5c0      	push	{r6, r7, lr}
 8001884:	004c      	lsls	r4, r1, #1
 8001886:	030f      	lsls	r7, r1, #12
 8001888:	4692      	mov	sl, r2
 800188a:	005a      	lsls	r2, r3, #1
 800188c:	0006      	movs	r6, r0
 800188e:	4680      	mov	r8, r0
 8001890:	0b3f      	lsrs	r7, r7, #12
 8001892:	2001      	movs	r0, #1
 8001894:	0d64      	lsrs	r4, r4, #21
 8001896:	0fc9      	lsrs	r1, r1, #31
 8001898:	0d52      	lsrs	r2, r2, #21
 800189a:	0fdb      	lsrs	r3, r3, #31
 800189c:	42ac      	cmp	r4, r5
 800189e:	d00a      	beq.n	80018b6 <__eqdf2+0x46>
 80018a0:	42aa      	cmp	r2, r5
 80018a2:	d003      	beq.n	80018ac <__eqdf2+0x3c>
 80018a4:	4294      	cmp	r4, r2
 80018a6:	d101      	bne.n	80018ac <__eqdf2+0x3c>
 80018a8:	4557      	cmp	r7, sl
 80018aa:	d00d      	beq.n	80018c8 <__eqdf2+0x58>
 80018ac:	bce0      	pop	{r5, r6, r7}
 80018ae:	46ba      	mov	sl, r7
 80018b0:	46b1      	mov	r9, r6
 80018b2:	46a8      	mov	r8, r5
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	003d      	movs	r5, r7
 80018b8:	4335      	orrs	r5, r6
 80018ba:	d1f7      	bne.n	80018ac <__eqdf2+0x3c>
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d1f5      	bne.n	80018ac <__eqdf2+0x3c>
 80018c0:	4652      	mov	r2, sl
 80018c2:	4665      	mov	r5, ip
 80018c4:	432a      	orrs	r2, r5
 80018c6:	d1f1      	bne.n	80018ac <__eqdf2+0x3c>
 80018c8:	2001      	movs	r0, #1
 80018ca:	45c8      	cmp	r8, r9
 80018cc:	d1ee      	bne.n	80018ac <__eqdf2+0x3c>
 80018ce:	4299      	cmp	r1, r3
 80018d0:	d006      	beq.n	80018e0 <__eqdf2+0x70>
 80018d2:	2c00      	cmp	r4, #0
 80018d4:	d1ea      	bne.n	80018ac <__eqdf2+0x3c>
 80018d6:	433e      	orrs	r6, r7
 80018d8:	0030      	movs	r0, r6
 80018da:	1e46      	subs	r6, r0, #1
 80018dc:	41b0      	sbcs	r0, r6
 80018de:	e7e5      	b.n	80018ac <__eqdf2+0x3c>
 80018e0:	2000      	movs	r0, #0
 80018e2:	e7e3      	b.n	80018ac <__eqdf2+0x3c>
 80018e4:	000007ff 	.word	0x000007ff

080018e8 <__gedf2>:
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	464e      	mov	r6, r9
 80018ec:	4645      	mov	r5, r8
 80018ee:	4657      	mov	r7, sl
 80018f0:	46de      	mov	lr, fp
 80018f2:	0004      	movs	r4, r0
 80018f4:	0018      	movs	r0, r3
 80018f6:	b5e0      	push	{r5, r6, r7, lr}
 80018f8:	0016      	movs	r6, r2
 80018fa:	031b      	lsls	r3, r3, #12
 80018fc:	0b1b      	lsrs	r3, r3, #12
 80018fe:	4d32      	ldr	r5, [pc, #200]	; (80019c8 <__gedf2+0xe0>)
 8001900:	030f      	lsls	r7, r1, #12
 8001902:	004a      	lsls	r2, r1, #1
 8001904:	4699      	mov	r9, r3
 8001906:	0043      	lsls	r3, r0, #1
 8001908:	46a4      	mov	ip, r4
 800190a:	46b0      	mov	r8, r6
 800190c:	0b3f      	lsrs	r7, r7, #12
 800190e:	0d52      	lsrs	r2, r2, #21
 8001910:	0fc9      	lsrs	r1, r1, #31
 8001912:	0d5b      	lsrs	r3, r3, #21
 8001914:	0fc0      	lsrs	r0, r0, #31
 8001916:	42aa      	cmp	r2, r5
 8001918:	d029      	beq.n	800196e <__gedf2+0x86>
 800191a:	42ab      	cmp	r3, r5
 800191c:	d018      	beq.n	8001950 <__gedf2+0x68>
 800191e:	2a00      	cmp	r2, #0
 8001920:	d12a      	bne.n	8001978 <__gedf2+0x90>
 8001922:	433c      	orrs	r4, r7
 8001924:	46a3      	mov	fp, r4
 8001926:	4265      	negs	r5, r4
 8001928:	4165      	adcs	r5, r4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <__gedf2+0x4c>
 800192e:	464c      	mov	r4, r9
 8001930:	4326      	orrs	r6, r4
 8001932:	d027      	beq.n	8001984 <__gedf2+0x9c>
 8001934:	2d00      	cmp	r5, #0
 8001936:	d115      	bne.n	8001964 <__gedf2+0x7c>
 8001938:	4281      	cmp	r1, r0
 800193a:	d028      	beq.n	800198e <__gedf2+0xa6>
 800193c:	2002      	movs	r0, #2
 800193e:	3901      	subs	r1, #1
 8001940:	4008      	ands	r0, r1
 8001942:	3801      	subs	r0, #1
 8001944:	bcf0      	pop	{r4, r5, r6, r7}
 8001946:	46bb      	mov	fp, r7
 8001948:	46b2      	mov	sl, r6
 800194a:	46a9      	mov	r9, r5
 800194c:	46a0      	mov	r8, r4
 800194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001950:	464d      	mov	r5, r9
 8001952:	432e      	orrs	r6, r5
 8001954:	d12f      	bne.n	80019b6 <__gedf2+0xce>
 8001956:	2a00      	cmp	r2, #0
 8001958:	d1ee      	bne.n	8001938 <__gedf2+0x50>
 800195a:	433c      	orrs	r4, r7
 800195c:	4265      	negs	r5, r4
 800195e:	4165      	adcs	r5, r4
 8001960:	2d00      	cmp	r5, #0
 8001962:	d0e9      	beq.n	8001938 <__gedf2+0x50>
 8001964:	2800      	cmp	r0, #0
 8001966:	d1ed      	bne.n	8001944 <__gedf2+0x5c>
 8001968:	2001      	movs	r0, #1
 800196a:	4240      	negs	r0, r0
 800196c:	e7ea      	b.n	8001944 <__gedf2+0x5c>
 800196e:	003d      	movs	r5, r7
 8001970:	4325      	orrs	r5, r4
 8001972:	d120      	bne.n	80019b6 <__gedf2+0xce>
 8001974:	4293      	cmp	r3, r2
 8001976:	d0eb      	beq.n	8001950 <__gedf2+0x68>
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1dd      	bne.n	8001938 <__gedf2+0x50>
 800197c:	464c      	mov	r4, r9
 800197e:	4326      	orrs	r6, r4
 8001980:	d1da      	bne.n	8001938 <__gedf2+0x50>
 8001982:	e7db      	b.n	800193c <__gedf2+0x54>
 8001984:	465b      	mov	r3, fp
 8001986:	2000      	movs	r0, #0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0db      	beq.n	8001944 <__gedf2+0x5c>
 800198c:	e7d6      	b.n	800193c <__gedf2+0x54>
 800198e:	429a      	cmp	r2, r3
 8001990:	dc0a      	bgt.n	80019a8 <__gedf2+0xc0>
 8001992:	dbe7      	blt.n	8001964 <__gedf2+0x7c>
 8001994:	454f      	cmp	r7, r9
 8001996:	d8d1      	bhi.n	800193c <__gedf2+0x54>
 8001998:	d010      	beq.n	80019bc <__gedf2+0xd4>
 800199a:	2000      	movs	r0, #0
 800199c:	454f      	cmp	r7, r9
 800199e:	d2d1      	bcs.n	8001944 <__gedf2+0x5c>
 80019a0:	2900      	cmp	r1, #0
 80019a2:	d0e1      	beq.n	8001968 <__gedf2+0x80>
 80019a4:	0008      	movs	r0, r1
 80019a6:	e7cd      	b.n	8001944 <__gedf2+0x5c>
 80019a8:	4243      	negs	r3, r0
 80019aa:	4158      	adcs	r0, r3
 80019ac:	2302      	movs	r3, #2
 80019ae:	4240      	negs	r0, r0
 80019b0:	4018      	ands	r0, r3
 80019b2:	3801      	subs	r0, #1
 80019b4:	e7c6      	b.n	8001944 <__gedf2+0x5c>
 80019b6:	2002      	movs	r0, #2
 80019b8:	4240      	negs	r0, r0
 80019ba:	e7c3      	b.n	8001944 <__gedf2+0x5c>
 80019bc:	45c4      	cmp	ip, r8
 80019be:	d8bd      	bhi.n	800193c <__gedf2+0x54>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d2be      	bcs.n	8001944 <__gedf2+0x5c>
 80019c6:	e7eb      	b.n	80019a0 <__gedf2+0xb8>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__ledf2>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	464e      	mov	r6, r9
 80019d0:	4645      	mov	r5, r8
 80019d2:	4657      	mov	r7, sl
 80019d4:	46de      	mov	lr, fp
 80019d6:	0004      	movs	r4, r0
 80019d8:	0018      	movs	r0, r3
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	0016      	movs	r6, r2
 80019de:	031b      	lsls	r3, r3, #12
 80019e0:	0b1b      	lsrs	r3, r3, #12
 80019e2:	4d31      	ldr	r5, [pc, #196]	; (8001aa8 <__ledf2+0xdc>)
 80019e4:	030f      	lsls	r7, r1, #12
 80019e6:	004a      	lsls	r2, r1, #1
 80019e8:	4699      	mov	r9, r3
 80019ea:	0043      	lsls	r3, r0, #1
 80019ec:	46a4      	mov	ip, r4
 80019ee:	46b0      	mov	r8, r6
 80019f0:	0b3f      	lsrs	r7, r7, #12
 80019f2:	0d52      	lsrs	r2, r2, #21
 80019f4:	0fc9      	lsrs	r1, r1, #31
 80019f6:	0d5b      	lsrs	r3, r3, #21
 80019f8:	0fc0      	lsrs	r0, r0, #31
 80019fa:	42aa      	cmp	r2, r5
 80019fc:	d011      	beq.n	8001a22 <__ledf2+0x56>
 80019fe:	42ab      	cmp	r3, r5
 8001a00:	d014      	beq.n	8001a2c <__ledf2+0x60>
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	d12f      	bne.n	8001a66 <__ledf2+0x9a>
 8001a06:	433c      	orrs	r4, r7
 8001a08:	46a3      	mov	fp, r4
 8001a0a:	4265      	negs	r5, r4
 8001a0c:	4165      	adcs	r5, r4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d114      	bne.n	8001a3c <__ledf2+0x70>
 8001a12:	464c      	mov	r4, r9
 8001a14:	4326      	orrs	r6, r4
 8001a16:	d111      	bne.n	8001a3c <__ledf2+0x70>
 8001a18:	465b      	mov	r3, fp
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d017      	beq.n	8001a50 <__ledf2+0x84>
 8001a20:	e010      	b.n	8001a44 <__ledf2+0x78>
 8001a22:	003d      	movs	r5, r7
 8001a24:	4325      	orrs	r5, r4
 8001a26:	d112      	bne.n	8001a4e <__ledf2+0x82>
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d11c      	bne.n	8001a66 <__ledf2+0x9a>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	432e      	orrs	r6, r5
 8001a30:	d10d      	bne.n	8001a4e <__ledf2+0x82>
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d104      	bne.n	8001a40 <__ledf2+0x74>
 8001a36:	433c      	orrs	r4, r7
 8001a38:	4265      	negs	r5, r4
 8001a3a:	4165      	adcs	r5, r4
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	d10d      	bne.n	8001a5c <__ledf2+0x90>
 8001a40:	4281      	cmp	r1, r0
 8001a42:	d016      	beq.n	8001a72 <__ledf2+0xa6>
 8001a44:	2002      	movs	r0, #2
 8001a46:	3901      	subs	r1, #1
 8001a48:	4008      	ands	r0, r1
 8001a4a:	3801      	subs	r0, #1
 8001a4c:	e000      	b.n	8001a50 <__ledf2+0x84>
 8001a4e:	2002      	movs	r0, #2
 8001a50:	bcf0      	pop	{r4, r5, r6, r7}
 8001a52:	46bb      	mov	fp, r7
 8001a54:	46b2      	mov	sl, r6
 8001a56:	46a9      	mov	r9, r5
 8001a58:	46a0      	mov	r8, r4
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1f7      	bne.n	8001a50 <__ledf2+0x84>
 8001a60:	2001      	movs	r0, #1
 8001a62:	4240      	negs	r0, r0
 8001a64:	e7f4      	b.n	8001a50 <__ledf2+0x84>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ea      	bne.n	8001a40 <__ledf2+0x74>
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	4326      	orrs	r6, r4
 8001a6e:	d1e7      	bne.n	8001a40 <__ledf2+0x74>
 8001a70:	e7e8      	b.n	8001a44 <__ledf2+0x78>
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dd06      	ble.n	8001a84 <__ledf2+0xb8>
 8001a76:	4243      	negs	r3, r0
 8001a78:	4158      	adcs	r0, r3
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	4018      	ands	r0, r3
 8001a80:	3801      	subs	r0, #1
 8001a82:	e7e5      	b.n	8001a50 <__ledf2+0x84>
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbe9      	blt.n	8001a5c <__ledf2+0x90>
 8001a88:	454f      	cmp	r7, r9
 8001a8a:	d8db      	bhi.n	8001a44 <__ledf2+0x78>
 8001a8c:	d006      	beq.n	8001a9c <__ledf2+0xd0>
 8001a8e:	2000      	movs	r0, #0
 8001a90:	454f      	cmp	r7, r9
 8001a92:	d2dd      	bcs.n	8001a50 <__ledf2+0x84>
 8001a94:	2900      	cmp	r1, #0
 8001a96:	d0e3      	beq.n	8001a60 <__ledf2+0x94>
 8001a98:	0008      	movs	r0, r1
 8001a9a:	e7d9      	b.n	8001a50 <__ledf2+0x84>
 8001a9c:	45c4      	cmp	ip, r8
 8001a9e:	d8d1      	bhi.n	8001a44 <__ledf2+0x78>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	45c4      	cmp	ip, r8
 8001aa4:	d2d4      	bcs.n	8001a50 <__ledf2+0x84>
 8001aa6:	e7f5      	b.n	8001a94 <__ledf2+0xc8>
 8001aa8:	000007ff 	.word	0x000007ff

08001aac <__aeabi_dmul>:
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	4657      	mov	r7, sl
 8001ab0:	464e      	mov	r6, r9
 8001ab2:	4645      	mov	r5, r8
 8001ab4:	46de      	mov	lr, fp
 8001ab6:	b5e0      	push	{r5, r6, r7, lr}
 8001ab8:	4698      	mov	r8, r3
 8001aba:	030c      	lsls	r4, r1, #12
 8001abc:	004b      	lsls	r3, r1, #1
 8001abe:	0006      	movs	r6, r0
 8001ac0:	4692      	mov	sl, r2
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	0b24      	lsrs	r4, r4, #12
 8001ac6:	0d5b      	lsrs	r3, r3, #21
 8001ac8:	0fcf      	lsrs	r7, r1, #31
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06c      	beq.n	8001ba8 <__aeabi_dmul+0xfc>
 8001ace:	4add      	ldr	r2, [pc, #884]	; (8001e44 <__aeabi_dmul+0x398>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dmul+0x2a>
 8001ad4:	e086      	b.n	8001be4 <__aeabi_dmul+0x138>
 8001ad6:	0f42      	lsrs	r2, r0, #29
 8001ad8:	00e4      	lsls	r4, r4, #3
 8001ada:	4314      	orrs	r4, r2
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0412      	lsls	r2, r2, #16
 8001ae0:	4314      	orrs	r4, r2
 8001ae2:	4ad9      	ldr	r2, [pc, #868]	; (8001e48 <__aeabi_dmul+0x39c>)
 8001ae4:	00c5      	lsls	r5, r0, #3
 8001ae6:	4694      	mov	ip, r2
 8001ae8:	4463      	add	r3, ip
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	4699      	mov	r9, r3
 8001af0:	469b      	mov	fp, r3
 8001af2:	4643      	mov	r3, r8
 8001af4:	4642      	mov	r2, r8
 8001af6:	031e      	lsls	r6, r3, #12
 8001af8:	0fd2      	lsrs	r2, r2, #31
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4650      	mov	r0, sl
 8001afe:	4690      	mov	r8, r2
 8001b00:	0b36      	lsrs	r6, r6, #12
 8001b02:	0d5b      	lsrs	r3, r3, #21
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dmul+0x5c>
 8001b06:	e078      	b.n	8001bfa <__aeabi_dmul+0x14e>
 8001b08:	4ace      	ldr	r2, [pc, #824]	; (8001e44 <__aeabi_dmul+0x398>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01d      	beq.n	8001b4a <__aeabi_dmul+0x9e>
 8001b0e:	49ce      	ldr	r1, [pc, #824]	; (8001e48 <__aeabi_dmul+0x39c>)
 8001b10:	0f42      	lsrs	r2, r0, #29
 8001b12:	468c      	mov	ip, r1
 8001b14:	9900      	ldr	r1, [sp, #0]
 8001b16:	4463      	add	r3, ip
 8001b18:	00f6      	lsls	r6, r6, #3
 8001b1a:	468c      	mov	ip, r1
 8001b1c:	4316      	orrs	r6, r2
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	449c      	add	ip, r3
 8001b22:	0412      	lsls	r2, r2, #16
 8001b24:	4663      	mov	r3, ip
 8001b26:	4316      	orrs	r6, r2
 8001b28:	00c2      	lsls	r2, r0, #3
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	9900      	ldr	r1, [sp, #0]
 8001b30:	4643      	mov	r3, r8
 8001b32:	3101      	adds	r1, #1
 8001b34:	468c      	mov	ip, r1
 8001b36:	4649      	mov	r1, r9
 8001b38:	407b      	eors	r3, r7
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	290f      	cmp	r1, #15
 8001b3e:	d900      	bls.n	8001b42 <__aeabi_dmul+0x96>
 8001b40:	e07e      	b.n	8001c40 <__aeabi_dmul+0x194>
 8001b42:	4bc2      	ldr	r3, [pc, #776]	; (8001e4c <__aeabi_dmul+0x3a0>)
 8001b44:	0089      	lsls	r1, r1, #2
 8001b46:	5859      	ldr	r1, [r3, r1]
 8001b48:	468f      	mov	pc, r1
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	9b00      	ldr	r3, [sp, #0]
 8001b4e:	4332      	orrs	r2, r6
 8001b50:	d000      	beq.n	8001b54 <__aeabi_dmul+0xa8>
 8001b52:	e156      	b.n	8001e02 <__aeabi_dmul+0x356>
 8001b54:	49bb      	ldr	r1, [pc, #748]	; (8001e44 <__aeabi_dmul+0x398>)
 8001b56:	2600      	movs	r6, #0
 8001b58:	468c      	mov	ip, r1
 8001b5a:	4463      	add	r3, ip
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2302      	movs	r3, #2
 8001b62:	4319      	orrs	r1, r3
 8001b64:	4689      	mov	r9, r1
 8001b66:	2002      	movs	r0, #2
 8001b68:	e7e1      	b.n	8001b2e <__aeabi_dmul+0x82>
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	0034      	movs	r4, r6
 8001b70:	0015      	movs	r5, r2
 8001b72:	4683      	mov	fp, r0
 8001b74:	465b      	mov	r3, fp
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d05e      	beq.n	8001c38 <__aeabi_dmul+0x18c>
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dmul+0xd4>
 8001b7e:	e1f3      	b.n	8001f68 <__aeabi_dmul+0x4bc>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dmul+0xda>
 8001b84:	e118      	b.n	8001db8 <__aeabi_dmul+0x30c>
 8001b86:	2200      	movs	r2, #0
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	9b01      	ldr	r3, [sp, #4]
 8001b8e:	0512      	lsls	r2, r2, #20
 8001b90:	4322      	orrs	r2, r4
 8001b92:	07db      	lsls	r3, r3, #31
 8001b94:	431a      	orrs	r2, r3
 8001b96:	0028      	movs	r0, r5
 8001b98:	0011      	movs	r1, r2
 8001b9a:	b007      	add	sp, #28
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	0025      	movs	r5, r4
 8001baa:	4305      	orrs	r5, r0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dmul+0x104>
 8001bae:	e141      	b.n	8001e34 <__aeabi_dmul+0x388>
 8001bb0:	2c00      	cmp	r4, #0
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dmul+0x10a>
 8001bb4:	e1ad      	b.n	8001f12 <__aeabi_dmul+0x466>
 8001bb6:	0020      	movs	r0, r4
 8001bb8:	f000 fef0 	bl	800299c <__clzsi2>
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	390b      	subs	r1, #11
 8001bc2:	231d      	movs	r3, #29
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	1a5b      	subs	r3, r3, r1
 8001bc8:	0031      	movs	r1, r6
 8001bca:	0035      	movs	r5, r6
 8001bcc:	3808      	subs	r0, #8
 8001bce:	4084      	lsls	r4, r0
 8001bd0:	40d9      	lsrs	r1, r3
 8001bd2:	4085      	lsls	r5, r0
 8001bd4:	430c      	orrs	r4, r1
 8001bd6:	489e      	ldr	r0, [pc, #632]	; (8001e50 <__aeabi_dmul+0x3a4>)
 8001bd8:	1a83      	subs	r3, r0, r2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4699      	mov	r9, r3
 8001be0:	469b      	mov	fp, r3
 8001be2:	e786      	b.n	8001af2 <__aeabi_dmul+0x46>
 8001be4:	0005      	movs	r5, r0
 8001be6:	4325      	orrs	r5, r4
 8001be8:	d000      	beq.n	8001bec <__aeabi_dmul+0x140>
 8001bea:	e11c      	b.n	8001e26 <__aeabi_dmul+0x37a>
 8001bec:	2208      	movs	r2, #8
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	4691      	mov	r9, r2
 8001bf6:	469b      	mov	fp, r3
 8001bf8:	e77b      	b.n	8001af2 <__aeabi_dmul+0x46>
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	4332      	orrs	r2, r6
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0x156>
 8001c00:	e10a      	b.n	8001e18 <__aeabi_dmul+0x36c>
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dmul+0x15c>
 8001c06:	e176      	b.n	8001ef6 <__aeabi_dmul+0x44a>
 8001c08:	0030      	movs	r0, r6
 8001c0a:	f000 fec7 	bl	800299c <__clzsi2>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3a0b      	subs	r2, #11
 8001c12:	231d      	movs	r3, #29
 8001c14:	0001      	movs	r1, r0
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	4652      	mov	r2, sl
 8001c1a:	3908      	subs	r1, #8
 8001c1c:	40da      	lsrs	r2, r3
 8001c1e:	408e      	lsls	r6, r1
 8001c20:	4316      	orrs	r6, r2
 8001c22:	4652      	mov	r2, sl
 8001c24:	408a      	lsls	r2, r1
 8001c26:	9b00      	ldr	r3, [sp, #0]
 8001c28:	4989      	ldr	r1, [pc, #548]	; (8001e50 <__aeabi_dmul+0x3a4>)
 8001c2a:	1a18      	subs	r0, r3, r0
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	468c      	mov	ip, r1
 8001c30:	4463      	add	r3, ip
 8001c32:	2000      	movs	r0, #0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	e77a      	b.n	8001b2e <__aeabi_dmul+0x82>
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <__aeabi_dmul+0x398>)
 8001c3e:	e7a5      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001c40:	0c2f      	lsrs	r7, r5, #16
 8001c42:	042d      	lsls	r5, r5, #16
 8001c44:	0c2d      	lsrs	r5, r5, #16
 8001c46:	002b      	movs	r3, r5
 8001c48:	0c11      	lsrs	r1, r2, #16
 8001c4a:	0412      	lsls	r2, r2, #16
 8001c4c:	0c12      	lsrs	r2, r2, #16
 8001c4e:	4353      	muls	r3, r2
 8001c50:	4698      	mov	r8, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	0028      	movs	r0, r5
 8001c56:	437b      	muls	r3, r7
 8001c58:	4699      	mov	r9, r3
 8001c5a:	4348      	muls	r0, r1
 8001c5c:	4448      	add	r0, r9
 8001c5e:	4683      	mov	fp, r0
 8001c60:	4640      	mov	r0, r8
 8001c62:	000b      	movs	r3, r1
 8001c64:	0c00      	lsrs	r0, r0, #16
 8001c66:	4682      	mov	sl, r0
 8001c68:	4658      	mov	r0, fp
 8001c6a:	437b      	muls	r3, r7
 8001c6c:	4450      	add	r0, sl
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	4581      	cmp	r9, r0
 8001c72:	d906      	bls.n	8001c82 <__aeabi_dmul+0x1d6>
 8001c74:	469a      	mov	sl, r3
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	44ca      	add	sl, r9
 8001c7e:	4653      	mov	r3, sl
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	0c03      	lsrs	r3, r0, #16
 8001c84:	469b      	mov	fp, r3
 8001c86:	4643      	mov	r3, r8
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	0400      	lsls	r0, r0, #16
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	4698      	mov	r8, r3
 8001c90:	0003      	movs	r3, r0
 8001c92:	4443      	add	r3, r8
 8001c94:	9304      	str	r3, [sp, #16]
 8001c96:	0c33      	lsrs	r3, r6, #16
 8001c98:	4699      	mov	r9, r3
 8001c9a:	002b      	movs	r3, r5
 8001c9c:	0436      	lsls	r6, r6, #16
 8001c9e:	0c36      	lsrs	r6, r6, #16
 8001ca0:	4373      	muls	r3, r6
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	0033      	movs	r3, r6
 8001ca6:	437b      	muls	r3, r7
 8001ca8:	469a      	mov	sl, r3
 8001caa:	464b      	mov	r3, r9
 8001cac:	435d      	muls	r5, r3
 8001cae:	435f      	muls	r7, r3
 8001cb0:	4643      	mov	r3, r8
 8001cb2:	4455      	add	r5, sl
 8001cb4:	0c18      	lsrs	r0, r3, #16
 8001cb6:	1940      	adds	r0, r0, r5
 8001cb8:	4582      	cmp	sl, r0
 8001cba:	d903      	bls.n	8001cc4 <__aeabi_dmul+0x218>
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	469a      	mov	sl, r3
 8001cc2:	4457      	add	r7, sl
 8001cc4:	0c05      	lsrs	r5, r0, #16
 8001cc6:	19eb      	adds	r3, r5, r7
 8001cc8:	9305      	str	r3, [sp, #20]
 8001cca:	4643      	mov	r3, r8
 8001ccc:	041d      	lsls	r5, r3, #16
 8001cce:	0c2d      	lsrs	r5, r5, #16
 8001cd0:	0400      	lsls	r0, r0, #16
 8001cd2:	1940      	adds	r0, r0, r5
 8001cd4:	0c25      	lsrs	r5, r4, #16
 8001cd6:	0424      	lsls	r4, r4, #16
 8001cd8:	0c24      	lsrs	r4, r4, #16
 8001cda:	0027      	movs	r7, r4
 8001cdc:	4357      	muls	r7, r2
 8001cde:	436a      	muls	r2, r5
 8001ce0:	4690      	mov	r8, r2
 8001ce2:	002a      	movs	r2, r5
 8001ce4:	0c3b      	lsrs	r3, r7, #16
 8001ce6:	469a      	mov	sl, r3
 8001ce8:	434a      	muls	r2, r1
 8001cea:	4361      	muls	r1, r4
 8001cec:	4441      	add	r1, r8
 8001cee:	4451      	add	r1, sl
 8001cf0:	4483      	add	fp, r0
 8001cf2:	4588      	cmp	r8, r1
 8001cf4:	d903      	bls.n	8001cfe <__aeabi_dmul+0x252>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	4698      	mov	r8, r3
 8001cfc:	4442      	add	r2, r8
 8001cfe:	043f      	lsls	r7, r7, #16
 8001d00:	0c0b      	lsrs	r3, r1, #16
 8001d02:	0c3f      	lsrs	r7, r7, #16
 8001d04:	0409      	lsls	r1, r1, #16
 8001d06:	19c9      	adds	r1, r1, r7
 8001d08:	0027      	movs	r7, r4
 8001d0a:	4698      	mov	r8, r3
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	4377      	muls	r7, r6
 8001d10:	435c      	muls	r4, r3
 8001d12:	436e      	muls	r6, r5
 8001d14:	435d      	muls	r5, r3
 8001d16:	0c3b      	lsrs	r3, r7, #16
 8001d18:	4699      	mov	r9, r3
 8001d1a:	19a4      	adds	r4, r4, r6
 8001d1c:	444c      	add	r4, r9
 8001d1e:	4442      	add	r2, r8
 8001d20:	9503      	str	r5, [sp, #12]
 8001d22:	42a6      	cmp	r6, r4
 8001d24:	d904      	bls.n	8001d30 <__aeabi_dmul+0x284>
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	4445      	add	r5, r8
 8001d2e:	9503      	str	r5, [sp, #12]
 8001d30:	9b02      	ldr	r3, [sp, #8]
 8001d32:	043f      	lsls	r7, r7, #16
 8001d34:	445b      	add	r3, fp
 8001d36:	001e      	movs	r6, r3
 8001d38:	4283      	cmp	r3, r0
 8001d3a:	4180      	sbcs	r0, r0
 8001d3c:	0423      	lsls	r3, r4, #16
 8001d3e:	4698      	mov	r8, r3
 8001d40:	9b05      	ldr	r3, [sp, #20]
 8001d42:	0c3f      	lsrs	r7, r7, #16
 8001d44:	4447      	add	r7, r8
 8001d46:	4698      	mov	r8, r3
 8001d48:	1876      	adds	r6, r6, r1
 8001d4a:	428e      	cmp	r6, r1
 8001d4c:	4189      	sbcs	r1, r1
 8001d4e:	4447      	add	r7, r8
 8001d50:	4240      	negs	r0, r0
 8001d52:	183d      	adds	r5, r7, r0
 8001d54:	46a8      	mov	r8, r5
 8001d56:	4693      	mov	fp, r2
 8001d58:	4249      	negs	r1, r1
 8001d5a:	468a      	mov	sl, r1
 8001d5c:	44c3      	add	fp, r8
 8001d5e:	429f      	cmp	r7, r3
 8001d60:	41bf      	sbcs	r7, r7
 8001d62:	4580      	cmp	r8, r0
 8001d64:	4180      	sbcs	r0, r0
 8001d66:	9b03      	ldr	r3, [sp, #12]
 8001d68:	44da      	add	sl, fp
 8001d6a:	4698      	mov	r8, r3
 8001d6c:	4653      	mov	r3, sl
 8001d6e:	4240      	negs	r0, r0
 8001d70:	427f      	negs	r7, r7
 8001d72:	4307      	orrs	r7, r0
 8001d74:	0c24      	lsrs	r4, r4, #16
 8001d76:	4593      	cmp	fp, r2
 8001d78:	4192      	sbcs	r2, r2
 8001d7a:	458a      	cmp	sl, r1
 8001d7c:	4189      	sbcs	r1, r1
 8001d7e:	193f      	adds	r7, r7, r4
 8001d80:	0ddc      	lsrs	r4, r3, #23
 8001d82:	9b04      	ldr	r3, [sp, #16]
 8001d84:	0275      	lsls	r5, r6, #9
 8001d86:	431d      	orrs	r5, r3
 8001d88:	1e68      	subs	r0, r5, #1
 8001d8a:	4185      	sbcs	r5, r0
 8001d8c:	4653      	mov	r3, sl
 8001d8e:	4252      	negs	r2, r2
 8001d90:	4249      	negs	r1, r1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	18bf      	adds	r7, r7, r2
 8001d96:	4447      	add	r7, r8
 8001d98:	0df6      	lsrs	r6, r6, #23
 8001d9a:	027f      	lsls	r7, r7, #9
 8001d9c:	4335      	orrs	r5, r6
 8001d9e:	025a      	lsls	r2, r3, #9
 8001da0:	433c      	orrs	r4, r7
 8001da2:	4315      	orrs	r5, r2
 8001da4:	01fb      	lsls	r3, r7, #7
 8001da6:	d400      	bmi.n	8001daa <__aeabi_dmul+0x2fe>
 8001da8:	e0c1      	b.n	8001f2e <__aeabi_dmul+0x482>
 8001daa:	2101      	movs	r1, #1
 8001dac:	086a      	lsrs	r2, r5, #1
 8001dae:	400d      	ands	r5, r1
 8001db0:	4315      	orrs	r5, r2
 8001db2:	07e2      	lsls	r2, r4, #31
 8001db4:	4315      	orrs	r5, r2
 8001db6:	0864      	lsrs	r4, r4, #1
 8001db8:	4926      	ldr	r1, [pc, #152]	; (8001e54 <__aeabi_dmul+0x3a8>)
 8001dba:	4461      	add	r1, ip
 8001dbc:	2900      	cmp	r1, #0
 8001dbe:	dd56      	ble.n	8001e6e <__aeabi_dmul+0x3c2>
 8001dc0:	076b      	lsls	r3, r5, #29
 8001dc2:	d009      	beq.n	8001dd8 <__aeabi_dmul+0x32c>
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	402a      	ands	r2, r5
 8001dc8:	2a04      	cmp	r2, #4
 8001dca:	d005      	beq.n	8001dd8 <__aeabi_dmul+0x32c>
 8001dcc:	1d2a      	adds	r2, r5, #4
 8001dce:	42aa      	cmp	r2, r5
 8001dd0:	41ad      	sbcs	r5, r5
 8001dd2:	426d      	negs	r5, r5
 8001dd4:	1964      	adds	r4, r4, r5
 8001dd6:	0015      	movs	r5, r2
 8001dd8:	01e3      	lsls	r3, r4, #7
 8001dda:	d504      	bpl.n	8001de6 <__aeabi_dmul+0x33a>
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <__aeabi_dmul+0x3ac>)
 8001de0:	00c9      	lsls	r1, r1, #3
 8001de2:	4014      	ands	r4, r2
 8001de4:	4461      	add	r1, ip
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <__aeabi_dmul+0x3b0>)
 8001de8:	4291      	cmp	r1, r2
 8001dea:	dd00      	ble.n	8001dee <__aeabi_dmul+0x342>
 8001dec:	e724      	b.n	8001c38 <__aeabi_dmul+0x18c>
 8001dee:	0762      	lsls	r2, r4, #29
 8001df0:	08ed      	lsrs	r5, r5, #3
 8001df2:	0264      	lsls	r4, r4, #9
 8001df4:	0549      	lsls	r1, r1, #21
 8001df6:	4315      	orrs	r5, r2
 8001df8:	0b24      	lsrs	r4, r4, #12
 8001dfa:	0d4a      	lsrs	r2, r1, #21
 8001dfc:	e6c6      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001dfe:	9701      	str	r7, [sp, #4]
 8001e00:	e6b8      	b.n	8001b74 <__aeabi_dmul+0xc8>
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <__aeabi_dmul+0x398>)
 8001e04:	2003      	movs	r0, #3
 8001e06:	4694      	mov	ip, r2
 8001e08:	4463      	add	r3, ip
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2303      	movs	r3, #3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4691      	mov	r9, r2
 8001e14:	4652      	mov	r2, sl
 8001e16:	e68a      	b.n	8001b2e <__aeabi_dmul+0x82>
 8001e18:	4649      	mov	r1, r9
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	4319      	orrs	r1, r3
 8001e1e:	4689      	mov	r9, r1
 8001e20:	2600      	movs	r6, #0
 8001e22:	2001      	movs	r0, #1
 8001e24:	e683      	b.n	8001b2e <__aeabi_dmul+0x82>
 8001e26:	220c      	movs	r2, #12
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	0005      	movs	r5, r0
 8001e2e:	4691      	mov	r9, r2
 8001e30:	469b      	mov	fp, r3
 8001e32:	e65e      	b.n	8001af2 <__aeabi_dmul+0x46>
 8001e34:	2304      	movs	r3, #4
 8001e36:	4699      	mov	r9, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	2400      	movs	r4, #0
 8001e40:	469b      	mov	fp, r3
 8001e42:	e656      	b.n	8001af2 <__aeabi_dmul+0x46>
 8001e44:	000007ff 	.word	0x000007ff
 8001e48:	fffffc01 	.word	0xfffffc01
 8001e4c:	0800ac68 	.word	0x0800ac68
 8001e50:	fffffc0d 	.word	0xfffffc0d
 8001e54:	000003ff 	.word	0x000003ff
 8001e58:	feffffff 	.word	0xfeffffff
 8001e5c:	000007fe 	.word	0x000007fe
 8001e60:	2300      	movs	r3, #0
 8001e62:	2480      	movs	r4, #128	; 0x80
 8001e64:	2500      	movs	r5, #0
 8001e66:	4a44      	ldr	r2, [pc, #272]	; (8001f78 <__aeabi_dmul+0x4cc>)
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	e68e      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001e6e:	2001      	movs	r0, #1
 8001e70:	1a40      	subs	r0, r0, r1
 8001e72:	2838      	cmp	r0, #56	; 0x38
 8001e74:	dd00      	ble.n	8001e78 <__aeabi_dmul+0x3cc>
 8001e76:	e686      	b.n	8001b86 <__aeabi_dmul+0xda>
 8001e78:	281f      	cmp	r0, #31
 8001e7a:	dd5b      	ble.n	8001f34 <__aeabi_dmul+0x488>
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	0023      	movs	r3, r4
 8001e80:	4252      	negs	r2, r2
 8001e82:	1a51      	subs	r1, r2, r1
 8001e84:	40cb      	lsrs	r3, r1
 8001e86:	0019      	movs	r1, r3
 8001e88:	2820      	cmp	r0, #32
 8001e8a:	d003      	beq.n	8001e94 <__aeabi_dmul+0x3e8>
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <__aeabi_dmul+0x4d0>)
 8001e8e:	4462      	add	r2, ip
 8001e90:	4094      	lsls	r4, r2
 8001e92:	4325      	orrs	r5, r4
 8001e94:	1e6a      	subs	r2, r5, #1
 8001e96:	4195      	sbcs	r5, r2
 8001e98:	002a      	movs	r2, r5
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	000d      	movs	r5, r1
 8001ea0:	2400      	movs	r4, #0
 8001ea2:	4015      	ands	r5, r2
 8001ea4:	4211      	tst	r1, r2
 8001ea6:	d05b      	beq.n	8001f60 <__aeabi_dmul+0x4b4>
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	2400      	movs	r4, #0
 8001eac:	4011      	ands	r1, r2
 8001eae:	2904      	cmp	r1, #4
 8001eb0:	d053      	beq.n	8001f5a <__aeabi_dmul+0x4ae>
 8001eb2:	1d11      	adds	r1, r2, #4
 8001eb4:	4291      	cmp	r1, r2
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	4252      	negs	r2, r2
 8001eba:	18a4      	adds	r4, r4, r2
 8001ebc:	000a      	movs	r2, r1
 8001ebe:	0223      	lsls	r3, r4, #8
 8001ec0:	d54b      	bpl.n	8001f5a <__aeabi_dmul+0x4ae>
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	2500      	movs	r5, #0
 8001ec8:	e660      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	421c      	tst	r4, r3
 8001ed0:	d009      	beq.n	8001ee6 <__aeabi_dmul+0x43a>
 8001ed2:	421e      	tst	r6, r3
 8001ed4:	d107      	bne.n	8001ee6 <__aeabi_dmul+0x43a>
 8001ed6:	4333      	orrs	r3, r6
 8001ed8:	031c      	lsls	r4, r3, #12
 8001eda:	4643      	mov	r3, r8
 8001edc:	0015      	movs	r5, r2
 8001ede:	0b24      	lsrs	r4, r4, #12
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <__aeabi_dmul+0x4cc>)
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	e652      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4314      	orrs	r4, r2
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <__aeabi_dmul+0x4cc>)
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	9701      	str	r7, [sp, #4]
 8001ef4:	e64a      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001ef6:	f000 fd51 	bl	800299c <__clzsi2>
 8001efa:	0003      	movs	r3, r0
 8001efc:	001a      	movs	r2, r3
 8001efe:	3215      	adds	r2, #21
 8001f00:	3020      	adds	r0, #32
 8001f02:	2a1c      	cmp	r2, #28
 8001f04:	dc00      	bgt.n	8001f08 <__aeabi_dmul+0x45c>
 8001f06:	e684      	b.n	8001c12 <__aeabi_dmul+0x166>
 8001f08:	4656      	mov	r6, sl
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	409e      	lsls	r6, r3
 8001f10:	e689      	b.n	8001c26 <__aeabi_dmul+0x17a>
 8001f12:	f000 fd43 	bl	800299c <__clzsi2>
 8001f16:	0001      	movs	r1, r0
 8001f18:	0002      	movs	r2, r0
 8001f1a:	3115      	adds	r1, #21
 8001f1c:	3220      	adds	r2, #32
 8001f1e:	291c      	cmp	r1, #28
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_dmul+0x478>
 8001f22:	e64e      	b.n	8001bc2 <__aeabi_dmul+0x116>
 8001f24:	0034      	movs	r4, r6
 8001f26:	3808      	subs	r0, #8
 8001f28:	2500      	movs	r5, #0
 8001f2a:	4084      	lsls	r4, r0
 8001f2c:	e653      	b.n	8001bd6 <__aeabi_dmul+0x12a>
 8001f2e:	9b00      	ldr	r3, [sp, #0]
 8001f30:	469c      	mov	ip, r3
 8001f32:	e741      	b.n	8001db8 <__aeabi_dmul+0x30c>
 8001f34:	4912      	ldr	r1, [pc, #72]	; (8001f80 <__aeabi_dmul+0x4d4>)
 8001f36:	0022      	movs	r2, r4
 8001f38:	4461      	add	r1, ip
 8001f3a:	002e      	movs	r6, r5
 8001f3c:	408d      	lsls	r5, r1
 8001f3e:	408a      	lsls	r2, r1
 8001f40:	40c6      	lsrs	r6, r0
 8001f42:	1e69      	subs	r1, r5, #1
 8001f44:	418d      	sbcs	r5, r1
 8001f46:	4332      	orrs	r2, r6
 8001f48:	432a      	orrs	r2, r5
 8001f4a:	40c4      	lsrs	r4, r0
 8001f4c:	0753      	lsls	r3, r2, #29
 8001f4e:	d0b6      	beq.n	8001ebe <__aeabi_dmul+0x412>
 8001f50:	210f      	movs	r1, #15
 8001f52:	4011      	ands	r1, r2
 8001f54:	2904      	cmp	r1, #4
 8001f56:	d1ac      	bne.n	8001eb2 <__aeabi_dmul+0x406>
 8001f58:	e7b1      	b.n	8001ebe <__aeabi_dmul+0x412>
 8001f5a:	0765      	lsls	r5, r4, #29
 8001f5c:	0264      	lsls	r4, r4, #9
 8001f5e:	0b24      	lsrs	r4, r4, #12
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	4315      	orrs	r5, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	e611      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	0312      	lsls	r2, r2, #12
 8001f6c:	4314      	orrs	r4, r2
 8001f6e:	0324      	lsls	r4, r4, #12
 8001f70:	4a01      	ldr	r2, [pc, #4]	; (8001f78 <__aeabi_dmul+0x4cc>)
 8001f72:	0b24      	lsrs	r4, r4, #12
 8001f74:	e60a      	b.n	8001b8c <__aeabi_dmul+0xe0>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	000007ff 	.word	0x000007ff
 8001f7c:	0000043e 	.word	0x0000043e
 8001f80:	0000041e 	.word	0x0000041e

08001f84 <__aeabi_dsub>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	4657      	mov	r7, sl
 8001f88:	464e      	mov	r6, r9
 8001f8a:	4645      	mov	r5, r8
 8001f8c:	46de      	mov	lr, fp
 8001f8e:	0004      	movs	r4, r0
 8001f90:	b5e0      	push	{r5, r6, r7, lr}
 8001f92:	001f      	movs	r7, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	030b      	lsls	r3, r1, #12
 8001f98:	0f62      	lsrs	r2, r4, #29
 8001f9a:	004e      	lsls	r6, r1, #1
 8001f9c:	0fcd      	lsrs	r5, r1, #31
 8001f9e:	0a5b      	lsrs	r3, r3, #9
 8001fa0:	0339      	lsls	r1, r7, #12
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	0a49      	lsrs	r1, r1, #9
 8001fa6:	00e2      	lsls	r2, r4, #3
 8001fa8:	0f44      	lsrs	r4, r0, #29
 8001faa:	4321      	orrs	r1, r4
 8001fac:	4cc2      	ldr	r4, [pc, #776]	; (80022b8 <__aeabi_dsub+0x334>)
 8001fae:	4691      	mov	r9, r2
 8001fb0:	4692      	mov	sl, r2
 8001fb2:	00c0      	lsls	r0, r0, #3
 8001fb4:	007a      	lsls	r2, r7, #1
 8001fb6:	4680      	mov	r8, r0
 8001fb8:	0d76      	lsrs	r6, r6, #21
 8001fba:	0d52      	lsrs	r2, r2, #21
 8001fbc:	0fff      	lsrs	r7, r7, #31
 8001fbe:	42a2      	cmp	r2, r4
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x40>
 8001fc2:	e0b4      	b.n	800212e <__aeabi_dsub+0x1aa>
 8001fc4:	2401      	movs	r4, #1
 8001fc6:	4067      	eors	r7, r4
 8001fc8:	46bb      	mov	fp, r7
 8001fca:	42bd      	cmp	r5, r7
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x4c>
 8001fce:	e088      	b.n	80020e2 <__aeabi_dsub+0x15e>
 8001fd0:	1ab4      	subs	r4, r6, r2
 8001fd2:	46a4      	mov	ip, r4
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	dc00      	bgt.n	8001fda <__aeabi_dsub+0x56>
 8001fd8:	e0b2      	b.n	8002140 <__aeabi_dsub+0x1bc>
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x5c>
 8001fde:	e0c5      	b.n	800216c <__aeabi_dsub+0x1e8>
 8001fe0:	4ab5      	ldr	r2, [pc, #724]	; (80022b8 <__aeabi_dsub+0x334>)
 8001fe2:	4296      	cmp	r6, r2
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x64>
 8001fe6:	e28b      	b.n	8002500 <__aeabi_dsub+0x57c>
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0412      	lsls	r2, r2, #16
 8001fec:	4311      	orrs	r1, r2
 8001fee:	4662      	mov	r2, ip
 8001ff0:	2a38      	cmp	r2, #56	; 0x38
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_dsub+0x72>
 8001ff4:	e1a1      	b.n	800233a <__aeabi_dsub+0x3b6>
 8001ff6:	2a1f      	cmp	r2, #31
 8001ff8:	dd00      	ble.n	8001ffc <__aeabi_dsub+0x78>
 8001ffa:	e216      	b.n	800242a <__aeabi_dsub+0x4a6>
 8001ffc:	2720      	movs	r7, #32
 8001ffe:	000c      	movs	r4, r1
 8002000:	1abf      	subs	r7, r7, r2
 8002002:	40bc      	lsls	r4, r7
 8002004:	0002      	movs	r2, r0
 8002006:	46a0      	mov	r8, r4
 8002008:	4664      	mov	r4, ip
 800200a:	40b8      	lsls	r0, r7
 800200c:	40e2      	lsrs	r2, r4
 800200e:	4644      	mov	r4, r8
 8002010:	4314      	orrs	r4, r2
 8002012:	0002      	movs	r2, r0
 8002014:	1e50      	subs	r0, r2, #1
 8002016:	4182      	sbcs	r2, r0
 8002018:	4660      	mov	r0, ip
 800201a:	40c1      	lsrs	r1, r0
 800201c:	4322      	orrs	r2, r4
 800201e:	1a5b      	subs	r3, r3, r1
 8002020:	4649      	mov	r1, r9
 8002022:	1a8c      	subs	r4, r1, r2
 8002024:	45a1      	cmp	r9, r4
 8002026:	4192      	sbcs	r2, r2
 8002028:	4252      	negs	r2, r2
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	4698      	mov	r8, r3
 800202e:	4643      	mov	r3, r8
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	d400      	bmi.n	8002036 <__aeabi_dsub+0xb2>
 8002034:	e117      	b.n	8002266 <__aeabi_dsub+0x2e2>
 8002036:	4643      	mov	r3, r8
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	4698      	mov	r8, r3
 800203e:	4643      	mov	r3, r8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0xc2>
 8002044:	e16c      	b.n	8002320 <__aeabi_dsub+0x39c>
 8002046:	4640      	mov	r0, r8
 8002048:	f000 fca8 	bl	800299c <__clzsi2>
 800204c:	0002      	movs	r2, r0
 800204e:	3a08      	subs	r2, #8
 8002050:	2120      	movs	r1, #32
 8002052:	0020      	movs	r0, r4
 8002054:	4643      	mov	r3, r8
 8002056:	1a89      	subs	r1, r1, r2
 8002058:	4093      	lsls	r3, r2
 800205a:	40c8      	lsrs	r0, r1
 800205c:	4094      	lsls	r4, r2
 800205e:	4303      	orrs	r3, r0
 8002060:	4296      	cmp	r6, r2
 8002062:	dd00      	ble.n	8002066 <__aeabi_dsub+0xe2>
 8002064:	e157      	b.n	8002316 <__aeabi_dsub+0x392>
 8002066:	1b96      	subs	r6, r2, r6
 8002068:	1c71      	adds	r1, r6, #1
 800206a:	291f      	cmp	r1, #31
 800206c:	dd00      	ble.n	8002070 <__aeabi_dsub+0xec>
 800206e:	e1cb      	b.n	8002408 <__aeabi_dsub+0x484>
 8002070:	2220      	movs	r2, #32
 8002072:	0018      	movs	r0, r3
 8002074:	0026      	movs	r6, r4
 8002076:	1a52      	subs	r2, r2, r1
 8002078:	4094      	lsls	r4, r2
 800207a:	4090      	lsls	r0, r2
 800207c:	40ce      	lsrs	r6, r1
 800207e:	40cb      	lsrs	r3, r1
 8002080:	1e62      	subs	r2, r4, #1
 8002082:	4194      	sbcs	r4, r2
 8002084:	4330      	orrs	r0, r6
 8002086:	4698      	mov	r8, r3
 8002088:	2600      	movs	r6, #0
 800208a:	4304      	orrs	r4, r0
 800208c:	0763      	lsls	r3, r4, #29
 800208e:	d009      	beq.n	80020a4 <__aeabi_dsub+0x120>
 8002090:	230f      	movs	r3, #15
 8002092:	4023      	ands	r3, r4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x120>
 8002098:	1d23      	adds	r3, r4, #4
 800209a:	42a3      	cmp	r3, r4
 800209c:	41a4      	sbcs	r4, r4
 800209e:	4264      	negs	r4, r4
 80020a0:	44a0      	add	r8, r4
 80020a2:	001c      	movs	r4, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	d400      	bmi.n	80020ac <__aeabi_dsub+0x128>
 80020aa:	e0df      	b.n	800226c <__aeabi_dsub+0x2e8>
 80020ac:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <__aeabi_dsub+0x334>)
 80020ae:	3601      	adds	r6, #1
 80020b0:	429e      	cmp	r6, r3
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x132>
 80020b4:	e0fb      	b.n	80022ae <__aeabi_dsub+0x32a>
 80020b6:	4642      	mov	r2, r8
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <__aeabi_dsub+0x338>)
 80020ba:	08e4      	lsrs	r4, r4, #3
 80020bc:	401a      	ands	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	0571      	lsls	r1, r6, #21
 80020c2:	0752      	lsls	r2, r2, #29
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	4322      	orrs	r2, r4
 80020c8:	0b1b      	lsrs	r3, r3, #12
 80020ca:	0d49      	lsrs	r1, r1, #21
 80020cc:	0509      	lsls	r1, r1, #20
 80020ce:	07ed      	lsls	r5, r5, #31
 80020d0:	4319      	orrs	r1, r3
 80020d2:	4329      	orrs	r1, r5
 80020d4:	0010      	movs	r0, r2
 80020d6:	bcf0      	pop	{r4, r5, r6, r7}
 80020d8:	46bb      	mov	fp, r7
 80020da:	46b2      	mov	sl, r6
 80020dc:	46a9      	mov	r9, r5
 80020de:	46a0      	mov	r8, r4
 80020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e2:	1ab4      	subs	r4, r6, r2
 80020e4:	46a4      	mov	ip, r4
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	dd58      	ble.n	800219c <__aeabi_dsub+0x218>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x16c>
 80020ee:	e09e      	b.n	800222e <__aeabi_dsub+0x2aa>
 80020f0:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <__aeabi_dsub+0x334>)
 80020f2:	4296      	cmp	r6, r2
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x174>
 80020f6:	e13b      	b.n	8002370 <__aeabi_dsub+0x3ec>
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	0412      	lsls	r2, r2, #16
 80020fc:	4311      	orrs	r1, r2
 80020fe:	4662      	mov	r2, ip
 8002100:	2a38      	cmp	r2, #56	; 0x38
 8002102:	dd00      	ble.n	8002106 <__aeabi_dsub+0x182>
 8002104:	e0c1      	b.n	800228a <__aeabi_dsub+0x306>
 8002106:	2a1f      	cmp	r2, #31
 8002108:	dc00      	bgt.n	800210c <__aeabi_dsub+0x188>
 800210a:	e1bb      	b.n	8002484 <__aeabi_dsub+0x500>
 800210c:	000c      	movs	r4, r1
 800210e:	3a20      	subs	r2, #32
 8002110:	40d4      	lsrs	r4, r2
 8002112:	0022      	movs	r2, r4
 8002114:	4664      	mov	r4, ip
 8002116:	2c20      	cmp	r4, #32
 8002118:	d004      	beq.n	8002124 <__aeabi_dsub+0x1a0>
 800211a:	2740      	movs	r7, #64	; 0x40
 800211c:	1b3f      	subs	r7, r7, r4
 800211e:	40b9      	lsls	r1, r7
 8002120:	4308      	orrs	r0, r1
 8002122:	4680      	mov	r8, r0
 8002124:	4644      	mov	r4, r8
 8002126:	1e61      	subs	r1, r4, #1
 8002128:	418c      	sbcs	r4, r1
 800212a:	4314      	orrs	r4, r2
 800212c:	e0b1      	b.n	8002292 <__aeabi_dsub+0x30e>
 800212e:	000c      	movs	r4, r1
 8002130:	4304      	orrs	r4, r0
 8002132:	d02a      	beq.n	800218a <__aeabi_dsub+0x206>
 8002134:	46bb      	mov	fp, r7
 8002136:	42bd      	cmp	r5, r7
 8002138:	d02d      	beq.n	8002196 <__aeabi_dsub+0x212>
 800213a:	4c61      	ldr	r4, [pc, #388]	; (80022c0 <__aeabi_dsub+0x33c>)
 800213c:	46a4      	mov	ip, r4
 800213e:	44b4      	add	ip, r6
 8002140:	4664      	mov	r4, ip
 8002142:	2c00      	cmp	r4, #0
 8002144:	d05c      	beq.n	8002200 <__aeabi_dsub+0x27c>
 8002146:	1b94      	subs	r4, r2, r6
 8002148:	46a4      	mov	ip, r4
 800214a:	2e00      	cmp	r6, #0
 800214c:	d000      	beq.n	8002150 <__aeabi_dsub+0x1cc>
 800214e:	e115      	b.n	800237c <__aeabi_dsub+0x3f8>
 8002150:	464d      	mov	r5, r9
 8002152:	431d      	orrs	r5, r3
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x1d4>
 8002156:	e1c3      	b.n	80024e0 <__aeabi_dsub+0x55c>
 8002158:	1e65      	subs	r5, r4, #1
 800215a:	2c01      	cmp	r4, #1
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x1dc>
 800215e:	e20c      	b.n	800257a <__aeabi_dsub+0x5f6>
 8002160:	4e55      	ldr	r6, [pc, #340]	; (80022b8 <__aeabi_dsub+0x334>)
 8002162:	42b4      	cmp	r4, r6
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x1e4>
 8002166:	e1f8      	b.n	800255a <__aeabi_dsub+0x5d6>
 8002168:	46ac      	mov	ip, r5
 800216a:	e10e      	b.n	800238a <__aeabi_dsub+0x406>
 800216c:	000a      	movs	r2, r1
 800216e:	4302      	orrs	r2, r0
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x1f0>
 8002172:	e136      	b.n	80023e2 <__aeabi_dsub+0x45e>
 8002174:	0022      	movs	r2, r4
 8002176:	3a01      	subs	r2, #1
 8002178:	2c01      	cmp	r4, #1
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x1fa>
 800217c:	e1c6      	b.n	800250c <__aeabi_dsub+0x588>
 800217e:	4c4e      	ldr	r4, [pc, #312]	; (80022b8 <__aeabi_dsub+0x334>)
 8002180:	45a4      	cmp	ip, r4
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x202>
 8002184:	e0f4      	b.n	8002370 <__aeabi_dsub+0x3ec>
 8002186:	4694      	mov	ip, r2
 8002188:	e731      	b.n	8001fee <__aeabi_dsub+0x6a>
 800218a:	2401      	movs	r4, #1
 800218c:	4067      	eors	r7, r4
 800218e:	46bb      	mov	fp, r7
 8002190:	42bd      	cmp	r5, r7
 8002192:	d000      	beq.n	8002196 <__aeabi_dsub+0x212>
 8002194:	e71c      	b.n	8001fd0 <__aeabi_dsub+0x4c>
 8002196:	4c4a      	ldr	r4, [pc, #296]	; (80022c0 <__aeabi_dsub+0x33c>)
 8002198:	46a4      	mov	ip, r4
 800219a:	44b4      	add	ip, r6
 800219c:	4664      	mov	r4, ip
 800219e:	2c00      	cmp	r4, #0
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x220>
 80021a2:	e0cf      	b.n	8002344 <__aeabi_dsub+0x3c0>
 80021a4:	1b94      	subs	r4, r2, r6
 80021a6:	46a4      	mov	ip, r4
 80021a8:	2e00      	cmp	r6, #0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x22a>
 80021ac:	e15c      	b.n	8002468 <__aeabi_dsub+0x4e4>
 80021ae:	4e42      	ldr	r6, [pc, #264]	; (80022b8 <__aeabi_dsub+0x334>)
 80021b0:	42b2      	cmp	r2, r6
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x232>
 80021b4:	e1ec      	b.n	8002590 <__aeabi_dsub+0x60c>
 80021b6:	2680      	movs	r6, #128	; 0x80
 80021b8:	0436      	lsls	r6, r6, #16
 80021ba:	4333      	orrs	r3, r6
 80021bc:	4664      	mov	r4, ip
 80021be:	2c38      	cmp	r4, #56	; 0x38
 80021c0:	dd00      	ble.n	80021c4 <__aeabi_dsub+0x240>
 80021c2:	e1b3      	b.n	800252c <__aeabi_dsub+0x5a8>
 80021c4:	2c1f      	cmp	r4, #31
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dsub+0x246>
 80021c8:	e238      	b.n	800263c <__aeabi_dsub+0x6b8>
 80021ca:	2620      	movs	r6, #32
 80021cc:	1b36      	subs	r6, r6, r4
 80021ce:	001c      	movs	r4, r3
 80021d0:	40b4      	lsls	r4, r6
 80021d2:	464f      	mov	r7, r9
 80021d4:	46a0      	mov	r8, r4
 80021d6:	4664      	mov	r4, ip
 80021d8:	40e7      	lsrs	r7, r4
 80021da:	4644      	mov	r4, r8
 80021dc:	433c      	orrs	r4, r7
 80021de:	464f      	mov	r7, r9
 80021e0:	40b7      	lsls	r7, r6
 80021e2:	003e      	movs	r6, r7
 80021e4:	1e77      	subs	r7, r6, #1
 80021e6:	41be      	sbcs	r6, r7
 80021e8:	4334      	orrs	r4, r6
 80021ea:	4666      	mov	r6, ip
 80021ec:	40f3      	lsrs	r3, r6
 80021ee:	18c9      	adds	r1, r1, r3
 80021f0:	1824      	adds	r4, r4, r0
 80021f2:	4284      	cmp	r4, r0
 80021f4:	419b      	sbcs	r3, r3
 80021f6:	425b      	negs	r3, r3
 80021f8:	4698      	mov	r8, r3
 80021fa:	0016      	movs	r6, r2
 80021fc:	4488      	add	r8, r1
 80021fe:	e04e      	b.n	800229e <__aeabi_dsub+0x31a>
 8002200:	4a30      	ldr	r2, [pc, #192]	; (80022c4 <__aeabi_dsub+0x340>)
 8002202:	1c74      	adds	r4, r6, #1
 8002204:	4214      	tst	r4, r2
 8002206:	d000      	beq.n	800220a <__aeabi_dsub+0x286>
 8002208:	e0d6      	b.n	80023b8 <__aeabi_dsub+0x434>
 800220a:	464a      	mov	r2, r9
 800220c:	431a      	orrs	r2, r3
 800220e:	2e00      	cmp	r6, #0
 8002210:	d000      	beq.n	8002214 <__aeabi_dsub+0x290>
 8002212:	e15b      	b.n	80024cc <__aeabi_dsub+0x548>
 8002214:	2a00      	cmp	r2, #0
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x296>
 8002218:	e1a5      	b.n	8002566 <__aeabi_dsub+0x5e2>
 800221a:	000a      	movs	r2, r1
 800221c:	4302      	orrs	r2, r0
 800221e:	d000      	beq.n	8002222 <__aeabi_dsub+0x29e>
 8002220:	e1bb      	b.n	800259a <__aeabi_dsub+0x616>
 8002222:	464a      	mov	r2, r9
 8002224:	0759      	lsls	r1, r3, #29
 8002226:	08d2      	lsrs	r2, r2, #3
 8002228:	430a      	orrs	r2, r1
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	e027      	b.n	800227e <__aeabi_dsub+0x2fa>
 800222e:	000a      	movs	r2, r1
 8002230:	4302      	orrs	r2, r0
 8002232:	d100      	bne.n	8002236 <__aeabi_dsub+0x2b2>
 8002234:	e174      	b.n	8002520 <__aeabi_dsub+0x59c>
 8002236:	0022      	movs	r2, r4
 8002238:	3a01      	subs	r2, #1
 800223a:	2c01      	cmp	r4, #1
 800223c:	d005      	beq.n	800224a <__aeabi_dsub+0x2c6>
 800223e:	4c1e      	ldr	r4, [pc, #120]	; (80022b8 <__aeabi_dsub+0x334>)
 8002240:	45a4      	cmp	ip, r4
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x2c2>
 8002244:	e094      	b.n	8002370 <__aeabi_dsub+0x3ec>
 8002246:	4694      	mov	ip, r2
 8002248:	e759      	b.n	80020fe <__aeabi_dsub+0x17a>
 800224a:	4448      	add	r0, r9
 800224c:	4548      	cmp	r0, r9
 800224e:	4192      	sbcs	r2, r2
 8002250:	185b      	adds	r3, r3, r1
 8002252:	4698      	mov	r8, r3
 8002254:	0004      	movs	r4, r0
 8002256:	4252      	negs	r2, r2
 8002258:	4490      	add	r8, r2
 800225a:	4643      	mov	r3, r8
 800225c:	2602      	movs	r6, #2
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	d500      	bpl.n	8002264 <__aeabi_dsub+0x2e0>
 8002262:	e0c4      	b.n	80023ee <__aeabi_dsub+0x46a>
 8002264:	3e01      	subs	r6, #1
 8002266:	0763      	lsls	r3, r4, #29
 8002268:	d000      	beq.n	800226c <__aeabi_dsub+0x2e8>
 800226a:	e711      	b.n	8002090 <__aeabi_dsub+0x10c>
 800226c:	4643      	mov	r3, r8
 800226e:	46b4      	mov	ip, r6
 8002270:	0759      	lsls	r1, r3, #29
 8002272:	08e2      	lsrs	r2, r4, #3
 8002274:	430a      	orrs	r2, r1
 8002276:	08db      	lsrs	r3, r3, #3
 8002278:	490f      	ldr	r1, [pc, #60]	; (80022b8 <__aeabi_dsub+0x334>)
 800227a:	458c      	cmp	ip, r1
 800227c:	d040      	beq.n	8002300 <__aeabi_dsub+0x37c>
 800227e:	4661      	mov	r1, ip
 8002280:	031b      	lsls	r3, r3, #12
 8002282:	0549      	lsls	r1, r1, #21
 8002284:	0b1b      	lsrs	r3, r3, #12
 8002286:	0d49      	lsrs	r1, r1, #21
 8002288:	e720      	b.n	80020cc <__aeabi_dsub+0x148>
 800228a:	4301      	orrs	r1, r0
 800228c:	000c      	movs	r4, r1
 800228e:	1e61      	subs	r1, r4, #1
 8002290:	418c      	sbcs	r4, r1
 8002292:	444c      	add	r4, r9
 8002294:	454c      	cmp	r4, r9
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	4690      	mov	r8, r2
 800229c:	4498      	add	r8, r3
 800229e:	4643      	mov	r3, r8
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	d5e0      	bpl.n	8002266 <__aeabi_dsub+0x2e2>
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__aeabi_dsub+0x334>)
 80022a6:	3601      	adds	r6, #1
 80022a8:	429e      	cmp	r6, r3
 80022aa:	d000      	beq.n	80022ae <__aeabi_dsub+0x32a>
 80022ac:	e09f      	b.n	80023ee <__aeabi_dsub+0x46a>
 80022ae:	0031      	movs	r1, r6
 80022b0:	2300      	movs	r3, #0
 80022b2:	2200      	movs	r2, #0
 80022b4:	e70a      	b.n	80020cc <__aeabi_dsub+0x148>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	ff7fffff 	.word	0xff7fffff
 80022c0:	fffff801 	.word	0xfffff801
 80022c4:	000007fe 	.word	0x000007fe
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x34a>
 80022cc:	e160      	b.n	8002590 <__aeabi_dsub+0x60c>
 80022ce:	000a      	movs	r2, r1
 80022d0:	4302      	orrs	r2, r0
 80022d2:	d04d      	beq.n	8002370 <__aeabi_dsub+0x3ec>
 80022d4:	464a      	mov	r2, r9
 80022d6:	075c      	lsls	r4, r3, #29
 80022d8:	08d2      	lsrs	r2, r2, #3
 80022da:	4322      	orrs	r2, r4
 80022dc:	2480      	movs	r4, #128	; 0x80
 80022de:	08db      	lsrs	r3, r3, #3
 80022e0:	0324      	lsls	r4, r4, #12
 80022e2:	4223      	tst	r3, r4
 80022e4:	d007      	beq.n	80022f6 <__aeabi_dsub+0x372>
 80022e6:	08ce      	lsrs	r6, r1, #3
 80022e8:	4226      	tst	r6, r4
 80022ea:	d104      	bne.n	80022f6 <__aeabi_dsub+0x372>
 80022ec:	465d      	mov	r5, fp
 80022ee:	0033      	movs	r3, r6
 80022f0:	08c2      	lsrs	r2, r0, #3
 80022f2:	0749      	lsls	r1, r1, #29
 80022f4:	430a      	orrs	r2, r1
 80022f6:	0f51      	lsrs	r1, r2, #29
 80022f8:	00d2      	lsls	r2, r2, #3
 80022fa:	08d2      	lsrs	r2, r2, #3
 80022fc:	0749      	lsls	r1, r1, #29
 80022fe:	430a      	orrs	r2, r1
 8002300:	0011      	movs	r1, r2
 8002302:	4319      	orrs	r1, r3
 8002304:	d100      	bne.n	8002308 <__aeabi_dsub+0x384>
 8002306:	e1c8      	b.n	800269a <__aeabi_dsub+0x716>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0309      	lsls	r1, r1, #12
 800230c:	430b      	orrs	r3, r1
 800230e:	031b      	lsls	r3, r3, #12
 8002310:	49d5      	ldr	r1, [pc, #852]	; (8002668 <__aeabi_dsub+0x6e4>)
 8002312:	0b1b      	lsrs	r3, r3, #12
 8002314:	e6da      	b.n	80020cc <__aeabi_dsub+0x148>
 8002316:	49d5      	ldr	r1, [pc, #852]	; (800266c <__aeabi_dsub+0x6e8>)
 8002318:	1ab6      	subs	r6, r6, r2
 800231a:	400b      	ands	r3, r1
 800231c:	4698      	mov	r8, r3
 800231e:	e6b5      	b.n	800208c <__aeabi_dsub+0x108>
 8002320:	0020      	movs	r0, r4
 8002322:	f000 fb3b 	bl	800299c <__clzsi2>
 8002326:	0002      	movs	r2, r0
 8002328:	3218      	adds	r2, #24
 800232a:	2a1f      	cmp	r2, #31
 800232c:	dc00      	bgt.n	8002330 <__aeabi_dsub+0x3ac>
 800232e:	e68f      	b.n	8002050 <__aeabi_dsub+0xcc>
 8002330:	0023      	movs	r3, r4
 8002332:	3808      	subs	r0, #8
 8002334:	4083      	lsls	r3, r0
 8002336:	2400      	movs	r4, #0
 8002338:	e692      	b.n	8002060 <__aeabi_dsub+0xdc>
 800233a:	4308      	orrs	r0, r1
 800233c:	0002      	movs	r2, r0
 800233e:	1e50      	subs	r0, r2, #1
 8002340:	4182      	sbcs	r2, r0
 8002342:	e66d      	b.n	8002020 <__aeabi_dsub+0x9c>
 8002344:	4cca      	ldr	r4, [pc, #808]	; (8002670 <__aeabi_dsub+0x6ec>)
 8002346:	1c72      	adds	r2, r6, #1
 8002348:	4222      	tst	r2, r4
 800234a:	d000      	beq.n	800234e <__aeabi_dsub+0x3ca>
 800234c:	e0ad      	b.n	80024aa <__aeabi_dsub+0x526>
 800234e:	464a      	mov	r2, r9
 8002350:	431a      	orrs	r2, r3
 8002352:	2e00      	cmp	r6, #0
 8002354:	d1b8      	bne.n	80022c8 <__aeabi_dsub+0x344>
 8002356:	2a00      	cmp	r2, #0
 8002358:	d100      	bne.n	800235c <__aeabi_dsub+0x3d8>
 800235a:	e158      	b.n	800260e <__aeabi_dsub+0x68a>
 800235c:	000a      	movs	r2, r1
 800235e:	4302      	orrs	r2, r0
 8002360:	d000      	beq.n	8002364 <__aeabi_dsub+0x3e0>
 8002362:	e159      	b.n	8002618 <__aeabi_dsub+0x694>
 8002364:	464a      	mov	r2, r9
 8002366:	0759      	lsls	r1, r3, #29
 8002368:	08d2      	lsrs	r2, r2, #3
 800236a:	430a      	orrs	r2, r1
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	e786      	b.n	800227e <__aeabi_dsub+0x2fa>
 8002370:	464a      	mov	r2, r9
 8002372:	0759      	lsls	r1, r3, #29
 8002374:	08d2      	lsrs	r2, r2, #3
 8002376:	430a      	orrs	r2, r1
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	e7c1      	b.n	8002300 <__aeabi_dsub+0x37c>
 800237c:	4dba      	ldr	r5, [pc, #744]	; (8002668 <__aeabi_dsub+0x6e4>)
 800237e:	42aa      	cmp	r2, r5
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x400>
 8002382:	e11e      	b.n	80025c2 <__aeabi_dsub+0x63e>
 8002384:	2580      	movs	r5, #128	; 0x80
 8002386:	042d      	lsls	r5, r5, #16
 8002388:	432b      	orrs	r3, r5
 800238a:	4664      	mov	r4, ip
 800238c:	2c38      	cmp	r4, #56	; 0x38
 800238e:	dc5d      	bgt.n	800244c <__aeabi_dsub+0x4c8>
 8002390:	2c1f      	cmp	r4, #31
 8002392:	dd00      	ble.n	8002396 <__aeabi_dsub+0x412>
 8002394:	e0d0      	b.n	8002538 <__aeabi_dsub+0x5b4>
 8002396:	2520      	movs	r5, #32
 8002398:	4667      	mov	r7, ip
 800239a:	1b2d      	subs	r5, r5, r4
 800239c:	464e      	mov	r6, r9
 800239e:	001c      	movs	r4, r3
 80023a0:	40fe      	lsrs	r6, r7
 80023a2:	40ac      	lsls	r4, r5
 80023a4:	4334      	orrs	r4, r6
 80023a6:	464e      	mov	r6, r9
 80023a8:	40ae      	lsls	r6, r5
 80023aa:	0035      	movs	r5, r6
 80023ac:	40fb      	lsrs	r3, r7
 80023ae:	1e6e      	subs	r6, r5, #1
 80023b0:	41b5      	sbcs	r5, r6
 80023b2:	1ac9      	subs	r1, r1, r3
 80023b4:	432c      	orrs	r4, r5
 80023b6:	e04e      	b.n	8002456 <__aeabi_dsub+0x4d2>
 80023b8:	464a      	mov	r2, r9
 80023ba:	1a14      	subs	r4, r2, r0
 80023bc:	45a1      	cmp	r9, r4
 80023be:	4192      	sbcs	r2, r2
 80023c0:	4252      	negs	r2, r2
 80023c2:	4690      	mov	r8, r2
 80023c4:	1a5f      	subs	r7, r3, r1
 80023c6:	003a      	movs	r2, r7
 80023c8:	4647      	mov	r7, r8
 80023ca:	1bd2      	subs	r2, r2, r7
 80023cc:	4690      	mov	r8, r2
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	d500      	bpl.n	80023d4 <__aeabi_dsub+0x450>
 80023d2:	e08b      	b.n	80024ec <__aeabi_dsub+0x568>
 80023d4:	4642      	mov	r2, r8
 80023d6:	4322      	orrs	r2, r4
 80023d8:	d000      	beq.n	80023dc <__aeabi_dsub+0x458>
 80023da:	e630      	b.n	800203e <__aeabi_dsub+0xba>
 80023dc:	2300      	movs	r3, #0
 80023de:	2500      	movs	r5, #0
 80023e0:	e74d      	b.n	800227e <__aeabi_dsub+0x2fa>
 80023e2:	464a      	mov	r2, r9
 80023e4:	0759      	lsls	r1, r3, #29
 80023e6:	08d2      	lsrs	r2, r2, #3
 80023e8:	430a      	orrs	r2, r1
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	e744      	b.n	8002278 <__aeabi_dsub+0x2f4>
 80023ee:	4642      	mov	r2, r8
 80023f0:	4b9e      	ldr	r3, [pc, #632]	; (800266c <__aeabi_dsub+0x6e8>)
 80023f2:	0861      	lsrs	r1, r4, #1
 80023f4:	401a      	ands	r2, r3
 80023f6:	0013      	movs	r3, r2
 80023f8:	2201      	movs	r2, #1
 80023fa:	4014      	ands	r4, r2
 80023fc:	430c      	orrs	r4, r1
 80023fe:	07da      	lsls	r2, r3, #31
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	4698      	mov	r8, r3
 8002404:	4314      	orrs	r4, r2
 8002406:	e641      	b.n	800208c <__aeabi_dsub+0x108>
 8002408:	001a      	movs	r2, r3
 800240a:	3e1f      	subs	r6, #31
 800240c:	40f2      	lsrs	r2, r6
 800240e:	0016      	movs	r6, r2
 8002410:	2920      	cmp	r1, #32
 8002412:	d003      	beq.n	800241c <__aeabi_dsub+0x498>
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	1a51      	subs	r1, r2, r1
 8002418:	408b      	lsls	r3, r1
 800241a:	431c      	orrs	r4, r3
 800241c:	1e62      	subs	r2, r4, #1
 800241e:	4194      	sbcs	r4, r2
 8002420:	2300      	movs	r3, #0
 8002422:	4334      	orrs	r4, r6
 8002424:	4698      	mov	r8, r3
 8002426:	2600      	movs	r6, #0
 8002428:	e71d      	b.n	8002266 <__aeabi_dsub+0x2e2>
 800242a:	000c      	movs	r4, r1
 800242c:	3a20      	subs	r2, #32
 800242e:	40d4      	lsrs	r4, r2
 8002430:	0022      	movs	r2, r4
 8002432:	4664      	mov	r4, ip
 8002434:	2c20      	cmp	r4, #32
 8002436:	d004      	beq.n	8002442 <__aeabi_dsub+0x4be>
 8002438:	2740      	movs	r7, #64	; 0x40
 800243a:	1b3f      	subs	r7, r7, r4
 800243c:	40b9      	lsls	r1, r7
 800243e:	4308      	orrs	r0, r1
 8002440:	4680      	mov	r8, r0
 8002442:	4644      	mov	r4, r8
 8002444:	1e61      	subs	r1, r4, #1
 8002446:	418c      	sbcs	r4, r1
 8002448:	4322      	orrs	r2, r4
 800244a:	e5e9      	b.n	8002020 <__aeabi_dsub+0x9c>
 800244c:	464c      	mov	r4, r9
 800244e:	4323      	orrs	r3, r4
 8002450:	001c      	movs	r4, r3
 8002452:	1e63      	subs	r3, r4, #1
 8002454:	419c      	sbcs	r4, r3
 8002456:	1b04      	subs	r4, r0, r4
 8002458:	42a0      	cmp	r0, r4
 800245a:	419b      	sbcs	r3, r3
 800245c:	425b      	negs	r3, r3
 800245e:	1acb      	subs	r3, r1, r3
 8002460:	4698      	mov	r8, r3
 8002462:	465d      	mov	r5, fp
 8002464:	0016      	movs	r6, r2
 8002466:	e5e2      	b.n	800202e <__aeabi_dsub+0xaa>
 8002468:	464e      	mov	r6, r9
 800246a:	431e      	orrs	r6, r3
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x4ec>
 800246e:	e0ae      	b.n	80025ce <__aeabi_dsub+0x64a>
 8002470:	1e66      	subs	r6, r4, #1
 8002472:	2c01      	cmp	r4, #1
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x4f4>
 8002476:	e0fd      	b.n	8002674 <__aeabi_dsub+0x6f0>
 8002478:	4f7b      	ldr	r7, [pc, #492]	; (8002668 <__aeabi_dsub+0x6e4>)
 800247a:	42bc      	cmp	r4, r7
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x4fc>
 800247e:	e107      	b.n	8002690 <__aeabi_dsub+0x70c>
 8002480:	46b4      	mov	ip, r6
 8002482:	e69b      	b.n	80021bc <__aeabi_dsub+0x238>
 8002484:	4664      	mov	r4, ip
 8002486:	2220      	movs	r2, #32
 8002488:	1b12      	subs	r2, r2, r4
 800248a:	000c      	movs	r4, r1
 800248c:	4094      	lsls	r4, r2
 800248e:	0007      	movs	r7, r0
 8002490:	4090      	lsls	r0, r2
 8002492:	46a0      	mov	r8, r4
 8002494:	4664      	mov	r4, ip
 8002496:	1e42      	subs	r2, r0, #1
 8002498:	4190      	sbcs	r0, r2
 800249a:	4662      	mov	r2, ip
 800249c:	40e7      	lsrs	r7, r4
 800249e:	4644      	mov	r4, r8
 80024a0:	40d1      	lsrs	r1, r2
 80024a2:	433c      	orrs	r4, r7
 80024a4:	4304      	orrs	r4, r0
 80024a6:	185b      	adds	r3, r3, r1
 80024a8:	e6f3      	b.n	8002292 <__aeabi_dsub+0x30e>
 80024aa:	4c6f      	ldr	r4, [pc, #444]	; (8002668 <__aeabi_dsub+0x6e4>)
 80024ac:	42a2      	cmp	r2, r4
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x52e>
 80024b0:	e0d5      	b.n	800265e <__aeabi_dsub+0x6da>
 80024b2:	4448      	add	r0, r9
 80024b4:	185b      	adds	r3, r3, r1
 80024b6:	4548      	cmp	r0, r9
 80024b8:	4189      	sbcs	r1, r1
 80024ba:	4249      	negs	r1, r1
 80024bc:	185b      	adds	r3, r3, r1
 80024be:	07dc      	lsls	r4, r3, #31
 80024c0:	0840      	lsrs	r0, r0, #1
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	4698      	mov	r8, r3
 80024c6:	0016      	movs	r6, r2
 80024c8:	4304      	orrs	r4, r0
 80024ca:	e6cc      	b.n	8002266 <__aeabi_dsub+0x2e2>
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d000      	beq.n	80024d2 <__aeabi_dsub+0x54e>
 80024d0:	e082      	b.n	80025d8 <__aeabi_dsub+0x654>
 80024d2:	000a      	movs	r2, r1
 80024d4:	4302      	orrs	r2, r0
 80024d6:	d140      	bne.n	800255a <__aeabi_dsub+0x5d6>
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	2500      	movs	r5, #0
 80024dc:	031b      	lsls	r3, r3, #12
 80024de:	e713      	b.n	8002308 <__aeabi_dsub+0x384>
 80024e0:	074b      	lsls	r3, r1, #29
 80024e2:	08c2      	lsrs	r2, r0, #3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	465d      	mov	r5, fp
 80024e8:	08cb      	lsrs	r3, r1, #3
 80024ea:	e6c5      	b.n	8002278 <__aeabi_dsub+0x2f4>
 80024ec:	464a      	mov	r2, r9
 80024ee:	1a84      	subs	r4, r0, r2
 80024f0:	42a0      	cmp	r0, r4
 80024f2:	4192      	sbcs	r2, r2
 80024f4:	1acb      	subs	r3, r1, r3
 80024f6:	4252      	negs	r2, r2
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	4698      	mov	r8, r3
 80024fc:	465d      	mov	r5, fp
 80024fe:	e59e      	b.n	800203e <__aeabi_dsub+0xba>
 8002500:	464a      	mov	r2, r9
 8002502:	0759      	lsls	r1, r3, #29
 8002504:	08d2      	lsrs	r2, r2, #3
 8002506:	430a      	orrs	r2, r1
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	e6f9      	b.n	8002300 <__aeabi_dsub+0x37c>
 800250c:	464a      	mov	r2, r9
 800250e:	1a14      	subs	r4, r2, r0
 8002510:	45a1      	cmp	r9, r4
 8002512:	4192      	sbcs	r2, r2
 8002514:	1a5b      	subs	r3, r3, r1
 8002516:	4252      	negs	r2, r2
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	4698      	mov	r8, r3
 800251c:	2601      	movs	r6, #1
 800251e:	e586      	b.n	800202e <__aeabi_dsub+0xaa>
 8002520:	464a      	mov	r2, r9
 8002522:	0759      	lsls	r1, r3, #29
 8002524:	08d2      	lsrs	r2, r2, #3
 8002526:	430a      	orrs	r2, r1
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	e6a5      	b.n	8002278 <__aeabi_dsub+0x2f4>
 800252c:	464c      	mov	r4, r9
 800252e:	4323      	orrs	r3, r4
 8002530:	001c      	movs	r4, r3
 8002532:	1e63      	subs	r3, r4, #1
 8002534:	419c      	sbcs	r4, r3
 8002536:	e65b      	b.n	80021f0 <__aeabi_dsub+0x26c>
 8002538:	4665      	mov	r5, ip
 800253a:	001e      	movs	r6, r3
 800253c:	3d20      	subs	r5, #32
 800253e:	40ee      	lsrs	r6, r5
 8002540:	2c20      	cmp	r4, #32
 8002542:	d005      	beq.n	8002550 <__aeabi_dsub+0x5cc>
 8002544:	2540      	movs	r5, #64	; 0x40
 8002546:	1b2d      	subs	r5, r5, r4
 8002548:	40ab      	lsls	r3, r5
 800254a:	464c      	mov	r4, r9
 800254c:	431c      	orrs	r4, r3
 800254e:	46a2      	mov	sl, r4
 8002550:	4654      	mov	r4, sl
 8002552:	1e63      	subs	r3, r4, #1
 8002554:	419c      	sbcs	r4, r3
 8002556:	4334      	orrs	r4, r6
 8002558:	e77d      	b.n	8002456 <__aeabi_dsub+0x4d2>
 800255a:	074b      	lsls	r3, r1, #29
 800255c:	08c2      	lsrs	r2, r0, #3
 800255e:	431a      	orrs	r2, r3
 8002560:	465d      	mov	r5, fp
 8002562:	08cb      	lsrs	r3, r1, #3
 8002564:	e6cc      	b.n	8002300 <__aeabi_dsub+0x37c>
 8002566:	000a      	movs	r2, r1
 8002568:	4302      	orrs	r2, r0
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0x5ea>
 800256c:	e736      	b.n	80023dc <__aeabi_dsub+0x458>
 800256e:	074b      	lsls	r3, r1, #29
 8002570:	08c2      	lsrs	r2, r0, #3
 8002572:	431a      	orrs	r2, r3
 8002574:	465d      	mov	r5, fp
 8002576:	08cb      	lsrs	r3, r1, #3
 8002578:	e681      	b.n	800227e <__aeabi_dsub+0x2fa>
 800257a:	464a      	mov	r2, r9
 800257c:	1a84      	subs	r4, r0, r2
 800257e:	42a0      	cmp	r0, r4
 8002580:	4192      	sbcs	r2, r2
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	4252      	negs	r2, r2
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	4698      	mov	r8, r3
 800258a:	465d      	mov	r5, fp
 800258c:	2601      	movs	r6, #1
 800258e:	e54e      	b.n	800202e <__aeabi_dsub+0xaa>
 8002590:	074b      	lsls	r3, r1, #29
 8002592:	08c2      	lsrs	r2, r0, #3
 8002594:	431a      	orrs	r2, r3
 8002596:	08cb      	lsrs	r3, r1, #3
 8002598:	e6b2      	b.n	8002300 <__aeabi_dsub+0x37c>
 800259a:	464a      	mov	r2, r9
 800259c:	1a14      	subs	r4, r2, r0
 800259e:	45a1      	cmp	r9, r4
 80025a0:	4192      	sbcs	r2, r2
 80025a2:	1a5f      	subs	r7, r3, r1
 80025a4:	4252      	negs	r2, r2
 80025a6:	1aba      	subs	r2, r7, r2
 80025a8:	4690      	mov	r8, r2
 80025aa:	0212      	lsls	r2, r2, #8
 80025ac:	d56b      	bpl.n	8002686 <__aeabi_dsub+0x702>
 80025ae:	464a      	mov	r2, r9
 80025b0:	1a84      	subs	r4, r0, r2
 80025b2:	42a0      	cmp	r0, r4
 80025b4:	4192      	sbcs	r2, r2
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	4252      	negs	r2, r2
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	4698      	mov	r8, r3
 80025be:	465d      	mov	r5, fp
 80025c0:	e564      	b.n	800208c <__aeabi_dsub+0x108>
 80025c2:	074b      	lsls	r3, r1, #29
 80025c4:	08c2      	lsrs	r2, r0, #3
 80025c6:	431a      	orrs	r2, r3
 80025c8:	465d      	mov	r5, fp
 80025ca:	08cb      	lsrs	r3, r1, #3
 80025cc:	e698      	b.n	8002300 <__aeabi_dsub+0x37c>
 80025ce:	074b      	lsls	r3, r1, #29
 80025d0:	08c2      	lsrs	r2, r0, #3
 80025d2:	431a      	orrs	r2, r3
 80025d4:	08cb      	lsrs	r3, r1, #3
 80025d6:	e64f      	b.n	8002278 <__aeabi_dsub+0x2f4>
 80025d8:	000a      	movs	r2, r1
 80025da:	4302      	orrs	r2, r0
 80025dc:	d090      	beq.n	8002500 <__aeabi_dsub+0x57c>
 80025de:	464a      	mov	r2, r9
 80025e0:	075c      	lsls	r4, r3, #29
 80025e2:	08d2      	lsrs	r2, r2, #3
 80025e4:	4314      	orrs	r4, r2
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	0312      	lsls	r2, r2, #12
 80025ec:	4213      	tst	r3, r2
 80025ee:	d008      	beq.n	8002602 <__aeabi_dsub+0x67e>
 80025f0:	08ce      	lsrs	r6, r1, #3
 80025f2:	4216      	tst	r6, r2
 80025f4:	d105      	bne.n	8002602 <__aeabi_dsub+0x67e>
 80025f6:	08c0      	lsrs	r0, r0, #3
 80025f8:	0749      	lsls	r1, r1, #29
 80025fa:	4308      	orrs	r0, r1
 80025fc:	0004      	movs	r4, r0
 80025fe:	465d      	mov	r5, fp
 8002600:	0033      	movs	r3, r6
 8002602:	0f61      	lsrs	r1, r4, #29
 8002604:	00e2      	lsls	r2, r4, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	08d2      	lsrs	r2, r2, #3
 800260a:	430a      	orrs	r2, r1
 800260c:	e678      	b.n	8002300 <__aeabi_dsub+0x37c>
 800260e:	074b      	lsls	r3, r1, #29
 8002610:	08c2      	lsrs	r2, r0, #3
 8002612:	431a      	orrs	r2, r3
 8002614:	08cb      	lsrs	r3, r1, #3
 8002616:	e632      	b.n	800227e <__aeabi_dsub+0x2fa>
 8002618:	4448      	add	r0, r9
 800261a:	185b      	adds	r3, r3, r1
 800261c:	4548      	cmp	r0, r9
 800261e:	4192      	sbcs	r2, r2
 8002620:	4698      	mov	r8, r3
 8002622:	4252      	negs	r2, r2
 8002624:	4490      	add	r8, r2
 8002626:	4643      	mov	r3, r8
 8002628:	0004      	movs	r4, r0
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	d400      	bmi.n	8002630 <__aeabi_dsub+0x6ac>
 800262e:	e61a      	b.n	8002266 <__aeabi_dsub+0x2e2>
 8002630:	4642      	mov	r2, r8
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <__aeabi_dsub+0x6e8>)
 8002634:	2601      	movs	r6, #1
 8002636:	401a      	ands	r2, r3
 8002638:	4690      	mov	r8, r2
 800263a:	e614      	b.n	8002266 <__aeabi_dsub+0x2e2>
 800263c:	4666      	mov	r6, ip
 800263e:	001f      	movs	r7, r3
 8002640:	3e20      	subs	r6, #32
 8002642:	40f7      	lsrs	r7, r6
 8002644:	2c20      	cmp	r4, #32
 8002646:	d005      	beq.n	8002654 <__aeabi_dsub+0x6d0>
 8002648:	2640      	movs	r6, #64	; 0x40
 800264a:	1b36      	subs	r6, r6, r4
 800264c:	40b3      	lsls	r3, r6
 800264e:	464c      	mov	r4, r9
 8002650:	431c      	orrs	r4, r3
 8002652:	46a2      	mov	sl, r4
 8002654:	4654      	mov	r4, sl
 8002656:	1e63      	subs	r3, r4, #1
 8002658:	419c      	sbcs	r4, r3
 800265a:	433c      	orrs	r4, r7
 800265c:	e5c8      	b.n	80021f0 <__aeabi_dsub+0x26c>
 800265e:	0011      	movs	r1, r2
 8002660:	2300      	movs	r3, #0
 8002662:	2200      	movs	r2, #0
 8002664:	e532      	b.n	80020cc <__aeabi_dsub+0x148>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	000007ff 	.word	0x000007ff
 800266c:	ff7fffff 	.word	0xff7fffff
 8002670:	000007fe 	.word	0x000007fe
 8002674:	464a      	mov	r2, r9
 8002676:	1814      	adds	r4, r2, r0
 8002678:	4284      	cmp	r4, r0
 800267a:	4192      	sbcs	r2, r2
 800267c:	185b      	adds	r3, r3, r1
 800267e:	4698      	mov	r8, r3
 8002680:	4252      	negs	r2, r2
 8002682:	4490      	add	r8, r2
 8002684:	e5e9      	b.n	800225a <__aeabi_dsub+0x2d6>
 8002686:	4642      	mov	r2, r8
 8002688:	4322      	orrs	r2, r4
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x70a>
 800268c:	e6a6      	b.n	80023dc <__aeabi_dsub+0x458>
 800268e:	e5ea      	b.n	8002266 <__aeabi_dsub+0x2e2>
 8002690:	074b      	lsls	r3, r1, #29
 8002692:	08c2      	lsrs	r2, r0, #3
 8002694:	431a      	orrs	r2, r3
 8002696:	08cb      	lsrs	r3, r1, #3
 8002698:	e632      	b.n	8002300 <__aeabi_dsub+0x37c>
 800269a:	2200      	movs	r2, #0
 800269c:	4901      	ldr	r1, [pc, #4]	; (80026a4 <__aeabi_dsub+0x720>)
 800269e:	0013      	movs	r3, r2
 80026a0:	e514      	b.n	80020cc <__aeabi_dsub+0x148>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	000007ff 	.word	0x000007ff

080026a8 <__aeabi_dcmpun>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	0005      	movs	r5, r0
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <__aeabi_dcmpun+0x38>)
 80026ae:	030c      	lsls	r4, r1, #12
 80026b0:	0016      	movs	r6, r2
 80026b2:	0049      	lsls	r1, r1, #1
 80026b4:	031a      	lsls	r2, r3, #12
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	0b24      	lsrs	r4, r4, #12
 80026ba:	0d49      	lsrs	r1, r1, #21
 80026bc:	0b12      	lsrs	r2, r2, #12
 80026be:	0d5b      	lsrs	r3, r3, #21
 80026c0:	4281      	cmp	r1, r0
 80026c2:	d008      	beq.n	80026d6 <__aeabi_dcmpun+0x2e>
 80026c4:	4906      	ldr	r1, [pc, #24]	; (80026e0 <__aeabi_dcmpun+0x38>)
 80026c6:	2000      	movs	r0, #0
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d103      	bne.n	80026d4 <__aeabi_dcmpun+0x2c>
 80026cc:	4332      	orrs	r2, r6
 80026ce:	0010      	movs	r0, r2
 80026d0:	1e42      	subs	r2, r0, #1
 80026d2:	4190      	sbcs	r0, r2
 80026d4:	bd70      	pop	{r4, r5, r6, pc}
 80026d6:	2001      	movs	r0, #1
 80026d8:	432c      	orrs	r4, r5
 80026da:	d1fb      	bne.n	80026d4 <__aeabi_dcmpun+0x2c>
 80026dc:	e7f2      	b.n	80026c4 <__aeabi_dcmpun+0x1c>
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	000007ff 	.word	0x000007ff

080026e4 <__aeabi_d2iz>:
 80026e4:	000a      	movs	r2, r1
 80026e6:	b530      	push	{r4, r5, lr}
 80026e8:	4c13      	ldr	r4, [pc, #76]	; (8002738 <__aeabi_d2iz+0x54>)
 80026ea:	0053      	lsls	r3, r2, #1
 80026ec:	0309      	lsls	r1, r1, #12
 80026ee:	0005      	movs	r5, r0
 80026f0:	0b09      	lsrs	r1, r1, #12
 80026f2:	2000      	movs	r0, #0
 80026f4:	0d5b      	lsrs	r3, r3, #21
 80026f6:	0fd2      	lsrs	r2, r2, #31
 80026f8:	42a3      	cmp	r3, r4
 80026fa:	dd04      	ble.n	8002706 <__aeabi_d2iz+0x22>
 80026fc:	480f      	ldr	r0, [pc, #60]	; (800273c <__aeabi_d2iz+0x58>)
 80026fe:	4283      	cmp	r3, r0
 8002700:	dd02      	ble.n	8002708 <__aeabi_d2iz+0x24>
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <__aeabi_d2iz+0x5c>)
 8002704:	18d0      	adds	r0, r2, r3
 8002706:	bd30      	pop	{r4, r5, pc}
 8002708:	2080      	movs	r0, #128	; 0x80
 800270a:	0340      	lsls	r0, r0, #13
 800270c:	4301      	orrs	r1, r0
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <__aeabi_d2iz+0x60>)
 8002710:	1ac0      	subs	r0, r0, r3
 8002712:	281f      	cmp	r0, #31
 8002714:	dd08      	ble.n	8002728 <__aeabi_d2iz+0x44>
 8002716:	480c      	ldr	r0, [pc, #48]	; (8002748 <__aeabi_d2iz+0x64>)
 8002718:	1ac3      	subs	r3, r0, r3
 800271a:	40d9      	lsrs	r1, r3
 800271c:	000b      	movs	r3, r1
 800271e:	4258      	negs	r0, r3
 8002720:	2a00      	cmp	r2, #0
 8002722:	d1f0      	bne.n	8002706 <__aeabi_d2iz+0x22>
 8002724:	0018      	movs	r0, r3
 8002726:	e7ee      	b.n	8002706 <__aeabi_d2iz+0x22>
 8002728:	4c08      	ldr	r4, [pc, #32]	; (800274c <__aeabi_d2iz+0x68>)
 800272a:	40c5      	lsrs	r5, r0
 800272c:	46a4      	mov	ip, r4
 800272e:	4463      	add	r3, ip
 8002730:	4099      	lsls	r1, r3
 8002732:	000b      	movs	r3, r1
 8002734:	432b      	orrs	r3, r5
 8002736:	e7f2      	b.n	800271e <__aeabi_d2iz+0x3a>
 8002738:	000003fe 	.word	0x000003fe
 800273c:	0000041d 	.word	0x0000041d
 8002740:	7fffffff 	.word	0x7fffffff
 8002744:	00000433 	.word	0x00000433
 8002748:	00000413 	.word	0x00000413
 800274c:	fffffbed 	.word	0xfffffbed

08002750 <__aeabi_i2d>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2800      	cmp	r0, #0
 8002754:	d016      	beq.n	8002784 <__aeabi_i2d+0x34>
 8002756:	17c3      	asrs	r3, r0, #31
 8002758:	18c5      	adds	r5, r0, r3
 800275a:	405d      	eors	r5, r3
 800275c:	0fc4      	lsrs	r4, r0, #31
 800275e:	0028      	movs	r0, r5
 8002760:	f000 f91c 	bl	800299c <__clzsi2>
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <__aeabi_i2d+0x5c>)
 8002766:	1a12      	subs	r2, r2, r0
 8002768:	280a      	cmp	r0, #10
 800276a:	dc16      	bgt.n	800279a <__aeabi_i2d+0x4a>
 800276c:	0003      	movs	r3, r0
 800276e:	002e      	movs	r6, r5
 8002770:	3315      	adds	r3, #21
 8002772:	409e      	lsls	r6, r3
 8002774:	230b      	movs	r3, #11
 8002776:	1a18      	subs	r0, r3, r0
 8002778:	40c5      	lsrs	r5, r0
 800277a:	0553      	lsls	r3, r2, #21
 800277c:	032d      	lsls	r5, r5, #12
 800277e:	0b2d      	lsrs	r5, r5, #12
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	e003      	b.n	800278c <__aeabi_i2d+0x3c>
 8002784:	2400      	movs	r4, #0
 8002786:	2300      	movs	r3, #0
 8002788:	2500      	movs	r5, #0
 800278a:	2600      	movs	r6, #0
 800278c:	051b      	lsls	r3, r3, #20
 800278e:	432b      	orrs	r3, r5
 8002790:	07e4      	lsls	r4, r4, #31
 8002792:	4323      	orrs	r3, r4
 8002794:	0030      	movs	r0, r6
 8002796:	0019      	movs	r1, r3
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	380b      	subs	r0, #11
 800279c:	4085      	lsls	r5, r0
 800279e:	0553      	lsls	r3, r2, #21
 80027a0:	032d      	lsls	r5, r5, #12
 80027a2:	2600      	movs	r6, #0
 80027a4:	0b2d      	lsrs	r5, r5, #12
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	e7f0      	b.n	800278c <__aeabi_i2d+0x3c>
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	0000041e 	.word	0x0000041e

080027b0 <__aeabi_ui2d>:
 80027b0:	b510      	push	{r4, lr}
 80027b2:	1e04      	subs	r4, r0, #0
 80027b4:	d010      	beq.n	80027d8 <__aeabi_ui2d+0x28>
 80027b6:	f000 f8f1 	bl	800299c <__clzsi2>
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <__aeabi_ui2d+0x48>)
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	280a      	cmp	r0, #10
 80027c0:	dc11      	bgt.n	80027e6 <__aeabi_ui2d+0x36>
 80027c2:	220b      	movs	r2, #11
 80027c4:	0021      	movs	r1, r4
 80027c6:	1a12      	subs	r2, r2, r0
 80027c8:	40d1      	lsrs	r1, r2
 80027ca:	3015      	adds	r0, #21
 80027cc:	030a      	lsls	r2, r1, #12
 80027ce:	055b      	lsls	r3, r3, #21
 80027d0:	4084      	lsls	r4, r0
 80027d2:	0b12      	lsrs	r2, r2, #12
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	e001      	b.n	80027dc <__aeabi_ui2d+0x2c>
 80027d8:	2300      	movs	r3, #0
 80027da:	2200      	movs	r2, #0
 80027dc:	051b      	lsls	r3, r3, #20
 80027de:	4313      	orrs	r3, r2
 80027e0:	0020      	movs	r0, r4
 80027e2:	0019      	movs	r1, r3
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	0022      	movs	r2, r4
 80027e8:	380b      	subs	r0, #11
 80027ea:	4082      	lsls	r2, r0
 80027ec:	055b      	lsls	r3, r3, #21
 80027ee:	0312      	lsls	r2, r2, #12
 80027f0:	2400      	movs	r4, #0
 80027f2:	0b12      	lsrs	r2, r2, #12
 80027f4:	0d5b      	lsrs	r3, r3, #21
 80027f6:	e7f1      	b.n	80027dc <__aeabi_ui2d+0x2c>
 80027f8:	0000041e 	.word	0x0000041e

080027fc <__aeabi_f2d>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	0043      	lsls	r3, r0, #1
 8002800:	0246      	lsls	r6, r0, #9
 8002802:	0fc4      	lsrs	r4, r0, #31
 8002804:	20fe      	movs	r0, #254	; 0xfe
 8002806:	0e1b      	lsrs	r3, r3, #24
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	0a75      	lsrs	r5, r6, #9
 800280c:	4208      	tst	r0, r1
 800280e:	d00c      	beq.n	800282a <__aeabi_f2d+0x2e>
 8002810:	22e0      	movs	r2, #224	; 0xe0
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4694      	mov	ip, r2
 8002816:	076d      	lsls	r5, r5, #29
 8002818:	0b36      	lsrs	r6, r6, #12
 800281a:	4463      	add	r3, ip
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	4333      	orrs	r3, r6
 8002820:	07e4      	lsls	r4, r4, #31
 8002822:	4323      	orrs	r3, r4
 8002824:	0028      	movs	r0, r5
 8002826:	0019      	movs	r1, r3
 8002828:	bd70      	pop	{r4, r5, r6, pc}
 800282a:	2b00      	cmp	r3, #0
 800282c:	d114      	bne.n	8002858 <__aeabi_f2d+0x5c>
 800282e:	2d00      	cmp	r5, #0
 8002830:	d01b      	beq.n	800286a <__aeabi_f2d+0x6e>
 8002832:	0028      	movs	r0, r5
 8002834:	f000 f8b2 	bl	800299c <__clzsi2>
 8002838:	280a      	cmp	r0, #10
 800283a:	dc1c      	bgt.n	8002876 <__aeabi_f2d+0x7a>
 800283c:	230b      	movs	r3, #11
 800283e:	002a      	movs	r2, r5
 8002840:	1a1b      	subs	r3, r3, r0
 8002842:	40da      	lsrs	r2, r3
 8002844:	0003      	movs	r3, r0
 8002846:	3315      	adds	r3, #21
 8002848:	409d      	lsls	r5, r3
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <__aeabi_f2d+0x88>)
 800284c:	0312      	lsls	r2, r2, #12
 800284e:	1a1b      	subs	r3, r3, r0
 8002850:	055b      	lsls	r3, r3, #21
 8002852:	0b16      	lsrs	r6, r2, #12
 8002854:	0d5b      	lsrs	r3, r3, #21
 8002856:	e7e1      	b.n	800281c <__aeabi_f2d+0x20>
 8002858:	2d00      	cmp	r5, #0
 800285a:	d009      	beq.n	8002870 <__aeabi_f2d+0x74>
 800285c:	0b32      	lsrs	r2, r6, #12
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	0336      	lsls	r6, r6, #12
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <__aeabi_f2d+0x8c>)
 8002864:	076d      	lsls	r5, r5, #29
 8002866:	4316      	orrs	r6, r2
 8002868:	e7d8      	b.n	800281c <__aeabi_f2d+0x20>
 800286a:	2300      	movs	r3, #0
 800286c:	2600      	movs	r6, #0
 800286e:	e7d5      	b.n	800281c <__aeabi_f2d+0x20>
 8002870:	2600      	movs	r6, #0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <__aeabi_f2d+0x8c>)
 8002874:	e7d2      	b.n	800281c <__aeabi_f2d+0x20>
 8002876:	0003      	movs	r3, r0
 8002878:	002a      	movs	r2, r5
 800287a:	3b0b      	subs	r3, #11
 800287c:	409a      	lsls	r2, r3
 800287e:	2500      	movs	r5, #0
 8002880:	e7e3      	b.n	800284a <__aeabi_f2d+0x4e>
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	00000389 	.word	0x00000389
 8002888:	000007ff 	.word	0x000007ff

0800288c <__aeabi_d2f>:
 800288c:	0002      	movs	r2, r0
 800288e:	004b      	lsls	r3, r1, #1
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	0308      	lsls	r0, r1, #12
 8002894:	0d5b      	lsrs	r3, r3, #21
 8002896:	4e3d      	ldr	r6, [pc, #244]	; (800298c <__aeabi_d2f+0x100>)
 8002898:	0fcc      	lsrs	r4, r1, #31
 800289a:	0a40      	lsrs	r0, r0, #9
 800289c:	0f51      	lsrs	r1, r2, #29
 800289e:	1c5f      	adds	r7, r3, #1
 80028a0:	4308      	orrs	r0, r1
 80028a2:	00d5      	lsls	r5, r2, #3
 80028a4:	4237      	tst	r7, r6
 80028a6:	d00a      	beq.n	80028be <__aeabi_d2f+0x32>
 80028a8:	4939      	ldr	r1, [pc, #228]	; (8002990 <__aeabi_d2f+0x104>)
 80028aa:	185e      	adds	r6, r3, r1
 80028ac:	2efe      	cmp	r6, #254	; 0xfe
 80028ae:	dd16      	ble.n	80028de <__aeabi_d2f+0x52>
 80028b0:	23ff      	movs	r3, #255	; 0xff
 80028b2:	2100      	movs	r1, #0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	430b      	orrs	r3, r1
 80028b8:	07e0      	lsls	r0, r4, #31
 80028ba:	4318      	orrs	r0, r3
 80028bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <__aeabi_d2f+0x44>
 80028c2:	4328      	orrs	r0, r5
 80028c4:	d027      	beq.n	8002916 <__aeabi_d2f+0x8a>
 80028c6:	2105      	movs	r1, #5
 80028c8:	0189      	lsls	r1, r1, #6
 80028ca:	0a49      	lsrs	r1, r1, #9
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e7f1      	b.n	80028b4 <__aeabi_d2f+0x28>
 80028d0:	4305      	orrs	r5, r0
 80028d2:	d0ed      	beq.n	80028b0 <__aeabi_d2f+0x24>
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	03c9      	lsls	r1, r1, #15
 80028d8:	23ff      	movs	r3, #255	; 0xff
 80028da:	4301      	orrs	r1, r0
 80028dc:	e7ea      	b.n	80028b4 <__aeabi_d2f+0x28>
 80028de:	2e00      	cmp	r6, #0
 80028e0:	dd1c      	ble.n	800291c <__aeabi_d2f+0x90>
 80028e2:	0192      	lsls	r2, r2, #6
 80028e4:	0011      	movs	r1, r2
 80028e6:	1e4a      	subs	r2, r1, #1
 80028e8:	4191      	sbcs	r1, r2
 80028ea:	00c0      	lsls	r0, r0, #3
 80028ec:	0f6d      	lsrs	r5, r5, #29
 80028ee:	4301      	orrs	r1, r0
 80028f0:	4329      	orrs	r1, r5
 80028f2:	074b      	lsls	r3, r1, #29
 80028f4:	d048      	beq.n	8002988 <__aeabi_d2f+0xfc>
 80028f6:	230f      	movs	r3, #15
 80028f8:	400b      	ands	r3, r1
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d000      	beq.n	8002900 <__aeabi_d2f+0x74>
 80028fe:	3104      	adds	r1, #4
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	04db      	lsls	r3, r3, #19
 8002904:	400b      	ands	r3, r1
 8002906:	d03f      	beq.n	8002988 <__aeabi_d2f+0xfc>
 8002908:	1c72      	adds	r2, r6, #1
 800290a:	2efe      	cmp	r6, #254	; 0xfe
 800290c:	d0d0      	beq.n	80028b0 <__aeabi_d2f+0x24>
 800290e:	0189      	lsls	r1, r1, #6
 8002910:	0a49      	lsrs	r1, r1, #9
 8002912:	b2d3      	uxtb	r3, r2
 8002914:	e7ce      	b.n	80028b4 <__aeabi_d2f+0x28>
 8002916:	2300      	movs	r3, #0
 8002918:	2100      	movs	r1, #0
 800291a:	e7cb      	b.n	80028b4 <__aeabi_d2f+0x28>
 800291c:	0032      	movs	r2, r6
 800291e:	3217      	adds	r2, #23
 8002920:	db22      	blt.n	8002968 <__aeabi_d2f+0xdc>
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	221e      	movs	r2, #30
 8002926:	0409      	lsls	r1, r1, #16
 8002928:	4308      	orrs	r0, r1
 800292a:	1b92      	subs	r2, r2, r6
 800292c:	2a1f      	cmp	r2, #31
 800292e:	dd1d      	ble.n	800296c <__aeabi_d2f+0xe0>
 8002930:	2102      	movs	r1, #2
 8002932:	4249      	negs	r1, r1
 8002934:	1b8e      	subs	r6, r1, r6
 8002936:	0001      	movs	r1, r0
 8002938:	40f1      	lsrs	r1, r6
 800293a:	000e      	movs	r6, r1
 800293c:	2a20      	cmp	r2, #32
 800293e:	d004      	beq.n	800294a <__aeabi_d2f+0xbe>
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <__aeabi_d2f+0x108>)
 8002942:	4694      	mov	ip, r2
 8002944:	4463      	add	r3, ip
 8002946:	4098      	lsls	r0, r3
 8002948:	4305      	orrs	r5, r0
 800294a:	0029      	movs	r1, r5
 800294c:	1e4d      	subs	r5, r1, #1
 800294e:	41a9      	sbcs	r1, r5
 8002950:	4331      	orrs	r1, r6
 8002952:	2600      	movs	r6, #0
 8002954:	074b      	lsls	r3, r1, #29
 8002956:	d1ce      	bne.n	80028f6 <__aeabi_d2f+0x6a>
 8002958:	2080      	movs	r0, #128	; 0x80
 800295a:	000b      	movs	r3, r1
 800295c:	04c0      	lsls	r0, r0, #19
 800295e:	2201      	movs	r2, #1
 8002960:	4003      	ands	r3, r0
 8002962:	4201      	tst	r1, r0
 8002964:	d1d3      	bne.n	800290e <__aeabi_d2f+0x82>
 8002966:	e7af      	b.n	80028c8 <__aeabi_d2f+0x3c>
 8002968:	2300      	movs	r3, #0
 800296a:	e7ac      	b.n	80028c6 <__aeabi_d2f+0x3a>
 800296c:	490a      	ldr	r1, [pc, #40]	; (8002998 <__aeabi_d2f+0x10c>)
 800296e:	468c      	mov	ip, r1
 8002970:	0029      	movs	r1, r5
 8002972:	4463      	add	r3, ip
 8002974:	40d1      	lsrs	r1, r2
 8002976:	409d      	lsls	r5, r3
 8002978:	000a      	movs	r2, r1
 800297a:	0029      	movs	r1, r5
 800297c:	4098      	lsls	r0, r3
 800297e:	1e4d      	subs	r5, r1, #1
 8002980:	41a9      	sbcs	r1, r5
 8002982:	4301      	orrs	r1, r0
 8002984:	4311      	orrs	r1, r2
 8002986:	e7e4      	b.n	8002952 <__aeabi_d2f+0xc6>
 8002988:	0033      	movs	r3, r6
 800298a:	e79d      	b.n	80028c8 <__aeabi_d2f+0x3c>
 800298c:	000007fe 	.word	0x000007fe
 8002990:	fffffc80 	.word	0xfffffc80
 8002994:	fffffca2 	.word	0xfffffca2
 8002998:	fffffc82 	.word	0xfffffc82

0800299c <__clzsi2>:
 800299c:	211c      	movs	r1, #28
 800299e:	2301      	movs	r3, #1
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	4298      	cmp	r0, r3
 80029a4:	d301      	bcc.n	80029aa <__clzsi2+0xe>
 80029a6:	0c00      	lsrs	r0, r0, #16
 80029a8:	3910      	subs	r1, #16
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	4298      	cmp	r0, r3
 80029ae:	d301      	bcc.n	80029b4 <__clzsi2+0x18>
 80029b0:	0a00      	lsrs	r0, r0, #8
 80029b2:	3908      	subs	r1, #8
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	4298      	cmp	r0, r3
 80029b8:	d301      	bcc.n	80029be <__clzsi2+0x22>
 80029ba:	0900      	lsrs	r0, r0, #4
 80029bc:	3904      	subs	r1, #4
 80029be:	a202      	add	r2, pc, #8	; (adr r2, 80029c8 <__clzsi2+0x2c>)
 80029c0:	5c10      	ldrb	r0, [r2, r0]
 80029c2:	1840      	adds	r0, r0, r1
 80029c4:	4770      	bx	lr
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	02020304 	.word	0x02020304
 80029cc:	01010101 	.word	0x01010101
	...

080029d8 <__clzdi2>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	2900      	cmp	r1, #0
 80029dc:	d103      	bne.n	80029e6 <__clzdi2+0xe>
 80029de:	f7ff ffdd 	bl	800299c <__clzsi2>
 80029e2:	3020      	adds	r0, #32
 80029e4:	e002      	b.n	80029ec <__clzdi2+0x14>
 80029e6:	1c08      	adds	r0, r1, #0
 80029e8:	f7ff ffd8 	bl	800299c <__clzsi2>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)

080029f0 <HAL_ADC_ConvCpltCallback>:
uint8_t freg = 0, flag = 0, cont = 0;
float tensao[4], media[4];
char frase[100];


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

	freg = 1;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_ADC_ConvCpltCallback+0x18>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	200001f8 	.word	0x200001f8

08002a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a12:	f000 fd19 	bl	8003448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a16:	f000 f919 	bl	8002c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1a:	f000 fa83 	bl	8002f24 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a1e:	f000 fa63 	bl	8002ee8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a22:	f000 f971 	bl	8002d08 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002a26:	f000 fa11 	bl	8002e4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <main+0x214>)
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f001 fe21 	bl	8004674 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)analog, 4);
 8002a32:	497c      	ldr	r1, [pc, #496]	; (8002c24 <main+0x218>)
 8002a34:	4b7a      	ldr	r3, [pc, #488]	; (8002c20 <main+0x214>)
 8002a36:	2204      	movs	r2, #4
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 f8ef 	bl	8003c1c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)analog, 4);
 8002a3e:	4979      	ldr	r1, [pc, #484]	; (8002c24 <main+0x218>)
 8002a40:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <main+0x214>)
 8002a42:	2204      	movs	r2, #4
 8002a44:	0018      	movs	r0, r3
 8002a46:	f001 f8e9 	bl	8003c1c <HAL_ADC_Start_DMA>

	  if (freg) {
 8002a4a:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <main+0x21c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f5      	beq.n	8002a3e <main+0x32>

	    tensao[0] = 3.3 / 4095.0 * analog[0];
 8002a52:	4b74      	ldr	r3, [pc, #464]	; (8002c24 <main+0x218>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7ff fe7a 	bl	8002750 <__aeabi_i2d>
 8002a5c:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <main+0x220>)
 8002a5e:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <main+0x224>)
 8002a60:	f7ff f824 	bl	8001aac <__aeabi_dmul>
 8002a64:	0002      	movs	r2, r0
 8002a66:	000b      	movs	r3, r1
 8002a68:	0010      	movs	r0, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	f7ff ff0e 	bl	800288c <__aeabi_d2f>
 8002a70:	1c02      	adds	r2, r0, #0
 8002a72:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <main+0x228>)
 8002a74:	601a      	str	r2, [r3, #0]
	  	tensao[1] = 3.3 / 4095.0 * analog[1];
 8002a76:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <main+0x218>)
 8002a78:	885b      	ldrh	r3, [r3, #2]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff fe68 	bl	8002750 <__aeabi_i2d>
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <main+0x220>)
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <main+0x224>)
 8002a84:	f7ff f812 	bl	8001aac <__aeabi_dmul>
 8002a88:	0002      	movs	r2, r0
 8002a8a:	000b      	movs	r3, r1
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	f7ff fefc 	bl	800288c <__aeabi_d2f>
 8002a94:	1c02      	adds	r2, r0, #0
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <main+0x228>)
 8002a98:	605a      	str	r2, [r3, #4]
	  	tensao[2] = 3.3 / 4095.0 * analog[2];
 8002a9a:	4b62      	ldr	r3, [pc, #392]	; (8002c24 <main+0x218>)
 8002a9c:	889b      	ldrh	r3, [r3, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff fe56 	bl	8002750 <__aeabi_i2d>
 8002aa4:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <main+0x220>)
 8002aa6:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <main+0x224>)
 8002aa8:	f7ff f800 	bl	8001aac <__aeabi_dmul>
 8002aac:	0002      	movs	r2, r0
 8002aae:	000b      	movs	r3, r1
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	f7ff feea 	bl	800288c <__aeabi_d2f>
 8002ab8:	1c02      	adds	r2, r0, #0
 8002aba:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <main+0x228>)
 8002abc:	609a      	str	r2, [r3, #8]
	  	tensao[3] = 3.3 / 4095.0 * analog[3];
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <main+0x218>)
 8002ac0:	88db      	ldrh	r3, [r3, #6]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7ff fe44 	bl	8002750 <__aeabi_i2d>
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <main+0x220>)
 8002aca:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <main+0x224>)
 8002acc:	f7fe ffee 	bl	8001aac <__aeabi_dmul>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	000b      	movs	r3, r1
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	f7ff fed8 	bl	800288c <__aeabi_d2f>
 8002adc:	1c02      	adds	r2, r0, #0
 8002ade:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <main+0x228>)
 8002ae0:	60da      	str	r2, [r3, #12]

	  	for (int i = 0; i < 100; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e032      	b.n	8002b4e <main+0x142>

	  		media[0] += tensao[0];
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <main+0x22c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <main+0x228>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1c19      	adds	r1, r3, #0
 8002af2:	1c10      	adds	r0, r2, #0
 8002af4:	f7fd fdc2 	bl	800067c <__aeabi_fadd>
 8002af8:	1c03      	adds	r3, r0, #0
 8002afa:	1c1a      	adds	r2, r3, #0
 8002afc:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <main+0x22c>)
 8002afe:	601a      	str	r2, [r3, #0]
	  		media[1] += tensao[1];
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <main+0x22c>)
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <main+0x228>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	1c19      	adds	r1, r3, #0
 8002b0a:	1c10      	adds	r0, r2, #0
 8002b0c:	f7fd fdb6 	bl	800067c <__aeabi_fadd>
 8002b10:	1c03      	adds	r3, r0, #0
 8002b12:	1c1a      	adds	r2, r3, #0
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <main+0x22c>)
 8002b16:	605a      	str	r2, [r3, #4]
	  		media[2] += tensao[2];
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <main+0x22c>)
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <main+0x228>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	1c19      	adds	r1, r3, #0
 8002b22:	1c10      	adds	r0, r2, #0
 8002b24:	f7fd fdaa 	bl	800067c <__aeabi_fadd>
 8002b28:	1c03      	adds	r3, r0, #0
 8002b2a:	1c1a      	adds	r2, r3, #0
 8002b2c:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <main+0x22c>)
 8002b2e:	609a      	str	r2, [r3, #8]
	  		media[3] += tensao[3];
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <main+0x22c>)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <main+0x228>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	1c19      	adds	r1, r3, #0
 8002b3a:	1c10      	adds	r0, r2, #0
 8002b3c:	f7fd fd9e 	bl	800067c <__aeabi_fadd>
 8002b40:	1c03      	adds	r3, r0, #0
 8002b42:	1c1a      	adds	r2, r3, #0
 8002b44:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <main+0x22c>)
 8002b46:	60da      	str	r2, [r3, #12]
	  	for (int i = 0; i < 100; i++) {
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b63      	cmp	r3, #99	; 0x63
 8002b52:	ddc9      	ble.n	8002ae8 <main+0xdc>

	  	}

	  	 media[0] /= 100;
 8002b54:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <main+0x22c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4938      	ldr	r1, [pc, #224]	; (8002c3c <main+0x230>)
 8002b5a:	1c18      	adds	r0, r3, #0
 8002b5c:	f7fd ff2a 	bl	80009b4 <__aeabi_fdiv>
 8002b60:	1c03      	adds	r3, r0, #0
 8002b62:	1c1a      	adds	r2, r3, #0
 8002b64:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <main+0x22c>)
 8002b66:	601a      	str	r2, [r3, #0]
	  	 media[1] /= 100;
 8002b68:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <main+0x22c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4933      	ldr	r1, [pc, #204]	; (8002c3c <main+0x230>)
 8002b6e:	1c18      	adds	r0, r3, #0
 8002b70:	f7fd ff20 	bl	80009b4 <__aeabi_fdiv>
 8002b74:	1c03      	adds	r3, r0, #0
 8002b76:	1c1a      	adds	r2, r3, #0
 8002b78:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <main+0x22c>)
 8002b7a:	605a      	str	r2, [r3, #4]
	  	 media[2] /= 100;
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <main+0x22c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	492e      	ldr	r1, [pc, #184]	; (8002c3c <main+0x230>)
 8002b82:	1c18      	adds	r0, r3, #0
 8002b84:	f7fd ff16 	bl	80009b4 <__aeabi_fdiv>
 8002b88:	1c03      	adds	r3, r0, #0
 8002b8a:	1c1a      	adds	r2, r3, #0
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <main+0x22c>)
 8002b8e:	609a      	str	r2, [r3, #8]
	  	 media[3] /= 100;
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <main+0x22c>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4929      	ldr	r1, [pc, #164]	; (8002c3c <main+0x230>)
 8002b96:	1c18      	adds	r0, r3, #0
 8002b98:	f7fd ff0c 	bl	80009b4 <__aeabi_fdiv>
 8002b9c:	1c03      	adds	r3, r0, #0
 8002b9e:	1c1a      	adds	r2, r3, #0
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <main+0x22c>)
 8002ba2:	60da      	str	r2, [r3, #12]

	  	 freg = 0;
 8002ba4:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <main+0x21c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
	     sprintf(frase, " 1= %f\n 2= %f\n 3= %f\n 4= %f\n\n\r", media[0], media[1], media[2], media[3]);
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <main+0x22c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c18      	adds	r0, r3, #0
 8002bb0:	f7ff fe24 	bl	80027fc <__aeabi_f2d>
 8002bb4:	60b8      	str	r0, [r7, #8]
 8002bb6:	60f9      	str	r1, [r7, #12]
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <main+0x22c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	1c18      	adds	r0, r3, #0
 8002bbe:	f7ff fe1d 	bl	80027fc <__aeabi_f2d>
 8002bc2:	0004      	movs	r4, r0
 8002bc4:	000d      	movs	r5, r1
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <main+0x22c>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	1c18      	adds	r0, r3, #0
 8002bcc:	f7ff fe16 	bl	80027fc <__aeabi_f2d>
 8002bd0:	6038      	str	r0, [r7, #0]
 8002bd2:	6079      	str	r1, [r7, #4]
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <main+0x22c>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	1c18      	adds	r0, r3, #0
 8002bda:	f7ff fe0f 	bl	80027fc <__aeabi_f2d>
 8002bde:	0002      	movs	r2, r0
 8002be0:	000b      	movs	r3, r1
 8002be2:	4917      	ldr	r1, [pc, #92]	; (8002c40 <main+0x234>)
 8002be4:	4817      	ldr	r0, [pc, #92]	; (8002c44 <main+0x238>)
 8002be6:	9204      	str	r2, [sp, #16]
 8002be8:	9305      	str	r3, [sp, #20]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	9202      	str	r2, [sp, #8]
 8002bf0:	9303      	str	r3, [sp, #12]
 8002bf2:	9400      	str	r4, [sp, #0]
 8002bf4:	9501      	str	r5, [sp, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f005 fce5 	bl	80085c8 <siprintf>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t*)frase, strlen(frase));
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <main+0x238>)
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7fd fa7f 	bl	8000104 <strlen>
 8002c06:	0003      	movs	r3, r0
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <main+0x238>)
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <main+0x23c>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 fb72 	bl	80062f8 <HAL_UART_Transmit_IT>
	     HAL_Delay(500);
 8002c14:	23fa      	movs	r3, #250	; 0xfa
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fc9b 	bl	8003554 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)analog, 4);
 8002c1e:	e70e      	b.n	8002a3e <main+0x32>
 8002c20:	20000220 	.word	0x20000220
 8002c24:	20000208 	.word	0x20000208
 8002c28:	200001f8 	.word	0x200001f8
 8002c2c:	e734d9b4 	.word	0xe734d9b4
 8002c30:	3f4a680c 	.word	0x3f4a680c
 8002c34:	20000210 	.word	0x20000210
 8002c38:	200002e4 	.word	0x200002e4
 8002c3c:	42c80000 	.word	0x42c80000
 8002c40:	0800ab88 	.word	0x0800ab88
 8002c44:	200002f4 	.word	0x200002f4
 8002c48:	20000358 	.word	0x20000358

08002c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b095      	sub	sp, #84	; 0x54
 8002c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c52:	2414      	movs	r4, #20
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	0018      	movs	r0, r3
 8002c58:	233c      	movs	r3, #60	; 0x3c
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f005 f831 	bl	8007cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	0018      	movs	r0, r3
 8002c66:	2310      	movs	r3, #16
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f005 f82a 	bl	8007cc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f002 fb51 	bl	800531c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	0052      	lsls	r2, r2, #1
 8002c86:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c88:	0021      	movs	r1, r4
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2202      	movs	r2, #2
 8002c9a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2208      	movs	r2, #8
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	0292      	lsls	r2, r2, #10
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	0492      	lsls	r2, r2, #18
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0592      	lsls	r2, r2, #22
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f002 fb73 	bl	80053b4 <HAL_RCC_OscConfig>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d001      	beq.n	8002cd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002cd2:	f000 f949 	bl	8002f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2202      	movs	r2, #2
 8002ce0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f002 fec4 	bl	8005a80 <HAL_RCC_ClockConfig>
 8002cf8:	1e03      	subs	r3, r0, #0
 8002cfa:	d001      	beq.n	8002d00 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002cfc:	f000 f934 	bl	8002f68 <Error_Handler>
  }
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b015      	add	sp, #84	; 0x54
 8002d06:	bd90      	pop	{r4, r7, pc}

08002d08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	0018      	movs	r0, r3
 8002d12:	230c      	movs	r3, #12
 8002d14:	001a      	movs	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f004 ffd4 	bl	8007cc4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <MX_ADC1_Init+0x134>)
 8002d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d22:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	05d2      	lsls	r2, r2, #23
 8002d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d2a:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	0392      	lsls	r2, r2, #14
 8002d3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d40:	2208      	movs	r2, #8
 8002d42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d44:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d58:	2204      	movs	r2, #4
 8002d5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d5e:	2220      	movs	r2, #32
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d64:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d72:	222c      	movs	r2, #44	; 0x2c
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d80:	2206      	movs	r2, #6
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d86:	2206      	movs	r2, #6
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d8c:	223c      	movs	r2, #60	; 0x3c
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fd60 	bl	8003860 <HAL_ADC_Init>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002da4:	f000 f8e0 	bl	8002f68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dba:	1d3a      	adds	r2, r7, #4
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f001 f8e9 	bl	8003f98 <HAL_ADC_ConfigChannel>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d001      	beq.n	8002dce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002dca:	f000 f8cd 	bl	8002f68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <MX_ADC1_Init+0x138>)
 8002dd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dda:	1d3a      	adds	r2, r7, #4
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f001 f8d9 	bl	8003f98 <HAL_ADC_ConfigChannel>
 8002de6:	1e03      	subs	r3, r0, #0
 8002de8:	d001      	beq.n	8002dee <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002dea:	f000 f8bd 	bl	8002f68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <MX_ADC1_Init+0x13c>)
 8002df2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2208      	movs	r2, #8
 8002df8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfa:	1d3a      	adds	r2, r7, #4
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f001 f8c9 	bl	8003f98 <HAL_ADC_ConfigChannel>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002e0a:	f000 f8ad 	bl	8002f68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <MX_ADC1_Init+0x140>)
 8002e12:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	220c      	movs	r2, #12
 8002e18:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e1a:	1d3a      	adds	r2, r7, #4
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_ADC1_Init+0x130>)
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 f8b9 	bl	8003f98 <HAL_ADC_ConfigChannel>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002e2a:	f000 f89d 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	20000220 	.word	0x20000220
 8002e3c:	40012400 	.word	0x40012400
 8002e40:	04000002 	.word	0x04000002
 8002e44:	10000010 	.word	0x10000010
 8002e48:	24000200 	.word	0x24000200

08002e4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e52:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <MX_USART2_UART_Init+0x98>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e58:	22e1      	movs	r2, #225	; 0xe1
 8002e5a:	0252      	lsls	r2, r2, #9
 8002e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f003 f9d8 	bl	800624c <HAL_UART_Init>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ea0:	f000 f862 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f004 fe01 	bl	8007ab0 <HAL_UARTEx_SetTxFifoThreshold>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002eb2:	f000 f859 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f004 fe38 	bl	8007b30 <HAL_UARTEx_SetRxFifoThreshold>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ec4:	f000 f850 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <MX_USART2_UART_Init+0x94>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f004 fdb6 	bl	8007a3c <HAL_UARTEx_DisableFifoMode>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ed4:	f000 f848 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000358 	.word	0x20000358
 8002ee4:	40004400 	.word	0x40004400

08002ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_DMA_Init+0x38>)
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_DMA_Init+0x38>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_DMA_Init+0x38>)
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2009      	movs	r0, #9
 8002f0c:	f001 fd00 	bl	8004910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f10:	2009      	movs	r0, #9
 8002f12:	f001 fd12 	bl	800493a <HAL_NVIC_EnableIRQ>

}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000

08002f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f48:	2102      	movs	r1, #2
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MX_GPIO_Init+0x40>)
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	2202      	movs	r2, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]

}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	40021000 	.word	0x40021000

08002f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6c:	b672      	cpsid	i
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <Error_Handler+0x8>
	...

08002f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0549      	lsls	r1, r1, #21
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	055b      	lsls	r3, r3, #21
 8002fa8:	4013      	ands	r3, r2
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 faf2 	bl	800359c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b09f      	sub	sp, #124	; 0x7c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	2364      	movs	r3, #100	; 0x64
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	2314      	movs	r3, #20
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f004 fe74 	bl	8007cc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fdc:	2418      	movs	r4, #24
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	234c      	movs	r3, #76	; 0x4c
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f004 fe6c 	bl	8007cc4 <memset>
  if(hadc->Instance==ADC1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	; (8003110 <HAL_ADC_MspInit+0x14c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d000      	beq.n	8002ff8 <HAL_ADC_MspInit+0x34>
 8002ff6:	e087      	b.n	8003108 <HAL_ADC_MspInit+0x144>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	01d2      	lsls	r2, r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003006:	193b      	adds	r3, r7, r4
 8003008:	0018      	movs	r0, r3
 800300a:	f002 fee3 	bl	8005dd4 <HAL_RCCEx_PeriphCLKConfig>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d001      	beq.n	8003016 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003012:	f7ff ffa9 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003016:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_ADC_MspInit+0x150>)
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	0349      	lsls	r1, r1, #13
 8003020:	430a      	orrs	r2, r1
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	035b      	lsls	r3, r3, #13
 800302c:	4013      	ands	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003038:	2101      	movs	r1, #1
 800303a:	430a      	orrs	r2, r1
 800303c:	635a      	str	r2, [r3, #52]	; 0x34
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_ADC_MspInit+0x150>)
 800304c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003050:	2102      	movs	r1, #2
 8003052:	430a      	orrs	r2, r1
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003062:	2464      	movs	r4, #100	; 0x64
 8003064:	193b      	adds	r3, r7, r4
 8003066:	2213      	movs	r2, #19
 8003068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800306a:	193b      	adds	r3, r7, r4
 800306c:	2203      	movs	r2, #3
 800306e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003076:	193a      	adds	r2, r7, r4
 8003078:	23a0      	movs	r3, #160	; 0xa0
 800307a:	05db      	lsls	r3, r3, #23
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f001 ffe0 	bl	8005044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2203      	movs	r2, #3
 800308e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	193b      	adds	r3, r7, r4
 8003098:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_ADC_MspInit+0x154>)
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f001 ffd1 	bl	8005044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_ADC_MspInit+0x15c>)
 80030a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80030a8:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	0052      	lsls	r2, r2, #1
 80030c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	00d2      	lsls	r2, r2, #3
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030de:	0018      	movs	r0, r3
 80030e0:	f001 fc48 	bl	8004974 <HAL_DMA_Init>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d001      	beq.n	80030ec <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80030e8:	f7ff ff3e 	bl	8002f68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	200c      	movs	r0, #12
 80030fe:	f001 fc07 	bl	8004910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003102:	200c      	movs	r0, #12
 8003104:	f001 fc19 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b01f      	add	sp, #124	; 0x7c
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	40012400 	.word	0x40012400
 8003114:	40021000 	.word	0x40021000
 8003118:	50000400 	.word	0x50000400
 800311c:	20000284 	.word	0x20000284
 8003120:	40020008 	.word	0x40020008

08003124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	235c      	movs	r3, #92	; 0x5c
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	0018      	movs	r0, r3
 8003132:	2314      	movs	r3, #20
 8003134:	001a      	movs	r2, r3
 8003136:	2100      	movs	r1, #0
 8003138:	f004 fdc4 	bl	8007cc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800313c:	2410      	movs	r4, #16
 800313e:	193b      	adds	r3, r7, r4
 8003140:	0018      	movs	r0, r3
 8003142:	234c      	movs	r3, #76	; 0x4c
 8003144:	001a      	movs	r2, r3
 8003146:	2100      	movs	r1, #0
 8003148:	f004 fdbc 	bl	8007cc4 <memset>
  if(huart->Instance==USART2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_UART_MspInit+0xc8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d146      	bne.n	80031e4 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003162:	193b      	adds	r3, r7, r4
 8003164:	0018      	movs	r0, r3
 8003166:	f002 fe35 	bl	8005dd4 <HAL_RCCEx_PeriphCLKConfig>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800316e:	f7ff fefb 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 8003174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0289      	lsls	r1, r1, #10
 800317c:	430a      	orrs	r2, r1
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 8003182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 8003194:	2101      	movs	r1, #1
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_UART_MspInit+0xcc>)
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031a6:	215c      	movs	r1, #92	; 0x5c
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2202      	movs	r2, #2
 80031b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2200      	movs	r2, #0
 80031be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2201      	movs	r2, #1
 80031c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	187a      	adds	r2, r7, r1
 80031c8:	23a0      	movs	r3, #160	; 0xa0
 80031ca:	05db      	lsls	r3, r3, #23
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f001 ff38 	bl	8005044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2100      	movs	r1, #0
 80031d8:	201c      	movs	r0, #28
 80031da:	f001 fb99 	bl	8004910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80031de:	201c      	movs	r0, #28
 80031e0:	f001 fbab 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b01d      	add	sp, #116	; 0x74
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	40004400 	.word	0x40004400
 80031f0:	40021000 	.word	0x40021000

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler+0x4>

080031fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <HardFault_Handler+0x4>

08003200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 f980 	bl	800351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <DMA1_Channel1_IRQHandler+0x14>)
 800322a:	0018      	movs	r0, r3
 800322c:	f001 fd9c 	bl	8004d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	20000284 	.word	0x20000284

0800323c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <ADC1_COMP_IRQHandler+0x14>)
 8003242:	0018      	movs	r0, r3
 8003244:	f000 fd78 	bl	8003d38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	20000220 	.word	0x20000220

08003254 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <USART2_LPUART2_IRQHandler+0x14>)
 800325a:	0018      	movs	r0, r3
 800325c:	f003 f908 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000358 	.word	0x20000358

0800326c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	return 1;
 8003270:	2301      	movs	r3, #1
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_kill>:

int _kill(int pid, int sig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003282:	f004 fcf5 	bl	8007c70 <__errno>
 8003286:	0003      	movs	r3, r0
 8003288:	2216      	movs	r2, #22
 800328a:	601a      	str	r2, [r3, #0]
	return -1;
 800328c:	2301      	movs	r3, #1
 800328e:	425b      	negs	r3, r3
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <_exit>:

void _exit (int status)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032a0:	2301      	movs	r3, #1
 80032a2:	425a      	negs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0011      	movs	r1, r2
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ffe5 	bl	8003278 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ae:	e7fe      	b.n	80032ae <_exit+0x16>

080032b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e00a      	b.n	80032d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032c2:	e000      	b.n	80032c6 <_read+0x16>
 80032c4:	bf00      	nop
 80032c6:	0001      	movs	r1, r0
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	60ba      	str	r2, [r7, #8]
 80032ce:	b2ca      	uxtb	r2, r1
 80032d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbf0      	blt.n	80032c2 <_read+0x12>
	}

return len;
 80032e0:	687b      	ldr	r3, [r7, #4]
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b006      	add	sp, #24
 80032e8:	bd80      	pop	{r7, pc}

080032ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e009      	b.n	8003310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	60ba      	str	r2, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	0018      	movs	r0, r3
 8003306:	e000      	b.n	800330a <_write+0x20>
 8003308:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	dbf1      	blt.n	80032fc <_write+0x12>
	}
	return len;
 8003318:	687b      	ldr	r3, [r7, #4]
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b006      	add	sp, #24
 8003320:	bd80      	pop	{r7, pc}

08003322 <_close>:

int _close(int file)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	return -1;
 800332a:	2301      	movs	r3, #1
 800332c:	425b      	negs	r3, r3
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}

08003336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	0192      	lsls	r2, r2, #6
 8003346:	605a      	str	r2, [r3, #4]
	return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}

08003352 <_isatty>:

int _isatty(int file)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
	return 1;
 800335a:	2301      	movs	r3, #1
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
	return 0;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <_sbrk+0x5c>)
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <_sbrk+0x60>)
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <_sbrk+0x64>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <_sbrk+0x64>)
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <_sbrk+0x68>)
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <_sbrk+0x64>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ac:	f004 fc60 	bl	8007c70 <__errno>
 80033b0:	0003      	movs	r3, r0
 80033b2:	220c      	movs	r2, #12
 80033b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	425b      	negs	r3, r3
 80033ba:	e009      	b.n	80033d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <_sbrk+0x64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	18d2      	adds	r2, r2, r3
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <_sbrk+0x64>)
 80033cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20024000 	.word	0x20024000
 80033dc:	00000400 	.word	0x00000400
 80033e0:	200001fc 	.word	0x200001fc
 80033e4:	20000400 	.word	0x20000400

080033e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033f8:	f7ff fff6 	bl	80033e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480c      	ldr	r0, [pc, #48]	; (8003430 <LoopForever+0x6>)
  ldr r1, =_edata
 80033fe:	490d      	ldr	r1, [pc, #52]	; (8003434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <LoopForever+0xe>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003414:	4c0a      	ldr	r4, [pc, #40]	; (8003440 <LoopForever+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003422:	f004 fc2b 	bl	8007c7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003426:	f7ff faf1 	bl	8002a0c <main>

0800342a <LoopForever>:

LoopForever:
  b LoopForever
 800342a:	e7fe      	b.n	800342a <LoopForever>
  ldr   r0, =_estack
 800342c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003434:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003438:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 800343c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003440:	200003fc 	.word	0x200003fc

08003444 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <CEC_IRQHandler>
	...

08003448 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_Init+0x3c>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_Init+0x3c>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0049      	lsls	r1, r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003462:	2003      	movs	r0, #3
 8003464:	f000 f810 	bl	8003488 <HAL_InitTick>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d003      	beq.n	8003474 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e001      	b.n	8003478 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003474:	f7ff fd7e 	bl	8002f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_InitTick+0x88>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02b      	beq.n	80034f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_InitTick+0x8c>)
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_InitTick+0x88>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	0019      	movs	r1, r3
 80034aa:	23fa      	movs	r3, #250	; 0xfa
 80034ac:	0098      	lsls	r0, r3, #2
 80034ae:	f7fc fe45 	bl	800013c <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	0019      	movs	r1, r3
 80034b6:	0020      	movs	r0, r4
 80034b8:	f7fc fe40 	bl	800013c <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	0018      	movs	r0, r3
 80034c0:	f001 fa4b 	bl	800495a <HAL_SYSTICK_Config>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d112      	bne.n	80034ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d80a      	bhi.n	80034e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	2301      	movs	r3, #1
 80034d2:	425b      	negs	r3, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	0018      	movs	r0, r3
 80034d8:	f001 fa1a 	bl	8004910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_InitTick+0x90>)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e00d      	b.n	8003500 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e008      	b.n	8003500 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034ee:	230f      	movs	r3, #15
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e003      	b.n	8003500 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034f8:	230f      	movs	r3, #15
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b005      	add	sp, #20
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000008 	.word	0x20000008
 8003514:	20000000 	.word	0x20000000
 8003518:	20000004 	.word	0x20000004

0800351c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_IncTick+0x1c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	001a      	movs	r2, r3
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x20>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	18d2      	adds	r2, r2, r3
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_IncTick+0x20>)
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20000008 	.word	0x20000008
 800353c:	200003e8 	.word	0x200003e8

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_GetTick+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	200003e8 	.word	0x200003e8

08003554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff fff0 	bl	8003540 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	001a      	movs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	189b      	adds	r3, r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	f7ff ffe0 	bl	8003540 <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40010000 	.word	0x40010000
 80035c4:	fffff9ff 	.word	0xfffff9ff

080035c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035d8:	401a      	ands	r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	fe3fffff 	.word	0xfe3fffff

080035f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	23e0      	movs	r3, #224	; 0xe0
 80035fe:	045b      	lsls	r3, r3, #17
 8003600:	4013      	ands	r3, r2
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}

0800360a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	2104      	movs	r1, #4
 800361e:	400a      	ands	r2, r1
 8003620:	2107      	movs	r1, #7
 8003622:	4091      	lsls	r1, r2
 8003624:	000a      	movs	r2, r1
 8003626:	43d2      	mvns	r2, r2
 8003628:	401a      	ands	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2104      	movs	r1, #4
 800362e:	400b      	ands	r3, r1
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4099      	lsls	r1, r3
 8003634:	000b      	movs	r3, r1
 8003636:	431a      	orrs	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}

08003644 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	23c0      	movs	r3, #192	; 0xc0
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d101      	bne.n	800365c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800365c:	2300      	movs	r3, #0
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}

08003666 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	211f      	movs	r1, #31
 800367a:	400a      	ands	r2, r1
 800367c:	210f      	movs	r1, #15
 800367e:	4091      	lsls	r1, r2
 8003680:	000a      	movs	r2, r1
 8003682:	43d2      	mvns	r2, r2
 8003684:	401a      	ands	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	210f      	movs	r1, #15
 800368c:	4019      	ands	r1, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	201f      	movs	r0, #31
 8003692:	4003      	ands	r3, r0
 8003694:	4099      	lsls	r1, r3
 8003696:	000b      	movs	r3, r1
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	035b      	lsls	r3, r3, #13
 80036b8:	0b5b      	lsrs	r3, r3, #13
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	0352      	lsls	r2, r2, #13
 80036da:	0b52      	lsrs	r2, r2, #13
 80036dc:	43d2      	mvns	r2, r2
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2203      	movs	r2, #3
 80036fa:	4013      	ands	r3, r2
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	0212      	lsls	r2, r2, #8
 8003718:	43d2      	mvns	r2, r2
 800371a:	401a      	ands	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	400b      	ands	r3, r1
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003726:	400b      	ands	r3, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	07ffff00 	.word	0x07ffff00

0800373c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <LL_ADC_EnableInternalRegulator+0x24>)
 800374a:	4013      	ands	r3, r2
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	0552      	lsls	r2, r2, #21
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	6fffffe8 	.word	0x6fffffe8

08003764 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	055b      	lsls	r3, r3, #21
 8003774:	401a      	ands	r2, r3
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	055b      	lsls	r3, r3, #21
 800377a:	429a      	cmp	r2, r3
 800377c:	d101      	bne.n	8003782 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <LL_ADC_Enable+0x20>)
 800379a:	4013      	ands	r3, r2
 800379c:	2201      	movs	r2, #1
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	7fffffe8 	.word	0x7fffffe8

080037b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <LL_ADC_Disable+0x20>)
 80037be:	4013      	ands	r3, r2
 80037c0:	2202      	movs	r2, #2
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	7fffffe8 	.word	0x7fffffe8

080037d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <LL_ADC_IsEnabled+0x18>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <LL_ADC_IsEnabled+0x1a>
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2202      	movs	r2, #2
 8003804:	4013      	ands	r3, r2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d101      	bne.n	800380e <LL_ADC_IsDisableOngoing+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_IsDisableOngoing+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <LL_ADC_REG_StartConversion+0x20>)
 8003826:	4013      	ands	r3, r2
 8003828:	2204      	movs	r2, #4
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}
 8003838:	7fffffe8 	.word	0x7fffffe8

0800383c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2204      	movs	r2, #4
 800384a:	4013      	ands	r3, r2
 800384c:	2b04      	cmp	r3, #4
 800384e:	d101      	bne.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b002      	add	sp, #8
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003868:	231f      	movs	r3, #31
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1b1      	b.n	8003bea <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff fb97 	bl	8002fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2254      	movs	r2, #84	; 0x54
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff ff5b 	bl	8003764 <LL_ADC_IsInternalRegulatorEnabled>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d115      	bne.n	80038de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff ff40 	bl	800373c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038bc:	4bcd      	ldr	r3, [pc, #820]	; (8003bf4 <HAL_ADC_Init+0x394>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	49cd      	ldr	r1, [pc, #820]	; (8003bf8 <HAL_ADC_Init+0x398>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc fc3a 	bl	800013c <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7ff ff3e 	bl	8003764 <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d10f      	bne.n	800390c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	2210      	movs	r2, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	2201      	movs	r2, #1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ff93 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003916:	0003      	movs	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	2210      	movs	r2, #16
 8003920:	4013      	ands	r3, r2
 8003922:	d000      	beq.n	8003926 <HAL_ADC_Init+0xc6>
 8003924:	e154      	b.n	8003bd0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d000      	beq.n	800392e <HAL_ADC_Init+0xce>
 800392c:	e150      	b.n	8003bd0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4ab2      	ldr	r2, [pc, #712]	; (8003bfc <HAL_ADC_Init+0x39c>)
 8003934:	4013      	ands	r3, r2
 8003936:	2202      	movs	r2, #2
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff ff46 	bl	80037d4 <LL_ADC_IsEnabled>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d156      	bne.n	80039fa <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2218      	movs	r2, #24
 8003954:	4393      	bics	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0f9b      	lsrs	r3, r3, #30
 800396a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003970:	4313      	orrs	r3, r2
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223c      	movs	r2, #60	; 0x3c
 800397c:	5c9b      	ldrb	r3, [r3, r2]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d111      	bne.n	80039a6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0f9b      	lsrs	r3, r3, #30
 8003988:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800398e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003994:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800399a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	2201      	movs	r2, #1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4a94      	ldr	r2, [pc, #592]	; (8003c00 <HAL_ADC_Init+0x3a0>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	23c0      	movs	r3, #192	; 0xc0
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d018      	beq.n	80039fa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d012      	beq.n	80039fa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	429a      	cmp	r2, r3
 80039de:	d00c      	beq.n	80039fa <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80039e0:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_ADC_Init+0x3a4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a88      	ldr	r2, [pc, #544]	; (8003c08 <HAL_ADC_Init+0x3a8>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	23f0      	movs	r3, #240	; 0xf0
 80039f0:	039b      	lsls	r3, r3, #14
 80039f2:	401a      	ands	r2, r3
 80039f4:	4b83      	ldr	r3, [pc, #524]	; (8003c04 <HAL_ADC_Init+0x3a4>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7e1b      	ldrb	r3, [r3, #24]
 80039fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7e5b      	ldrb	r3, [r3, #25]
 8003a04:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a06:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e9b      	ldrb	r3, [r3, #26]
 8003a0c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_ADC_Init+0x1be>
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	015b      	lsls	r3, r3, #5
 8003a1c:	e000      	b.n	8003a20 <HAL_ADC_Init+0x1c0>
 8003a1e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a26:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da04      	bge.n	8003a3a <HAL_ADC_Init+0x1da>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	e001      	b.n	8003a3e <HAL_ADC_Init+0x1de>
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003a3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	5c5b      	ldrb	r3, [r3, r1]
 8003a46:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d115      	bne.n	8003a86 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7e9b      	ldrb	r3, [r3, #26]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	0252      	lsls	r2, r2, #9
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e00b      	b.n	8003a86 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	2220      	movs	r2, #32
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a92:	23e0      	movs	r3, #224	; 0xe0
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_ADC_Init+0x3ac>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4a53      	ldr	r2, [pc, #332]	; (8003c10 <HAL_ADC_Init+0x3b0>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	001a      	movs	r2, r3
 8003ada:	2100      	movs	r1, #0
 8003adc:	f7ff fd95 	bl	800360a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	494a      	ldr	r1, [pc, #296]	; (8003c14 <HAL_ADC_Init+0x3b4>)
 8003aea:	001a      	movs	r2, r3
 8003aec:	f7ff fd8d 	bl	800360a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2110      	movs	r1, #16
 8003b04:	4249      	negs	r1, r1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0a:	e03a      	b.n	8003b82 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	039b      	lsls	r3, r3, #14
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d134      	bne.n	8003b82 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e00c      	b.n	8003b38 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	40da      	lsrs	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d006      	beq.n	8003b40 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3301      	adds	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d9ef      	bls.n	8003b1e <HAL_ADC_Init+0x2be>
 8003b3e:	e000      	b.n	8003b42 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003b40:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d109      	bne.n	8003b5c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2110      	movs	r1, #16
 8003b54:	4249      	negs	r1, r1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
 8003b5a:	e012      	b.n	8003b82 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	221c      	movs	r2, #28
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2210      	movs	r2, #16
 8003b70:	4252      	negs	r2, r2
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0011      	movs	r1, r2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <HAL_ADC_Init+0x3b8>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10b      	bne.n	8003baa <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003ba8:	e01c      	b.n	8003be4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	2212      	movs	r2, #18
 8003bb0:	4393      	bics	r3, r2
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003bc6:	231f      	movs	r3, #31
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003bce:	e009      	b.n	8003be4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bdc:	231f      	movs	r3, #31
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003be4:	231f      	movs	r3, #31
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b008      	add	sp, #32
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	00030d40 	.word	0x00030d40
 8003bfc:	fffffefd 	.word	0xfffffefd
 8003c00:	1ffffc02 	.word	0x1ffffc02
 8003c04:	40012708 	.word	0x40012708
 8003c08:	ffc3ffff 	.word	0xffc3ffff
 8003c0c:	fffe0219 	.word	0xfffe0219
 8003c10:	dffffc02 	.word	0xdffffc02
 8003c14:	07ffff04 	.word	0x07ffff04
 8003c18:	833fffe7 	.word	0x833fffe7

08003c1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c1c:	b5b0      	push	{r4, r5, r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff fe05 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d16c      	bne.n	8003d10 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2254      	movs	r2, #84	; 0x54
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x28>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06c      	b.n	8003d1e <HAL_ADC_Start_DMA+0x102>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2254      	movs	r2, #84	; 0x54
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	d113      	bne.n	8003c80 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff fdb9 	bl	80037d4 <LL_ADC_IsEnabled>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7ff fda0 	bl	80037b0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c80:	2517      	movs	r5, #23
 8003c82:	197c      	adds	r4, r7, r5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 fb5e 	bl	8004348 <ADC_Enable>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c90:	002c      	movs	r4, r5
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d13e      	bne.n	8003d18 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <HAL_ADC_Start_DMA+0x10c>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0052      	lsls	r2, r2, #1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_ADC_Start_DMA+0x110>)
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_ADC_Start_DMA+0x114>)
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_ADC_Start_DMA+0x118>)
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	221c      	movs	r2, #28
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2254      	movs	r2, #84	; 0x54
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3340      	adds	r3, #64	; 0x40
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	193c      	adds	r4, r7, r4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f000 fee6 	bl	8004acc <HAL_DMA_Start_IT>
 8003d00:	0003      	movs	r3, r0
 8003d02:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff fd85 	bl	8003818 <LL_ADC_REG_StartConversion>
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d10:	2317      	movs	r3, #23
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2202      	movs	r2, #2
 8003d16:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d18:	2317      	movs	r3, #23
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bdb0      	pop	{r4, r5, r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	fffff0fe 	.word	0xfffff0fe
 8003d2c:	08004511 	.word	0x08004511
 8003d30:	080045d9 	.word	0x080045d9
 8003d34:	080045f7 	.word	0x080045f7

08003d38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2202      	movs	r2, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d017      	beq.n	8003d8c <HAL_ADC_IRQHandler+0x54>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d013      	beq.n	8003d8c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	2210      	movs	r2, #16
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d106      	bne.n	8003d7c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fd0a 	bl	8004798 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	4013      	ands	r3, r2
 8003d92:	d003      	beq.n	8003d9c <HAL_ADC_IRQHandler+0x64>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2204      	movs	r2, #4
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d107      	bne.n	8003dac <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2208      	movs	r2, #8
 8003da0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003da2:	d04d      	beq.n	8003e40 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2208      	movs	r2, #8
 8003da8:	4013      	ands	r3, r2
 8003daa:	d049      	beq.n	8003e40 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	2210      	movs	r2, #16
 8003db2:	4013      	ands	r3, r2
 8003db4:	d106      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fc3b 	bl	8003644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d02e      	beq.n	8003e30 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7e9b      	ldrb	r3, [r3, #26]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d12a      	bne.n	8003e30 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d123      	bne.n	8003e30 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff fd25 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d110      	bne.n	8003e18 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	210c      	movs	r1, #12
 8003e02:	438a      	bics	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4a56      	ldr	r2, [pc, #344]	; (8003f64 <HAL_ADC_IRQHandler+0x22c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2201      	movs	r2, #1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	659a      	str	r2, [r3, #88]	; 0x58
 8003e16:	e00b      	b.n	8003e30 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2201      	movs	r2, #1
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fe fddc 	bl	80029f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	220c      	movs	r2, #12
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	4013      	ands	r3, r2
 8003e46:	d012      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x136>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	0252      	lsls	r2, r2, #9
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 f889 	bl	8003f78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d014      	beq.n	8003ea2 <HAL_ADC_IRQHandler+0x16a>
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00f      	beq.n	8003ea2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	0292      	lsls	r2, r2, #10
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 fc70 	bl	8004778 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	0052      	lsls	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d014      	beq.n	8003ed6 <HAL_ADC_IRQHandler+0x19e>
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d00f      	beq.n	8003ed6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	02d2      	lsls	r2, r2, #11
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 fc5e 	bl	8004788 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	0092      	lsls	r2, r2, #2
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	4013      	ands	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <HAL_ADC_IRQHandler+0x1fe>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e008      	b.n	8003f06 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7ff fbf7 	bl	80036ec <LL_ADC_REG_GetDMATransfer>
 8003efe:	1e03      	subs	r3, r0, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d110      	bne.n	8003f2e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	00d2      	lsls	r2, r2, #3
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2202      	movs	r2, #2
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 f82d 	bl	8003f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	019b      	lsls	r3, r3, #6
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d00d      	beq.n	8003f5c <HAL_ADC_IRQHandler+0x224>
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	4013      	ands	r3, r2
 8003f48:	d008      	beq.n	8003f5c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 fc2b 	bl	80047a8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	0192      	lsls	r2, r2, #6
 8003f5a:	601a      	str	r2, [r3, #0]
  }
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b006      	add	sp, #24
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	fffffefe 	.word	0xfffffefe

08003f68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa2:	2317      	movs	r3, #23
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2254      	movs	r2, #84	; 0x54
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e1c0      	b.n	800433e <HAL_ADC_ConfigChannel+0x3a6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2254      	movs	r2, #84	; 0x54
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fc37 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d000      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x3c>
 8003fd2:	e1a3      	b.n	800431c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d100      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x46>
 8003fdc:	e143      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fee:	4ac1      	ldr	r2, [pc, #772]	; (80042f4 <HAL_ADC_ConfigChannel+0x35c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	0010      	movs	r0, r2
 8004000:	f7ff fb51 	bl	80036a6 <LL_ADC_REG_SetSequencerChAdd>
 8004004:	e0c9      	b.n	800419a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	211f      	movs	r1, #31
 8004010:	400b      	ands	r3, r1
 8004012:	210f      	movs	r1, #15
 8004014:	4099      	lsls	r1, r3
 8004016:	000b      	movs	r3, r1
 8004018:	43db      	mvns	r3, r3
 800401a:	4013      	ands	r3, r2
 800401c:	0019      	movs	r1, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	035b      	lsls	r3, r3, #13
 8004024:	0b5b      	lsrs	r3, r3, #13
 8004026:	d105      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x9c>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	221f      	movs	r2, #31
 8004030:	4013      	ands	r3, r2
 8004032:	e098      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	d000      	beq.n	8004040 <HAL_ADC_ConfigChannel+0xa8>
 800403e:	e091      	b.n	8004164 <HAL_ADC_ConfigChannel+0x1cc>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d000      	beq.n	800404c <HAL_ADC_ConfigChannel+0xb4>
 800404a:	e089      	b.n	8004160 <HAL_ADC_ConfigChannel+0x1c8>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2204      	movs	r2, #4
 8004052:	4013      	ands	r3, r2
 8004054:	d000      	beq.n	8004058 <HAL_ADC_ConfigChannel+0xc0>
 8004056:	e081      	b.n	800415c <HAL_ADC_ConfigChannel+0x1c4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	d000      	beq.n	8004064 <HAL_ADC_ConfigChannel+0xcc>
 8004062:	e079      	b.n	8004158 <HAL_ADC_ConfigChannel+0x1c0>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	4013      	ands	r3, r2
 800406c:	d000      	beq.n	8004070 <HAL_ADC_ConfigChannel+0xd8>
 800406e:	e071      	b.n	8004154 <HAL_ADC_ConfigChannel+0x1bc>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2220      	movs	r2, #32
 8004076:	4013      	ands	r3, r2
 8004078:	d000      	beq.n	800407c <HAL_ADC_ConfigChannel+0xe4>
 800407a:	e069      	b.n	8004150 <HAL_ADC_ConfigChannel+0x1b8>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	4013      	ands	r3, r2
 8004084:	d000      	beq.n	8004088 <HAL_ADC_ConfigChannel+0xf0>
 8004086:	e061      	b.n	800414c <HAL_ADC_ConfigChannel+0x1b4>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	4013      	ands	r3, r2
 8004090:	d000      	beq.n	8004094 <HAL_ADC_ConfigChannel+0xfc>
 8004092:	e059      	b.n	8004148 <HAL_ADC_ConfigChannel+0x1b0>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d151      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x1ac>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	d149      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1a8>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4013      	ands	r3, r2
 80040b6:	d141      	bne.n	800413c <HAL_ADC_ConfigChannel+0x1a4>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4013      	ands	r3, r2
 80040c2:	d139      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x1a0>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	015b      	lsls	r3, r3, #5
 80040cc:	4013      	ands	r3, r2
 80040ce:	d131      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x19c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	4013      	ands	r3, r2
 80040da:	d129      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x198>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	01db      	lsls	r3, r3, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	d121      	bne.n	800412c <HAL_ADC_ConfigChannel+0x194>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	4013      	ands	r3, r2
 80040f2:	d119      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x190>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	025b      	lsls	r3, r3, #9
 80040fc:	4013      	ands	r3, r2
 80040fe:	d111      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x18c>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	4013      	ands	r3, r2
 800410a:	d109      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x188>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	02db      	lsls	r3, r3, #11
 8004114:	4013      	ands	r3, r2
 8004116:	d001      	beq.n	800411c <HAL_ADC_ConfigChannel+0x184>
 8004118:	2312      	movs	r3, #18
 800411a:	e024      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 800411c:	2300      	movs	r3, #0
 800411e:	e022      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004120:	2311      	movs	r3, #17
 8004122:	e020      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004124:	2310      	movs	r3, #16
 8004126:	e01e      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004128:	230f      	movs	r3, #15
 800412a:	e01c      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 800412c:	230e      	movs	r3, #14
 800412e:	e01a      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004130:	230d      	movs	r3, #13
 8004132:	e018      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004134:	230c      	movs	r3, #12
 8004136:	e016      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004138:	230b      	movs	r3, #11
 800413a:	e014      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 800413c:	230a      	movs	r3, #10
 800413e:	e012      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004140:	2309      	movs	r3, #9
 8004142:	e010      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004144:	2308      	movs	r3, #8
 8004146:	e00e      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004148:	2307      	movs	r3, #7
 800414a:	e00c      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 800414c:	2306      	movs	r3, #6
 800414e:	e00a      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004150:	2305      	movs	r3, #5
 8004152:	e008      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004154:	2304      	movs	r3, #4
 8004156:	e006      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004158:	2303      	movs	r3, #3
 800415a:	e004      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 800415c:	2302      	movs	r3, #2
 800415e:	e002      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1ce>
 8004164:	2300      	movs	r3, #0
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	6852      	ldr	r2, [r2, #4]
 800416a:	201f      	movs	r0, #31
 800416c:	4002      	ands	r2, r0
 800416e:	4093      	lsls	r3, r2
 8004170:	000a      	movs	r2, r1
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	429a      	cmp	r2, r3
 8004186:	d808      	bhi.n	800419a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	001a      	movs	r2, r3
 8004196:	f7ff fa66 	bl	8003666 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	001a      	movs	r2, r3
 80041a8:	f7ff faac 	bl	8003704 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db00      	blt.n	80041b6 <HAL_ADC_ConfigChannel+0x21e>
 80041b4:	e0bc      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fa19 	bl	80035f0 <LL_ADC_GetCommonPathInternalCh>
 80041be:	0003      	movs	r3, r0
 80041c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_ADC_ConfigChannel+0x364>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d122      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041d4:	d11d      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	0412      	lsls	r2, r2, #16
 80041dc:	4313      	orrs	r3, r2
 80041de:	4a46      	ldr	r2, [pc, #280]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 80041e0:	0019      	movs	r1, r3
 80041e2:	0010      	movs	r0, r2
 80041e4:	f7ff f9f0 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e8:	4b45      	ldr	r3, [pc, #276]	; (8004300 <HAL_ADC_ConfigChannel+0x368>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4945      	ldr	r1, [pc, #276]	; (8004304 <HAL_ADC_ConfigChannel+0x36c>)
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7fb ffa4 	bl	800013c <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	0013      	movs	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004202:	e002      	b.n	800420a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b01      	subs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f9      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004210:	e08e      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <HAL_ADC_ConfigChannel+0x370>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10e      	bne.n	800423a <HAL_ADC_ConfigChannel+0x2a2>
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	045b      	lsls	r3, r3, #17
 8004222:	4013      	ands	r3, r2
 8004224:	d109      	bne.n	800423a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	0452      	lsls	r2, r2, #17
 800422c:	4313      	orrs	r3, r2
 800422e:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 8004230:	0019      	movs	r1, r3
 8004232:	0010      	movs	r0, r2
 8004234:	f7ff f9c8 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
 8004238:	e07a      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a33      	ldr	r2, [pc, #204]	; (800430c <HAL_ADC_ConfigChannel+0x374>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d000      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x2ae>
 8004244:	e074      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	03db      	lsls	r3, r3, #15
 800424c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800424e:	d000      	beq.n	8004252 <HAL_ADC_ConfigChannel+0x2ba>
 8004250:	e06e      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	03d2      	lsls	r2, r2, #15
 8004258:	4313      	orrs	r3, r2
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 800425c:	0019      	movs	r1, r3
 800425e:	0010      	movs	r0, r2
 8004260:	f7ff f9b2 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
 8004264:	e064      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	429a      	cmp	r2, r3
 8004270:	d004      	beq.n	800427c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004276:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <HAL_ADC_ConfigChannel+0x35c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d107      	bne.n	800428c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0019      	movs	r1, r3
 8004286:	0010      	movs	r0, r2
 8004288:	f7ff fa1e 	bl	80036c8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da4d      	bge.n	8004330 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004294:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7ff f9aa 	bl	80035f0 <LL_ADC_GetCommonPathInternalCh>
 800429c:	0003      	movs	r3, r0
 800429e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <HAL_ADC_ConfigChannel+0x364>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_ADC_ConfigChannel+0x378>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 80042b2:	0019      	movs	r1, r3
 80042b4:	0010      	movs	r0, r2
 80042b6:	f7ff f987 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
 80042ba:	e039      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <HAL_ADC_ConfigChannel+0x370>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_ADC_ConfigChannel+0x37c>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 80042ce:	0019      	movs	r1, r3
 80042d0:	0010      	movs	r0, r2
 80042d2:	f7ff f979 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
 80042d6:	e02b      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	; (800430c <HAL_ADC_ConfigChannel+0x374>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d126      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <HAL_ADC_ConfigChannel+0x380>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <HAL_ADC_ConfigChannel+0x360>)
 80042ea:	0019      	movs	r1, r3
 80042ec:	0010      	movs	r0, r2
 80042ee:	f7ff f96b 	bl	80035c8 <LL_ADC_SetCommonPathInternalCh>
 80042f2:	e01d      	b.n	8004330 <HAL_ADC_ConfigChannel+0x398>
 80042f4:	80000004 	.word	0x80000004
 80042f8:	40012708 	.word	0x40012708
 80042fc:	b0001000 	.word	0xb0001000
 8004300:	20000000 	.word	0x20000000
 8004304:	00030d40 	.word	0x00030d40
 8004308:	b8004000 	.word	0xb8004000
 800430c:	b4002000 	.word	0xb4002000
 8004310:	ff7fffff 	.word	0xff7fffff
 8004314:	feffffff 	.word	0xfeffffff
 8004318:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	2220      	movs	r2, #32
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004328:	2317      	movs	r3, #23
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2254      	movs	r2, #84	; 0x54
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004338:	2317      	movs	r3, #23
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	781b      	ldrb	r3, [r3, #0]
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b006      	add	sp, #24
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)

08004348 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff fa3b 	bl	80037d4 <LL_ADC_IsEnabled>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d000      	beq.n	8004364 <ADC_Enable+0x1c>
 8004362:	e069      	b.n	8004438 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4a36      	ldr	r2, [pc, #216]	; (8004444 <ADC_Enable+0xfc>)
 800436c:	4013      	ands	r3, r2
 800436e:	d00d      	beq.n	800438c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	2210      	movs	r2, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	2201      	movs	r2, #1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e056      	b.n	800443a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0018      	movs	r0, r3
 8004392:	f7ff f9fb 	bl	800378c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <ADC_Enable+0x100>)
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff f929 	bl	80035f0 <LL_ADC_GetCommonPathInternalCh>
 800439e:	0002      	movs	r2, r0
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	4013      	ands	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <ADC_Enable+0x104>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4928      	ldr	r1, [pc, #160]	; (8004450 <ADC_Enable+0x108>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7fb fec4 	bl	800013c <__udivsi3>
 80043b4:	0003      	movs	r3, r0
 80043b6:	3301      	adds	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043ba:	e002      	b.n	80043c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f9      	bne.n	80043bc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7e5b      	ldrb	r3, [r3, #25]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d033      	beq.n	8004438 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80043d0:	f7ff f8b6 	bl	8003540 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d8:	e027      	b.n	800442a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff f9f8 	bl	80037d4 <LL_ADC_IsEnabled>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d104      	bne.n	80043f2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7ff f9cd 	bl	800378c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043f2:	f7ff f8a5 	bl	8003540 <HAL_GetTick>
 80043f6:	0002      	movs	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d914      	bls.n	800442a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	2b01      	cmp	r3, #1
 800440c:	d00d      	beq.n	800442a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	2210      	movs	r2, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2201      	movs	r2, #1
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e007      	b.n	800443a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2201      	movs	r2, #1
 8004432:	4013      	ands	r3, r2
 8004434:	2b01      	cmp	r3, #1
 8004436:	d1d0      	bne.n	80043da <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	80000017 	.word	0x80000017
 8004448:	40012708 	.word	0x40012708
 800444c:	20000000 	.word	0x20000000
 8004450:	00030d40 	.word	0x00030d40

08004454 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0018      	movs	r0, r3
 8004462:	f7ff f9c8 	bl	80037f6 <LL_ADC_IsDisableOngoing>
 8004466:	0003      	movs	r3, r0
 8004468:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	0018      	movs	r0, r3
 8004470:	f7ff f9b0 	bl	80037d4 <LL_ADC_IsEnabled>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d046      	beq.n	8004506 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d143      	bne.n	8004506 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2205      	movs	r2, #5
 8004486:	4013      	ands	r3, r2
 8004488:	2b01      	cmp	r3, #1
 800448a:	d10d      	bne.n	80044a8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff f98d 	bl	80037b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2203      	movs	r2, #3
 800449c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800449e:	f7ff f84f 	bl	8003540 <HAL_GetTick>
 80044a2:	0003      	movs	r3, r0
 80044a4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044a6:	e028      	b.n	80044fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	2210      	movs	r2, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	2201      	movs	r2, #1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e021      	b.n	8004508 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044c4:	f7ff f83c 	bl	8003540 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d913      	bls.n	80044fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	d00d      	beq.n	80044fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	2210      	movs	r2, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	2201      	movs	r2, #1
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e006      	b.n	8004508 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2201      	movs	r2, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d1de      	bne.n	80044c4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}

08004510 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	2250      	movs	r2, #80	; 0x50
 8004524:	4013      	ands	r3, r2
 8004526:	d141      	bne.n	80045ac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	0092      	lsls	r2, r2, #2
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0018      	movs	r0, r3
 800453c:	f7ff f882 	bl	8003644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004540:	1e03      	subs	r3, r0, #0
 8004542:	d02e      	beq.n	80045a2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	7e9b      	ldrb	r3, [r3, #26]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d12a      	bne.n	80045a2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2208      	movs	r2, #8
 8004554:	4013      	ands	r3, r2
 8004556:	2b08      	cmp	r3, #8
 8004558:	d123      	bne.n	80045a2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0018      	movs	r0, r3
 8004560:	f7ff f96c 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d110      	bne.n	800458a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	210c      	movs	r1, #12
 8004574:	438a      	bics	r2, r1
 8004576:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <ADC_DMAConvCplt+0xc4>)
 800457e:	4013      	ands	r3, r2
 8004580:	2201      	movs	r2, #1
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	659a      	str	r2, [r3, #88]	; 0x58
 8004588:	e00b      	b.n	80045a2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	2220      	movs	r2, #32
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7fe fa23 	bl	80029f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045aa:	e00f      	b.n	80045cc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	2210      	movs	r2, #16
 80045b2:	4013      	ands	r3, r2
 80045b4:	d004      	beq.n	80045c0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff fce5 	bl	8003f88 <HAL_ADC_ErrorCallback>
}
 80045be:	e005      	b.n	80045cc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	0010      	movs	r0, r2
 80045ca:	4798      	blx	r3
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fffffefe 	.word	0xfffffefe

080045d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fcbd 	bl	8003f68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	2204      	movs	r2, #4
 8004616:	431a      	orrs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff fcb2 	bl	8003f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b004      	add	sp, #16
 800462a:	bd80      	pop	{r7, pc}

0800462c <LL_ADC_IsEnabled>:
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <LL_ADC_IsEnabled+0x18>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <LL_ADC_IsEnabled+0x1a>
 8004644:	2300      	movs	r3, #0
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b002      	add	sp, #8
 800464c:	bd80      	pop	{r7, pc}

0800464e <LL_ADC_IsCalibrationOnGoing>:
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0fdb      	lsrs	r3, r3, #31
 800465c:	07da      	lsls	r2, r3, #31
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	429a      	cmp	r2, r3
 8004664:	d101      	bne.n	800466a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <LL_ADC_IsCalibrationOnGoing+0x1e>
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b002      	add	sp, #8
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2254      	movs	r2, #84	; 0x54
 8004684:	5c9b      	ldrb	r3, [r3, r2]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADCEx_Calibration_Start+0x1a>
 800468a:	2302      	movs	r3, #2
 800468c:	e06c      	b.n	8004768 <HAL_ADCEx_Calibration_Start+0xf4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2254      	movs	r2, #84	; 0x54
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004696:	2317      	movs	r3, #23
 8004698:	18fc      	adds	r4, r7, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff fed9 	bl	8004454 <ADC_Disable>
 80046a2:	0003      	movs	r3, r0
 80046a4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	0018      	movs	r0, r3
 80046ac:	f7ff ffbe 	bl	800462c <LL_ADC_IsEnabled>
 80046b0:	1e03      	subs	r3, r0, #0
 80046b2:	d14c      	bne.n	800474e <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_ADCEx_Calibration_Start+0xfc>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	2202      	movs	r2, #2
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2203      	movs	r2, #3
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2103      	movs	r1, #3
 80046dc:	438a      	bics	r2, r1
 80046de:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	0609      	lsls	r1, r1, #24
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046f2:	e014      	b.n	800471e <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <HAL_ADCEx_Calibration_Start+0x100>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d90d      	bls.n	800471e <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	2212      	movs	r2, #18
 8004708:	4393      	bics	r3, r2
 800470a:	2210      	movs	r2, #16
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2254      	movs	r2, #84	; 0x54
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e024      	b.n	8004768 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff ff93 	bl	800464e <LL_ADC_IsCalibrationOnGoing>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d1e3      	bne.n	80046f4 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68d9      	ldr	r1, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	2203      	movs	r2, #3
 8004742:	4393      	bics	r3, r2
 8004744:	2201      	movs	r2, #1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	; 0x58
 800474c:	e005      	b.n	800475a <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	2210      	movs	r2, #16
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2254      	movs	r2, #84	; 0x54
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004762:	2317      	movs	r3, #23
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	781b      	ldrb	r3, [r3, #0]
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b007      	add	sp, #28
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	fffffefd 	.word	0xfffffefd
 8004774:	0002f1ff 	.word	0x0002f1ff

08004778 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b002      	add	sp, #8
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	0002      	movs	r2, r0
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b7f      	cmp	r3, #127	; 0x7f
 80047ca:	d809      	bhi.n	80047e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047cc:	1dfb      	adds	r3, r7, #7
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	001a      	movs	r2, r3
 80047d2:	231f      	movs	r3, #31
 80047d4:	401a      	ands	r2, r3
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <__NVIC_EnableIRQ+0x30>)
 80047d8:	2101      	movs	r1, #1
 80047da:	4091      	lsls	r1, r2
 80047dc:	000a      	movs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	0002      	movs	r2, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	1dfb      	adds	r3, r7, #7
 80047f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004800:	d828      	bhi.n	8004854 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004802:	4a2f      	ldr	r2, [pc, #188]	; (80048c0 <__NVIC_SetPriority+0xd4>)
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b25b      	sxtb	r3, r3
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	33c0      	adds	r3, #192	; 0xc0
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	589b      	ldr	r3, [r3, r2]
 8004812:	1dfa      	adds	r2, r7, #7
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	0011      	movs	r1, r2
 8004818:	2203      	movs	r2, #3
 800481a:	400a      	ands	r2, r1
 800481c:	00d2      	lsls	r2, r2, #3
 800481e:	21ff      	movs	r1, #255	; 0xff
 8004820:	4091      	lsls	r1, r2
 8004822:	000a      	movs	r2, r1
 8004824:	43d2      	mvns	r2, r2
 8004826:	401a      	ands	r2, r3
 8004828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	401a      	ands	r2, r3
 8004832:	1dfb      	adds	r3, r7, #7
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	0018      	movs	r0, r3
 8004838:	2303      	movs	r3, #3
 800483a:	4003      	ands	r3, r0
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004840:	481f      	ldr	r0, [pc, #124]	; (80048c0 <__NVIC_SetPriority+0xd4>)
 8004842:	1dfb      	adds	r3, r7, #7
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b25b      	sxtb	r3, r3
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	430a      	orrs	r2, r1
 800484c:	33c0      	adds	r3, #192	; 0xc0
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004852:	e031      	b.n	80048b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <__NVIC_SetPriority+0xd8>)
 8004856:	1dfb      	adds	r3, r7, #7
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	0019      	movs	r1, r3
 800485c:	230f      	movs	r3, #15
 800485e:	400b      	ands	r3, r1
 8004860:	3b08      	subs	r3, #8
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3306      	adds	r3, #6
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	18d3      	adds	r3, r2, r3
 800486a:	3304      	adds	r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1dfa      	adds	r2, r7, #7
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	0011      	movs	r1, r2
 8004874:	2203      	movs	r2, #3
 8004876:	400a      	ands	r2, r1
 8004878:	00d2      	lsls	r2, r2, #3
 800487a:	21ff      	movs	r1, #255	; 0xff
 800487c:	4091      	lsls	r1, r2
 800487e:	000a      	movs	r2, r1
 8004880:	43d2      	mvns	r2, r2
 8004882:	401a      	ands	r2, r3
 8004884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	401a      	ands	r2, r3
 800488e:	1dfb      	adds	r3, r7, #7
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	0018      	movs	r0, r3
 8004894:	2303      	movs	r3, #3
 8004896:	4003      	ands	r3, r0
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800489c:	4809      	ldr	r0, [pc, #36]	; (80048c4 <__NVIC_SetPriority+0xd8>)
 800489e:	1dfb      	adds	r3, r7, #7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	001c      	movs	r4, r3
 80048a4:	230f      	movs	r3, #15
 80048a6:	4023      	ands	r3, r4
 80048a8:	3b08      	subs	r3, #8
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	430a      	orrs	r2, r1
 80048ae:	3306      	adds	r3, #6
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	18c3      	adds	r3, r0, r3
 80048b4:	3304      	adds	r3, #4
 80048b6:	601a      	str	r2, [r3, #0]
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b003      	add	sp, #12
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	e000e100 	.word	0xe000e100
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	045b      	lsls	r3, r3, #17
 80048d8:	429a      	cmp	r2, r3
 80048da:	d301      	bcc.n	80048e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048dc:	2301      	movs	r3, #1
 80048de:	e010      	b.n	8004902 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <SysTick_Config+0x44>)
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	3a01      	subs	r2, #1
 80048e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e8:	2301      	movs	r3, #1
 80048ea:	425b      	negs	r3, r3
 80048ec:	2103      	movs	r1, #3
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7ff ff7c 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <SysTick_Config+0x44>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <SysTick_Config+0x44>)
 80048fc:	2207      	movs	r2, #7
 80048fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	e000e010 	.word	0xe000e010

08004910 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	210f      	movs	r1, #15
 800491c:	187b      	adds	r3, r7, r1
 800491e:	1c02      	adds	r2, r0, #0
 8004920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	187b      	adds	r3, r7, r1
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b25b      	sxtb	r3, r3
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff ff5d 	bl	80047ec <__NVIC_SetPriority>
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	0002      	movs	r2, r0
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b25b      	sxtb	r3, r3
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff ff33 	bl	80047b8 <__NVIC_EnableIRQ>
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f7ff ffaf 	bl	80048c8 <SysTick_Config>
 800496a:	0003      	movs	r3, r0
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e091      	b.n	8004aaa <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	001a      	movs	r2, r3
 800498c:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <HAL_DMA_Init+0x140>)
 800498e:	429a      	cmp	r2, r3
 8004990:	d810      	bhi.n	80049b4 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a48      	ldr	r2, [pc, #288]	; (8004ab8 <HAL_DMA_Init+0x144>)
 8004998:	4694      	mov	ip, r2
 800499a:	4463      	add	r3, ip
 800499c:	2114      	movs	r1, #20
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fb fbcc 	bl	800013c <__udivsi3>
 80049a4:	0003      	movs	r3, r0
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a43      	ldr	r2, [pc, #268]	; (8004abc <HAL_DMA_Init+0x148>)
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
 80049b2:	e00f      	b.n	80049d4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a41      	ldr	r2, [pc, #260]	; (8004ac0 <HAL_DMA_Init+0x14c>)
 80049ba:	4694      	mov	ip, r2
 80049bc:	4463      	add	r3, ip
 80049be:	2114      	movs	r1, #20
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fb fbbb 	bl	800013c <__udivsi3>
 80049c6:	0003      	movs	r3, r0
 80049c8:	009a      	lsls	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <HAL_DMA_Init+0x150>)
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2225      	movs	r2, #37	; 0x25
 80049d8:	2102      	movs	r1, #2
 80049da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4938      	ldr	r1, [pc, #224]	; (8004ac8 <HAL_DMA_Init+0x154>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fa9f 	bl	8004f68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d102      	bne.n	8004a3c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a44:	217f      	movs	r1, #127	; 0x7f
 8004a46:	400a      	ands	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <HAL_DMA_Init+0x10c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d80d      	bhi.n	8004a80 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 fac8 	bl	8004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e008      	b.n	8004a92 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2225      	movs	r2, #37	; 0x25
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40020407 	.word	0x40020407
 8004ab8:	bffdfff8 	.word	0xbffdfff8
 8004abc:	40020000 	.word	0x40020000
 8004ac0:	bffdfbf8 	.word	0xbffdfbf8
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	ffff800f 	.word	0xffff800f

08004acc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2317      	movs	r3, #23
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2224      	movs	r2, #36	; 0x24
 8004ae6:	5c9b      	ldrb	r3, [r3, r2]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_DMA_Start_IT+0x24>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e06f      	b.n	8004bd0 <HAL_DMA_Start_IT+0x104>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	2101      	movs	r1, #1
 8004af6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2225      	movs	r2, #37	; 0x25
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d157      	bne.n	8004bb4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2225      	movs	r2, #37	; 0x25
 8004b08:	2102      	movs	r1, #2
 8004b0a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	438a      	bics	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f9e1 	bl	8004ef0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	210e      	movs	r1, #14
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e00f      	b.n	8004b68 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2104      	movs	r1, #4
 8004b54:	438a      	bics	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	210a      	movs	r1, #10
 8004b64:	430a      	orrs	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	025b      	lsls	r3, r3, #9
 8004b72:	4013      	ands	r3, r2
 8004b74:	d008      	beq.n	8004b88 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	0049      	lsls	r1, r1, #1
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	0049      	lsls	r1, r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e00a      	b.n	8004bca <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004bc2:	2317      	movs	r3, #23
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004bca:	2317      	movs	r3, #23
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	781b      	ldrb	r3, [r3, #0]
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b006      	add	sp, #24
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e04f      	b.n	8004c8a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2225      	movs	r2, #37	; 0x25
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d008      	beq.n	8004c08 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e040      	b.n	8004c8a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	210e      	movs	r1, #14
 8004c14:	438a      	bics	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	491c      	ldr	r1, [pc, #112]	; (8004c94 <HAL_DMA_Abort+0xbc>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	438a      	bics	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	221c      	movs	r2, #28
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2101      	movs	r1, #1
 8004c46:	4091      	lsls	r1, r2
 8004c48:	000a      	movs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	490a      	ldr	r1, [pc, #40]	; (8004c94 <HAL_DMA_Abort+0xbc>)
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2225      	movs	r2, #37	; 0x25
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	; 0x24
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	fffffeff 	.word	0xfffffeff

08004c98 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	210f      	movs	r1, #15
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2225      	movs	r2, #37	; 0x25
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d006      	beq.n	8004cc2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e048      	b.n	8004d54 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	210e      	movs	r1, #14
 8004cce:	438a      	bics	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	438a      	bics	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	491d      	ldr	r1, [pc, #116]	; (8004d64 <HAL_DMA_Abort_IT+0xcc>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	221c      	movs	r2, #28
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4091      	lsls	r1, r2
 8004d02:	000a      	movs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d0e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4910      	ldr	r1, [pc, #64]	; (8004d64 <HAL_DMA_Abort_IT+0xcc>)
 8004d24:	400a      	ands	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d30:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2225      	movs	r2, #37	; 0x25
 8004d36:	2101      	movs	r1, #1
 8004d38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2224      	movs	r2, #36	; 0x24
 8004d3e:	2100      	movs	r1, #0
 8004d40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	0010      	movs	r0, r2
 8004d52:	4798      	blx	r3
    }
  }
  return status;
 8004d54:	230f      	movs	r3, #15
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b004      	add	sp, #16
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	fffffeff 	.word	0xfffffeff

08004d68 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	221c      	movs	r2, #28
 8004d86:	4013      	ands	r3, r2
 8004d88:	2204      	movs	r2, #4
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	0013      	movs	r3, r2
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4013      	ands	r3, r2
 8004d92:	d026      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x7a>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2204      	movs	r2, #4
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2220      	movs	r2, #32
 8004da4:	4013      	ands	r3, r2
 8004da6:	d107      	bne.n	8004db8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2104      	movs	r1, #4
 8004db4:	438a      	bics	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	221c      	movs	r2, #28
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	4091      	lsls	r1, r2
 8004dc8:	000a      	movs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d100      	bne.n	8004dd6 <HAL_DMA_IRQHandler+0x6e>
 8004dd4:	e080      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	0010      	movs	r0, r2
 8004dde:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004de0:	e07a      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	221c      	movs	r2, #28
 8004de8:	4013      	ands	r3, r2
 8004dea:	2202      	movs	r2, #2
 8004dec:	409a      	lsls	r2, r3
 8004dee:	0013      	movs	r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4013      	ands	r3, r2
 8004df4:	d03c      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x108>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d038      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2220      	movs	r2, #32
 8004e06:	4013      	ands	r3, r2
 8004e08:	d10b      	bne.n	8004e22 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	210a      	movs	r1, #10
 8004e16:	438a      	bics	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2225      	movs	r2, #37	; 0x25
 8004e1e:	2101      	movs	r1, #1
 8004e20:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	001a      	movs	r2, r3
 8004e28:	4b2e      	ldr	r3, [pc, #184]	; (8004ee4 <HAL_DMA_IRQHandler+0x17c>)
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d909      	bls.n	8004e42 <HAL_DMA_IRQHandler+0xda>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	221c      	movs	r2, #28
 8004e34:	401a      	ands	r2, r3
 8004e36:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_DMA_IRQHandler+0x180>)
 8004e38:	2102      	movs	r1, #2
 8004e3a:	4091      	lsls	r1, r2
 8004e3c:	000a      	movs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e008      	b.n	8004e54 <HAL_DMA_IRQHandler+0xec>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	221c      	movs	r2, #28
 8004e48:	401a      	ands	r2, r3
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <HAL_DMA_IRQHandler+0x184>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	4091      	lsls	r1, r2
 8004e50:	000a      	movs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	2100      	movs	r1, #0
 8004e5a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d039      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	0010      	movs	r0, r2
 8004e6c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004e6e:	e033      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	221c      	movs	r2, #28
 8004e76:	4013      	ands	r3, r2
 8004e78:	2208      	movs	r2, #8
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4013      	ands	r3, r2
 8004e82:	d02a      	beq.n	8004eda <HAL_DMA_IRQHandler+0x172>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2208      	movs	r2, #8
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d026      	beq.n	8004eda <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	210e      	movs	r1, #14
 8004e98:	438a      	bics	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	221c      	movs	r2, #28
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4091      	lsls	r1, r2
 8004eac:	000a      	movs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2225      	movs	r2, #37	; 0x25
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2224      	movs	r2, #36	; 0x24
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46c0      	nop			; (mov r8, r8)
}
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40020080 	.word	0x40020080
 8004ee8:	40020400 	.word	0x40020400
 8004eec:	40020000 	.word	0x40020000

08004ef0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	221c      	movs	r2, #28
 8004f20:	401a      	ands	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2101      	movs	r1, #1
 8004f28:	4091      	lsls	r1, r2
 8004f2a:	000a      	movs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d108      	bne.n	8004f50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f4e:	e007      	b.n	8004f60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	001a      	movs	r2, r3
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d814      	bhi.n	8004fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004f86:	189a      	adds	r2, r3, r2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	23ff      	movs	r3, #255	; 0xff
 8004f94:	4013      	ands	r3, r2
 8004f96:	3b08      	subs	r3, #8
 8004f98:	2114      	movs	r1, #20
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fb f8ce 	bl	800013c <__udivsi3>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e014      	b.n	8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004fb0:	189a      	adds	r2, r3, r2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	001a      	movs	r2, r3
 8004fbc:	23ff      	movs	r3, #255	; 0xff
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	3b08      	subs	r3, #8
 8004fc2:	2114      	movs	r1, #20
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7fb f8b9 	bl	800013c <__udivsi3>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	3307      	adds	r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004fd4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	221f      	movs	r2, #31
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b004      	add	sp, #16
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40020407 	.word	0x40020407
 8004ff0:	40020800 	.word	0x40020800
 8004ff4:	4002081c 	.word	0x4002081c
 8004ff8:	40020880 	.word	0x40020880

08004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	227f      	movs	r2, #127	; 0x7f
 800500a:	4013      	ands	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005012:	4694      	mov	ip, r2
 8005014:	4463      	add	r3, ip
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	001a      	movs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a07      	ldr	r2, [pc, #28]	; (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005022:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3b01      	subs	r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	4013      	ands	r3, r2
 800502c:	2201      	movs	r2, #1
 800502e:	409a      	lsls	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b004      	add	sp, #16
 800503a:	bd80      	pop	{r7, pc}
 800503c:	1000823f 	.word	0x1000823f
 8005040:	40020940 	.word	0x40020940

08005044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005052:	e14d      	b.n	80052f0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4091      	lsls	r1, r2
 800505e:	000a      	movs	r2, r1
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d100      	bne.n	800506c <HAL_GPIO_Init+0x28>
 800506a:	e13e      	b.n	80052ea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2203      	movs	r2, #3
 8005072:	4013      	ands	r3, r2
 8005074:	2b01      	cmp	r3, #1
 8005076:	d005      	beq.n	8005084 <HAL_GPIO_Init+0x40>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	4013      	ands	r3, r2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d130      	bne.n	80050e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	409a      	lsls	r2, r3
 8005092:	0013      	movs	r3, r2
 8005094:	43da      	mvns	r2, r3
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	409a      	lsls	r2, r3
 80050a6:	0013      	movs	r3, r2
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ba:	2201      	movs	r2, #1
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	409a      	lsls	r2, r3
 80050c0:	0013      	movs	r3, r2
 80050c2:	43da      	mvns	r2, r3
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4013      	ands	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	2201      	movs	r2, #1
 80050d2:	401a      	ands	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	409a      	lsls	r2, r3
 80050d8:	0013      	movs	r3, r2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2203      	movs	r2, #3
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d017      	beq.n	8005122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	2203      	movs	r2, #3
 80050fe:	409a      	lsls	r2, r3
 8005100:	0013      	movs	r3, r2
 8005102:	43da      	mvns	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4013      	ands	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	409a      	lsls	r2, r3
 8005114:	0013      	movs	r3, r2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2203      	movs	r2, #3
 8005128:	4013      	ands	r3, r2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d123      	bne.n	8005176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	08da      	lsrs	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3208      	adds	r2, #8
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	58d3      	ldr	r3, [r2, r3]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2207      	movs	r2, #7
 8005140:	4013      	ands	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	220f      	movs	r2, #15
 8005146:	409a      	lsls	r2, r3
 8005148:	0013      	movs	r3, r2
 800514a:	43da      	mvns	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2107      	movs	r1, #7
 800515a:	400b      	ands	r3, r1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	409a      	lsls	r2, r3
 8005160:	0013      	movs	r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	6939      	ldr	r1, [r7, #16]
 8005174:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	409a      	lsls	r2, r3
 8005184:	0013      	movs	r3, r2
 8005186:	43da      	mvns	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	401a      	ands	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	0013      	movs	r3, r2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	23c0      	movs	r3, #192	; 0xc0
 80051b0:	029b      	lsls	r3, r3, #10
 80051b2:	4013      	ands	r3, r2
 80051b4:	d100      	bne.n	80051b8 <HAL_GPIO_Init+0x174>
 80051b6:	e098      	b.n	80052ea <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80051b8:	4a53      	ldr	r2, [pc, #332]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	3318      	adds	r3, #24
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	589b      	ldr	r3, [r3, r2]
 80051c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2203      	movs	r2, #3
 80051ca:	4013      	ands	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	220f      	movs	r2, #15
 80051d0:	409a      	lsls	r2, r3
 80051d2:	0013      	movs	r3, r2
 80051d4:	43da      	mvns	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	23a0      	movs	r3, #160	; 0xa0
 80051e0:	05db      	lsls	r3, r3, #23
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d019      	beq.n	800521a <HAL_GPIO_Init+0x1d6>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a48      	ldr	r2, [pc, #288]	; (800530c <HAL_GPIO_Init+0x2c8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_GPIO_Init+0x1d2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a47      	ldr	r2, [pc, #284]	; (8005310 <HAL_GPIO_Init+0x2cc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00d      	beq.n	8005212 <HAL_GPIO_Init+0x1ce>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a46      	ldr	r2, [pc, #280]	; (8005314 <HAL_GPIO_Init+0x2d0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <HAL_GPIO_Init+0x1ca>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a45      	ldr	r2, [pc, #276]	; (8005318 <HAL_GPIO_Init+0x2d4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_GPIO_Init+0x1c6>
 8005206:	2304      	movs	r3, #4
 8005208:	e008      	b.n	800521c <HAL_GPIO_Init+0x1d8>
 800520a:	2305      	movs	r3, #5
 800520c:	e006      	b.n	800521c <HAL_GPIO_Init+0x1d8>
 800520e:	2303      	movs	r3, #3
 8005210:	e004      	b.n	800521c <HAL_GPIO_Init+0x1d8>
 8005212:	2302      	movs	r3, #2
 8005214:	e002      	b.n	800521c <HAL_GPIO_Init+0x1d8>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_GPIO_Init+0x1d8>
 800521a:	2300      	movs	r3, #0
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	2103      	movs	r1, #3
 8005220:	400a      	ands	r2, r1
 8005222:	00d2      	lsls	r2, r2, #3
 8005224:	4093      	lsls	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800522c:	4936      	ldr	r1, [pc, #216]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	3318      	adds	r3, #24
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800523a:	4a33      	ldr	r2, [pc, #204]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	58d3      	ldr	r3, [r2, r3]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	43da      	mvns	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	4013      	ands	r3, r2
 8005256:	d003      	beq.n	8005260 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005260:	4929      	ldr	r1, [pc, #164]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 800526a:	2384      	movs	r3, #132	; 0x84
 800526c:	58d3      	ldr	r3, [r2, r3]
 800526e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	43da      	mvns	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	4013      	ands	r3, r2
 8005284:	d003      	beq.n	800528e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800528e:	491e      	ldr	r1, [pc, #120]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 8005290:	2284      	movs	r2, #132	; 0x84
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005296:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	43da      	mvns	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	035b      	lsls	r3, r3, #13
 80052ae:	4013      	ands	r3, r2
 80052b0:	d003      	beq.n	80052ba <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	039b      	lsls	r3, r3, #14
 80052d8:	4013      	ands	r3, r2
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_GPIO_Init+0x2c4>)
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3301      	adds	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	40da      	lsrs	r2, r3
 80052f8:	1e13      	subs	r3, r2, #0
 80052fa:	d000      	beq.n	80052fe <HAL_GPIO_Init+0x2ba>
 80052fc:	e6aa      	b.n	8005054 <HAL_GPIO_Init+0x10>
  }
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b006      	add	sp, #24
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021800 	.word	0x40021800
 800530c:	50000400 	.word	0x50000400
 8005310:	50000800 	.word	0x50000800
 8005314:	50000c00 	.word	0x50000c00
 8005318:	50001000 	.word	0x50001000

0800531c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800532a:	4013      	ands	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	430a      	orrs	r2, r1
 8005334:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	429a      	cmp	r2, r3
 800533e:	d11f      	bne.n	8005380 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005340:	4b14      	ldr	r3, [pc, #80]	; (8005394 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	0013      	movs	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	189b      	adds	r3, r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4912      	ldr	r1, [pc, #72]	; (8005398 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800534e:	0018      	movs	r0, r3
 8005350:	f7fa fef4 	bl	800013c <__udivsi3>
 8005354:	0003      	movs	r3, r0
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535a:	e008      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3b01      	subs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e001      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e009      	b.n	8005382 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	401a      	ands	r2, r3
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	429a      	cmp	r2, r3
 800537e:	d0ed      	beq.n	800535c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b004      	add	sp, #16
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	40007000 	.word	0x40007000
 8005390:	fffff9ff 	.word	0xfffff9ff
 8005394:	20000000 	.word	0x20000000
 8005398:	000f4240 	.word	0x000f4240

0800539c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80053a0:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	23e0      	movs	r3, #224	; 0xe0
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	4013      	ands	r3, r2
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f000 fb56 	bl	8005a74 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2201      	movs	r2, #1
 80053ce:	4013      	ands	r3, r2
 80053d0:	d100      	bne.n	80053d4 <HAL_RCC_OscConfig+0x20>
 80053d2:	e07d      	b.n	80054d0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4bc3      	ldr	r3, [pc, #780]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2238      	movs	r2, #56	; 0x38
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053de:	4bc1      	ldr	r3, [pc, #772]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2203      	movs	r2, #3
 80053e4:	4013      	ands	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d102      	bne.n	80053f4 <HAL_RCC_OscConfig+0x40>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d002      	beq.n	80053fa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fa:	4bba      	ldr	r3, [pc, #744]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	4013      	ands	r3, r2
 8005404:	d063      	beq.n	80054ce <HAL_RCC_OscConfig+0x11a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d15f      	bne.n	80054ce <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f000 fb30 	bl	8005a74 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	025b      	lsls	r3, r3, #9
 800541c:	429a      	cmp	r2, r3
 800541e:	d107      	bne.n	8005430 <HAL_RCC_OscConfig+0x7c>
 8005420:	4bb0      	ldr	r3, [pc, #704]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4baf      	ldr	r3, [pc, #700]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	0249      	lsls	r1, r1, #9
 800542a:	430a      	orrs	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e020      	b.n	8005472 <HAL_RCC_OscConfig+0xbe>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	23a0      	movs	r3, #160	; 0xa0
 8005436:	02db      	lsls	r3, r3, #11
 8005438:	429a      	cmp	r2, r3
 800543a:	d10e      	bne.n	800545a <HAL_RCC_OscConfig+0xa6>
 800543c:	4ba9      	ldr	r3, [pc, #676]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4ba8      	ldr	r3, [pc, #672]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005442:	2180      	movs	r1, #128	; 0x80
 8005444:	02c9      	lsls	r1, r1, #11
 8005446:	430a      	orrs	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	4ba6      	ldr	r3, [pc, #664]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4ba5      	ldr	r3, [pc, #660]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	0249      	lsls	r1, r1, #9
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0xbe>
 800545a:	4ba2      	ldr	r3, [pc, #648]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4ba1      	ldr	r3, [pc, #644]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005460:	49a1      	ldr	r1, [pc, #644]	; (80056e8 <HAL_RCC_OscConfig+0x334>)
 8005462:	400a      	ands	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	4b9f      	ldr	r3, [pc, #636]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b9e      	ldr	r3, [pc, #632]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800546c:	499f      	ldr	r1, [pc, #636]	; (80056ec <HAL_RCC_OscConfig+0x338>)
 800546e:	400a      	ands	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d014      	beq.n	80054a4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fe f861 	bl	8003540 <HAL_GetTick>
 800547e:	0003      	movs	r3, r0
 8005480:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fe f85c 	bl	8003540 <HAL_GetTick>
 8005488:	0002      	movs	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e2ee      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005496:	4b93      	ldr	r3, [pc, #588]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	029b      	lsls	r3, r3, #10
 800549e:	4013      	ands	r3, r2
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0xd0>
 80054a2:	e015      	b.n	80054d0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fe f84c 	bl	8003540 <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ae:	f7fe f847 	bl	8003540 <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b64      	cmp	r3, #100	; 0x64
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e2d9      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c0:	4b88      	ldr	r3, [pc, #544]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	029b      	lsls	r3, r3, #10
 80054c8:	4013      	ands	r3, r2
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0xfa>
 80054cc:	e000      	b.n	80054d0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2202      	movs	r2, #2
 80054d6:	4013      	ands	r3, r2
 80054d8:	d100      	bne.n	80054dc <HAL_RCC_OscConfig+0x128>
 80054da:	e099      	b.n	8005610 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054dc:	4b81      	ldr	r3, [pc, #516]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2238      	movs	r2, #56	; 0x38
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054e6:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2203      	movs	r2, #3
 80054ec:	4013      	ands	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d102      	bne.n	80054fc <HAL_RCC_OscConfig+0x148>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d002      	beq.n	8005502 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d135      	bne.n	800556e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005502:	4b78      	ldr	r3, [pc, #480]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4013      	ands	r3, r2
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x166>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e2ac      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551a:	4b72      	ldr	r3, [pc, #456]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4a74      	ldr	r2, [pc, #464]	; (80056f0 <HAL_RCC_OscConfig+0x33c>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	021a      	lsls	r2, r3, #8
 800552a:	4b6e      	ldr	r3, [pc, #440]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d112      	bne.n	800555c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005536:	4b6b      	ldr	r3, [pc, #428]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6e      	ldr	r2, [pc, #440]	; (80056f4 <HAL_RCC_OscConfig+0x340>)
 800553c:	4013      	ands	r3, r2
 800553e:	0019      	movs	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	4b67      	ldr	r3, [pc, #412]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005546:	430a      	orrs	r2, r1
 8005548:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800554a:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	0adb      	lsrs	r3, r3, #11
 8005550:	2207      	movs	r2, #7
 8005552:	4013      	ands	r3, r2
 8005554:	4a68      	ldr	r2, [pc, #416]	; (80056f8 <HAL_RCC_OscConfig+0x344>)
 8005556:	40da      	lsrs	r2, r3
 8005558:	4b68      	ldr	r3, [pc, #416]	; (80056fc <HAL_RCC_OscConfig+0x348>)
 800555a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800555c:	4b68      	ldr	r3, [pc, #416]	; (8005700 <HAL_RCC_OscConfig+0x34c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0018      	movs	r0, r3
 8005562:	f7fd ff91 	bl	8003488 <HAL_InitTick>
 8005566:	1e03      	subs	r3, r0, #0
 8005568:	d051      	beq.n	800560e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e282      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d030      	beq.n	80055d8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005576:	4b5b      	ldr	r3, [pc, #364]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5e      	ldr	r2, [pc, #376]	; (80056f4 <HAL_RCC_OscConfig+0x340>)
 800557c:	4013      	ands	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	4b57      	ldr	r3, [pc, #348]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005586:	430a      	orrs	r2, r1
 8005588:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800558a:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b55      	ldr	r3, [pc, #340]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	0049      	lsls	r1, r1, #1
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fd ffd2 	bl	8003540 <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fd ffcd 	bl	8003540 <HAL_GetTick>
 80055a6:	0002      	movs	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e25f      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b4:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4013      	ands	r3, r2
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b48      	ldr	r3, [pc, #288]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a4a      	ldr	r2, [pc, #296]	; (80056f0 <HAL_RCC_OscConfig+0x33c>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	4b44      	ldr	r3, [pc, #272]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e01b      	b.n	8005610 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80055d8:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80055de:	4949      	ldr	r1, [pc, #292]	; (8005704 <HAL_RCC_OscConfig+0x350>)
 80055e0:	400a      	ands	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fd ffac 	bl	8003540 <HAL_GetTick>
 80055e8:	0003      	movs	r3, r0
 80055ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ee:	f7fd ffa7 	bl	8003540 <HAL_GetTick>
 80055f2:	0002      	movs	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e239      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4013      	ands	r3, r2
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x23a>
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2208      	movs	r2, #8
 8005616:	4013      	ands	r3, r2
 8005618:	d047      	beq.n	80056aa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800561a:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2238      	movs	r2, #56	; 0x38
 8005620:	4013      	ands	r3, r2
 8005622:	2b18      	cmp	r3, #24
 8005624:	d10a      	bne.n	800563c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562a:	2202      	movs	r2, #2
 800562c:	4013      	ands	r3, r2
 800562e:	d03c      	beq.n	80056aa <HAL_RCC_OscConfig+0x2f6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d138      	bne.n	80056aa <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e21b      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005644:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 8005646:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fd ff76 	bl	8003540 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800565a:	f7fd ff71 	bl	8003540 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e203      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005670:	2202      	movs	r2, #2
 8005672:	4013      	ands	r3, r2
 8005674:	d0f1      	beq.n	800565a <HAL_RCC_OscConfig+0x2a6>
 8005676:	e018      	b.n	80056aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800567a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 800567e:	2101      	movs	r1, #1
 8005680:	438a      	bics	r2, r1
 8005682:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd ff5c 	bl	8003540 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568e:	f7fd ff57 	bl	8003540 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e1e9      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	2202      	movs	r2, #2
 80056a6:	4013      	ands	r3, r2
 80056a8:	d1f1      	bne.n	800568e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2204      	movs	r2, #4
 80056b0:	4013      	ands	r3, r2
 80056b2:	d100      	bne.n	80056b6 <HAL_RCC_OscConfig+0x302>
 80056b4:	e0c6      	b.n	8005844 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	231f      	movs	r3, #31
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2238      	movs	r2, #56	; 0x38
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d11e      	bne.n	8005708 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80056ca:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_RCC_OscConfig+0x330>)
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	2202      	movs	r2, #2
 80056d0:	4013      	ands	r3, r2
 80056d2:	d100      	bne.n	80056d6 <HAL_RCC_OscConfig+0x322>
 80056d4:	e0b6      	b.n	8005844 <HAL_RCC_OscConfig+0x490>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d000      	beq.n	80056e0 <HAL_RCC_OscConfig+0x32c>
 80056de:	e0b1      	b.n	8005844 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e1c7      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
 80056e4:	40021000 	.word	0x40021000
 80056e8:	fffeffff 	.word	0xfffeffff
 80056ec:	fffbffff 	.word	0xfffbffff
 80056f0:	ffff80ff 	.word	0xffff80ff
 80056f4:	ffffc7ff 	.word	0xffffc7ff
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	20000000 	.word	0x20000000
 8005700:	20000004 	.word	0x20000004
 8005704:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005708:	4bb8      	ldr	r3, [pc, #736]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800570a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	055b      	lsls	r3, r3, #21
 8005710:	4013      	ands	r3, r2
 8005712:	d101      	bne.n	8005718 <HAL_RCC_OscConfig+0x364>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x366>
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d011      	beq.n	8005742 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	4bb3      	ldr	r3, [pc, #716]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005722:	4bb2      	ldr	r3, [pc, #712]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0549      	lsls	r1, r1, #21
 8005728:	430a      	orrs	r2, r1
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
 800572c:	4baf      	ldr	r3, [pc, #700]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800572e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	055b      	lsls	r3, r3, #21
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800573a:	231f      	movs	r3, #31
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005742:	4bab      	ldr	r3, [pc, #684]	; (80059f0 <HAL_RCC_OscConfig+0x63c>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d11a      	bne.n	8005784 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574e:	4ba8      	ldr	r3, [pc, #672]	; (80059f0 <HAL_RCC_OscConfig+0x63c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4ba7      	ldr	r3, [pc, #668]	; (80059f0 <HAL_RCC_OscConfig+0x63c>)
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	0049      	lsls	r1, r1, #1
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800575c:	f7fd fef0 	bl	8003540 <HAL_GetTick>
 8005760:	0003      	movs	r3, r0
 8005762:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005766:	f7fd feeb 	bl	8003540 <HAL_GetTick>
 800576a:	0002      	movs	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e17d      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005778:	4b9d      	ldr	r3, [pc, #628]	; (80059f0 <HAL_RCC_OscConfig+0x63c>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4013      	ands	r3, r2
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x3e6>
 800578c:	4b97      	ldr	r3, [pc, #604]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800578e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005792:	2101      	movs	r1, #1
 8005794:	430a      	orrs	r2, r1
 8005796:	65da      	str	r2, [r3, #92]	; 0x5c
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x420>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x408>
 80057a2:	4b92      	ldr	r3, [pc, #584]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057a6:	4b91      	ldr	r3, [pc, #580]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057a8:	2104      	movs	r1, #4
 80057aa:	430a      	orrs	r2, r1
 80057ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80057ae:	4b8f      	ldr	r3, [pc, #572]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057b2:	4b8e      	ldr	r3, [pc, #568]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057b4:	2101      	movs	r1, #1
 80057b6:	430a      	orrs	r2, r1
 80057b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0x420>
 80057bc:	4b8b      	ldr	r3, [pc, #556]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057c0:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057c2:	2101      	movs	r1, #1
 80057c4:	438a      	bics	r2, r1
 80057c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80057c8:	4b88      	ldr	r3, [pc, #544]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057cc:	4b87      	ldr	r3, [pc, #540]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057ce:	2104      	movs	r1, #4
 80057d0:	438a      	bics	r2, r1
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fd feb0 	bl	8003540 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e4:	e009      	b.n	80057fa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fd feab 	bl	8003540 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	4a80      	ldr	r2, [pc, #512]	; (80059f4 <HAL_RCC_OscConfig+0x640>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e13c      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fa:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	2202      	movs	r2, #2
 8005800:	4013      	ands	r3, r2
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x432>
 8005804:	e013      	b.n	800582e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fd fe9b 	bl	8003540 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800580e:	e009      	b.n	8005824 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fd fe96 	bl	8003540 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a76      	ldr	r2, [pc, #472]	; (80059f4 <HAL_RCC_OscConfig+0x640>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e127      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005824:	4b71      	ldr	r3, [pc, #452]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	2202      	movs	r2, #2
 800582a:	4013      	ands	r3, r2
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800582e:	231f      	movs	r3, #31
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b6c      	ldr	r3, [pc, #432]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800583a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583c:	4b6b      	ldr	r3, [pc, #428]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800583e:	496e      	ldr	r1, [pc, #440]	; (80059f8 <HAL_RCC_OscConfig+0x644>)
 8005840:	400a      	ands	r2, r1
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2220      	movs	r2, #32
 800584a:	4013      	ands	r3, r2
 800584c:	d039      	beq.n	80058c2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01b      	beq.n	800588e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005856:	4b65      	ldr	r3, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b64      	ldr	r3, [pc, #400]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800585c:	2180      	movs	r1, #128	; 0x80
 800585e:	03c9      	lsls	r1, r1, #15
 8005860:	430a      	orrs	r2, r1
 8005862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7fd fe6c 	bl	8003540 <HAL_GetTick>
 8005868:	0003      	movs	r3, r0
 800586a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800586e:	f7fd fe67 	bl	8003540 <HAL_GetTick>
 8005872:	0002      	movs	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0f9      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005880:	4b5a      	ldr	r3, [pc, #360]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	4013      	ands	r3, r2
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x4ba>
 800588c:	e019      	b.n	80058c2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800588e:	4b57      	ldr	r3, [pc, #348]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b56      	ldr	r3, [pc, #344]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005894:	4959      	ldr	r1, [pc, #356]	; (80059fc <HAL_RCC_OscConfig+0x648>)
 8005896:	400a      	ands	r2, r1
 8005898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fd fe51 	bl	8003540 <HAL_GetTick>
 800589e:	0003      	movs	r3, r0
 80058a0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058a4:	f7fd fe4c 	bl	8003540 <HAL_GetTick>
 80058a8:	0002      	movs	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0de      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058b6:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	4013      	ands	r3, r2
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d100      	bne.n	80058cc <HAL_RCC_OscConfig+0x518>
 80058ca:	e0d2      	b.n	8005a72 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058cc:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2238      	movs	r2, #56	; 0x38
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d100      	bne.n	80058da <HAL_RCC_OscConfig+0x526>
 80058d8:	e081      	b.n	80059de <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d156      	bne.n	8005990 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b42      	ldr	r3, [pc, #264]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80058e8:	4945      	ldr	r1, [pc, #276]	; (8005a00 <HAL_RCC_OscConfig+0x64c>)
 80058ea:	400a      	ands	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fd fe27 	bl	8003540 <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fd fe22 	bl	8003540 <HAL_GetTick>
 80058fc:	0002      	movs	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0b4      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590a:	4b38      	ldr	r3, [pc, #224]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	049b      	lsls	r3, r3, #18
 8005912:	4013      	ands	r3, r2
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005916:	4b35      	ldr	r3, [pc, #212]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	4a3a      	ldr	r2, [pc, #232]	; (8005a04 <HAL_RCC_OscConfig+0x650>)
 800591c:	4013      	ands	r3, r2
 800591e:	0019      	movs	r1, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	431a      	orrs	r2, r3
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005946:	430a      	orrs	r2, r1
 8005948:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800594a:	4b28      	ldr	r3, [pc, #160]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	0449      	lsls	r1, r1, #17
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005958:	4b24      	ldr	r3, [pc, #144]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	4b23      	ldr	r3, [pc, #140]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	0549      	lsls	r1, r1, #21
 8005962:	430a      	orrs	r2, r1
 8005964:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fd fdeb 	bl	8003540 <HAL_GetTick>
 800596a:	0003      	movs	r3, r0
 800596c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005970:	f7fd fde6 	bl	8003540 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e078      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005982:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	049b      	lsls	r3, r3, #18
 800598a:	4013      	ands	r3, r2
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0x5bc>
 800598e:	e070      	b.n	8005a72 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b15      	ldr	r3, [pc, #84]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 8005996:	491a      	ldr	r1, [pc, #104]	; (8005a00 <HAL_RCC_OscConfig+0x64c>)
 8005998:	400a      	ands	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800599c:	4b13      	ldr	r3, [pc, #76]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80059a2:	2103      	movs	r1, #3
 80059a4:	438a      	bics	r2, r1
 80059a6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80059ae:	4916      	ldr	r1, [pc, #88]	; (8005a08 <HAL_RCC_OscConfig+0x654>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fd fdc4 	bl	8003540 <HAL_GetTick>
 80059b8:	0003      	movs	r3, r0
 80059ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059be:	f7fd fdbf 	bl	8003540 <HAL_GetTick>
 80059c2:	0002      	movs	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e051      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_OscConfig+0x638>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	049b      	lsls	r3, r3, #18
 80059d8:	4013      	ands	r3, r2
 80059da:	d1f0      	bne.n	80059be <HAL_RCC_OscConfig+0x60a>
 80059dc:	e049      	b.n	8005a72 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d112      	bne.n	8005a0c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e044      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40007000 	.word	0x40007000
 80059f4:	00001388 	.word	0x00001388
 80059f8:	efffffff 	.word	0xefffffff
 80059fc:	ffbfffff 	.word	0xffbfffff
 8005a00:	feffffff 	.word	0xfeffffff
 8005a04:	11c1808c 	.word	0x11c1808c
 8005a08:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_RCC_OscConfig+0x6c8>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2203      	movs	r2, #3
 8005a16:	401a      	ands	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d126      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2270      	movs	r2, #112	; 0x70
 8005a24:	401a      	ands	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d11f      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	23fe      	movs	r3, #254	; 0xfe
 8005a32:	01db      	lsls	r3, r3, #7
 8005a34:	401a      	ands	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d116      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	23f8      	movs	r3, #248	; 0xf8
 8005a44:	039b      	lsls	r3, r3, #14
 8005a46:	401a      	ands	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10e      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	23e0      	movs	r3, #224	; 0xe0
 8005a54:	051b      	lsls	r3, r3, #20
 8005a56:	401a      	ands	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0f5b      	lsrs	r3, r3, #29
 8005a64:	075a      	lsls	r2, r3, #29
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b008      	add	sp, #32
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000

08005a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0e9      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a94:	4b76      	ldr	r3, [pc, #472]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2207      	movs	r2, #7
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d91e      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b73      	ldr	r3, [pc, #460]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2207      	movs	r2, #7
 8005aa8:	4393      	bics	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	4b70      	ldr	r3, [pc, #448]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ab4:	f7fd fd44 	bl	8003540 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005abc:	e009      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abe:	f7fd fd3f 	bl	8003540 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	4a6a      	ldr	r2, [pc, #424]	; (8005c74 <HAL_RCC_ClockConfig+0x1f4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0ca      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad2:	4b67      	ldr	r3, [pc, #412]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1ee      	bne.n	8005abe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d015      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2204      	movs	r2, #4
 8005af0:	4013      	ands	r3, r2
 8005af2:	d006      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005af4:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b5f      	ldr	r3, [pc, #380]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005afa:	21e0      	movs	r1, #224	; 0xe0
 8005afc:	01c9      	lsls	r1, r1, #7
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b02:	4b5d      	ldr	r3, [pc, #372]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	4a5d      	ldr	r2, [pc, #372]	; (8005c7c <HAL_RCC_ClockConfig+0x1fc>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d057      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b28:	4b53      	ldr	r3, [pc, #332]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	029b      	lsls	r3, r3, #10
 8005b30:	4013      	ands	r3, r2
 8005b32:	d12b      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e097      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b40:	4b4d      	ldr	r3, [pc, #308]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	049b      	lsls	r3, r3, #18
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d11f      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e08b      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b58:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4013      	ands	r3, r2
 8005b62:	d113      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e07f      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	2202      	movs	r2, #2
 8005b76:	4013      	ands	r3, r2
 8005b78:	d108      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e074      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	2202      	movs	r2, #2
 8005b84:	4013      	ands	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e06d      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b8c:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2207      	movs	r2, #7
 8005b92:	4393      	bics	r3, r2
 8005b94:	0019      	movs	r1, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba0:	f7fd fcce 	bl	8003540 <HAL_GetTick>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba8:	e009      	b.n	8005bbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005baa:	f7fd fcc9 	bl	8003540 <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <HAL_RCC_ClockConfig+0x1f4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e054      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2238      	movs	r2, #56	; 0x38
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d1ec      	bne.n	8005baa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd0:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2207      	movs	r2, #7
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d21e      	bcs.n	8005c1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2207      	movs	r2, #7
 8005be4:	4393      	bics	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bf0:	f7fd fca6 	bl	8003540 <HAL_GetTick>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bf8:	e009      	b.n	8005c0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfa:	f7fd fca1 	bl	8003540 <HAL_GetTick>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_RCC_ClockConfig+0x1f4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e02c      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c0e:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2207      	movs	r2, #7
 8005c14:	4013      	ands	r3, r2
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d1ee      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	4013      	ands	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_RCC_ClockConfig+0x200>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	0019      	movs	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c3a:	f000 f829 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8005c3e:	0001      	movs	r1, r0
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <HAL_RCC_ClockConfig+0x1f8>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	220f      	movs	r2, #15
 8005c48:	401a      	ands	r2, r3
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <HAL_RCC_ClockConfig+0x204>)
 8005c4c:	0092      	lsls	r2, r2, #2
 8005c4e:	58d3      	ldr	r3, [r2, r3]
 8005c50:	221f      	movs	r2, #31
 8005c52:	4013      	ands	r3, r2
 8005c54:	000a      	movs	r2, r1
 8005c56:	40da      	lsrs	r2, r3
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7fd fc11 	bl	8003488 <HAL_InitTick>
 8005c66:	0003      	movs	r3, r0
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b004      	add	sp, #16
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40022000 	.word	0x40022000
 8005c74:	00001388 	.word	0x00001388
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	fffff0ff 	.word	0xfffff0ff
 8005c80:	ffff8fff 	.word	0xffff8fff
 8005c84:	0800aca8 	.word	0x0800aca8
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	20000004 	.word	0x20000004

08005c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c96:	4b3c      	ldr	r3, [pc, #240]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2238      	movs	r2, #56	; 0x38
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ca0:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	0adb      	lsrs	r3, r3, #11
 8005ca6:	2207      	movs	r2, #7
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2201      	movs	r2, #1
 8005cac:	409a      	lsls	r2, r3
 8005cae:	0013      	movs	r3, r2
 8005cb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	4835      	ldr	r0, [pc, #212]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cb6:	f7fa fa41 	bl	800013c <__udivsi3>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	e05d      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cc0:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2238      	movs	r2, #56	; 0x38
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d102      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x100>)
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	e054      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd2:	4b2d      	ldr	r3, [pc, #180]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2238      	movs	r2, #56	; 0x38
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d138      	bne.n	8005d50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005cde:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ce8:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	2207      	movs	r2, #7
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d10d      	bne.n	8005d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4824      	ldr	r0, [pc, #144]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d00:	f7fa fa1c 	bl	800013c <__udivsi3>
 8005d04:	0003      	movs	r3, r0
 8005d06:	0019      	movs	r1, r3
 8005d08:	4b1f      	ldr	r3, [pc, #124]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	227f      	movs	r2, #127	; 0x7f
 8005d10:	4013      	ands	r3, r2
 8005d12:	434b      	muls	r3, r1
 8005d14:	617b      	str	r3, [r7, #20]
        break;
 8005d16:	e00d      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	481c      	ldr	r0, [pc, #112]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d1c:	f7fa fa0e 	bl	800013c <__udivsi3>
 8005d20:	0003      	movs	r3, r0
 8005d22:	0019      	movs	r1, r3
 8005d24:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	227f      	movs	r2, #127	; 0x7f
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	434b      	muls	r3, r1
 8005d30:	617b      	str	r3, [r7, #20]
        break;
 8005d32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0f5b      	lsrs	r3, r3, #29
 8005d3a:	2207      	movs	r2, #7
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	3301      	adds	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	6978      	ldr	r0, [r7, #20]
 8005d46:	f7fa f9f9 	bl	800013c <__udivsi3>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e015      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2238      	movs	r2, #56	; 0x38
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d103      	bne.n	8005d64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	e00b      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2238      	movs	r2, #56	; 0x38
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b18      	cmp	r3, #24
 8005d6e:	d103      	bne.n	8005d78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005d70:	23fa      	movs	r3, #250	; 0xfa
 8005d72:	01db      	lsls	r3, r3, #7
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e001      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d7c:	693b      	ldr	r3, [r7, #16]
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b006      	add	sp, #24
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	007a1200 	.word	0x007a1200

08005d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	20000000 	.word	0x20000000

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b5b0      	push	{r4, r5, r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005dac:	f7ff fff2 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db0:	0004      	movs	r4, r0
 8005db2:	f7ff faf3 	bl	800539c <LL_RCC_GetAPB1Prescaler>
 8005db6:	0003      	movs	r3, r0
 8005db8:	0b1a      	lsrs	r2, r3, #12
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	58d3      	ldr	r3, [r2, r3]
 8005dc0:	221f      	movs	r2, #31
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	40dc      	lsrs	r4, r3
 8005dc6:	0023      	movs	r3, r4
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	0800ace8 	.word	0x0800ace8

08005dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ddc:	2313      	movs	r3, #19
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005de4:	2312      	movs	r3, #18
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	4013      	ands	r3, r2
 8005df6:	d100      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005df8:	e0ad      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfa:	2011      	movs	r0, #17
 8005dfc:	183b      	adds	r3, r7, r0
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e02:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	055b      	lsls	r3, r3, #21
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d110      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	4b44      	ldr	r3, [pc, #272]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e12:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	0549      	lsls	r1, r1, #21
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e1c:	4b40      	ldr	r3, [pc, #256]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	055b      	lsls	r3, r3, #21
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e30:	4b3c      	ldr	r3, [pc, #240]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	0049      	lsls	r1, r1, #1
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e3e:	f7fd fb7f 	bl	8003540 <HAL_GetTick>
 8005e42:	0003      	movs	r3, r0
 8005e44:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e46:	e00b      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e48:	f7fd fb7a 	bl	8003540 <HAL_GetTick>
 8005e4c:	0002      	movs	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d904      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005e56:	2313      	movs	r3, #19
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	701a      	strb	r2, [r3, #0]
        break;
 8005e5e:	e005      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e60:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d0ed      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005e6c:	2313      	movs	r3, #19
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d15e      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e76:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e7a:	23c0      	movs	r3, #192	; 0xc0
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d019      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d014      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	0249      	lsls	r1, r1, #9
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005eb0:	491e      	ldr	r1, [pc, #120]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d016      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fb3c 	bl	8003540 <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ecc:	e00c      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fd fb37 	bl	8003540 <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d904      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005ede:	2313      	movs	r3, #19
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	701a      	strb	r2, [r3, #0]
            break;
 8005ee6:	e004      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	2202      	movs	r2, #2
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d0ed      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005ef2:	2313      	movs	r3, #19
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f10:	e016      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f12:	2312      	movs	r3, #18
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2213      	movs	r2, #19
 8005f18:	18ba      	adds	r2, r7, r2
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e00f      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40007000 	.word	0x40007000
 8005f28:	fffffcff 	.word	0xfffffcff
 8005f2c:	fffeffff 	.word	0xfffeffff
 8005f30:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	2312      	movs	r3, #18
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2213      	movs	r2, #19
 8005f3a:	18ba      	adds	r2, r7, r2
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f40:	2311      	movs	r3, #17
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4a:	4bb6      	ldr	r3, [pc, #728]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4e:	4bb5      	ldr	r3, [pc, #724]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f50:	49b5      	ldr	r1, [pc, #724]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005f52:	400a      	ands	r2, r1
 8005f54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f60:	4bb0      	ldr	r3, [pc, #704]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	2203      	movs	r2, #3
 8005f66:	4393      	bics	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	4bad      	ldr	r3, [pc, #692]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f7e:	4ba9      	ldr	r3, [pc, #676]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	220c      	movs	r2, #12
 8005f84:	4393      	bics	r3, r2
 8005f86:	0019      	movs	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	4ba5      	ldr	r3, [pc, #660]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f9c:	4ba1      	ldr	r3, [pc, #644]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	2230      	movs	r2, #48	; 0x30
 8005fa2:	4393      	bics	r3, r2
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	4b9e      	ldr	r3, [pc, #632]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fac:	430a      	orrs	r2, r1
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fba:	4b9a      	ldr	r3, [pc, #616]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	4a9b      	ldr	r2, [pc, #620]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	4b96      	ldr	r3, [pc, #600]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	015b      	lsls	r3, r3, #5
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005fda:	4b92      	ldr	r3, [pc, #584]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	4a94      	ldr	r2, [pc, #592]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	4b8e      	ldr	r3, [pc, #568]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fea:	430a      	orrs	r2, r1
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ffa:	4b8a      	ldr	r3, [pc, #552]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	4a8d      	ldr	r2, [pc, #564]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006000:	4013      	ands	r3, r2
 8006002:	0019      	movs	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006008:	4b86      	ldr	r3, [pc, #536]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800600a:	430a      	orrs	r2, r1
 800600c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4013      	ands	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601a:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	4a86      	ldr	r2, [pc, #536]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006020:	4013      	ands	r3, r2
 8006022:	0019      	movs	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800602a:	430a      	orrs	r2, r1
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2220      	movs	r2, #32
 8006034:	4013      	ands	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006038:	4b7a      	ldr	r3, [pc, #488]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	4a7f      	ldr	r2, [pc, #508]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800603e:	4013      	ands	r3, r2
 8006040:	0019      	movs	r1, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	4b77      	ldr	r3, [pc, #476]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006048:	430a      	orrs	r2, r1
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	4013      	ands	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006056:	4b73      	ldr	r3, [pc, #460]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	4a79      	ldr	r2, [pc, #484]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800605c:	4013      	ands	r3, r2
 800605e:	0019      	movs	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	4b6f      	ldr	r3, [pc, #444]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006066:	430a      	orrs	r2, r1
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	4013      	ands	r3, r2
 8006074:	d015      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006076:	4b6b      	ldr	r3, [pc, #428]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	0899      	lsrs	r1, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006082:	4b68      	ldr	r3, [pc, #416]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006084:	430a      	orrs	r2, r1
 8006086:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	05db      	lsls	r3, r3, #23
 8006090:	429a      	cmp	r2, r3
 8006092:	d106      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006094:	4b63      	ldr	r3, [pc, #396]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b62      	ldr	r3, [pc, #392]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	0249      	lsls	r1, r1, #9
 800609e:	430a      	orrs	r2, r1
 80060a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	031b      	lsls	r3, r3, #12
 80060aa:	4013      	ands	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060ae:	4b5d      	ldr	r3, [pc, #372]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	4393      	bics	r3, r2
 80060b6:	0019      	movs	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060bc:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060be:	430a      	orrs	r2, r1
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	039b      	lsls	r3, r3, #14
 80060ca:	4013      	ands	r3, r2
 80060cc:	d016      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060ce:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	4a5c      	ldr	r2, [pc, #368]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	0019      	movs	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060dc:	4b51      	ldr	r3, [pc, #324]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	03db      	lsls	r3, r3, #15
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d106      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80060ee:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	0449      	lsls	r1, r1, #17
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	03db      	lsls	r3, r3, #15
 8006104:	4013      	ands	r3, r2
 8006106:	d016      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006108:	4b46      	ldr	r3, [pc, #280]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	4a4e      	ldr	r2, [pc, #312]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800610e:	4013      	ands	r3, r2
 8006110:	0019      	movs	r1, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006116:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006118:	430a      	orrs	r2, r1
 800611a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	045b      	lsls	r3, r3, #17
 8006124:	429a      	cmp	r2, r3
 8006126:	d106      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006128:	4b3e      	ldr	r3, [pc, #248]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	0449      	lsls	r1, r1, #17
 8006132:	430a      	orrs	r2, r1
 8006134:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	4013      	ands	r3, r2
 8006140:	d014      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006142:	4b38      	ldr	r3, [pc, #224]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	2203      	movs	r2, #3
 8006148:	4393      	bics	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006152:	430a      	orrs	r2, r1
 8006154:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d106      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	0249      	lsls	r1, r1, #9
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	019b      	lsls	r3, r3, #6
 8006174:	4013      	ands	r3, r2
 8006176:	d014      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006178:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	220c      	movs	r2, #12
 800617e:	4393      	bics	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006188:	430a      	orrs	r2, r1
 800618a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b04      	cmp	r3, #4
 8006192:	d106      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006194:	4b23      	ldr	r3, [pc, #140]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	0249      	lsls	r1, r1, #9
 800619e:	430a      	orrs	r2, r1
 80061a0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	045b      	lsls	r3, r3, #17
 80061aa:	4013      	ands	r3, r2
 80061ac:	d016      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	0019      	movs	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061be:	430a      	orrs	r2, r1
 80061c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061d4:	2180      	movs	r1, #128	; 0x80
 80061d6:	0449      	lsls	r1, r1, #17
 80061d8:	430a      	orrs	r2, r1
 80061da:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	049b      	lsls	r3, r3, #18
 80061e4:	4013      	ands	r3, r2
 80061e6:	d016      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	4a10      	ldr	r2, [pc, #64]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061f8:	430a      	orrs	r2, r1
 80061fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	429a      	cmp	r2, r3
 8006206:	d106      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	0449      	lsls	r1, r1, #17
 8006212:	430a      	orrs	r2, r1
 8006214:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006216:	2312      	movs	r3, #18
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	781b      	ldrb	r3, [r3, #0]
}
 800621c:	0018      	movs	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	b006      	add	sp, #24
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40021000 	.word	0x40021000
 8006228:	efffffff 	.word	0xefffffff
 800622c:	fffff3ff 	.word	0xfffff3ff
 8006230:	fffffcff 	.word	0xfffffcff
 8006234:	fff3ffff 	.word	0xfff3ffff
 8006238:	ffcfffff 	.word	0xffcfffff
 800623c:	ffffcfff 	.word	0xffffcfff
 8006240:	ffff3fff 	.word	0xffff3fff
 8006244:	ffbfffff 	.word	0xffbfffff
 8006248:	feffffff 	.word	0xfeffffff

0800624c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e046      	b.n	80062ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2284      	movs	r2, #132	; 0x84
 8006262:	589b      	ldr	r3, [r3, r2]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	2100      	movs	r1, #0
 800626e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	0018      	movs	r0, r3
 8006274:	f7fc ff56 	bl	8003124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2284      	movs	r2, #132	; 0x84
 800627c:	2124      	movs	r1, #36	; 0x24
 800627e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2101      	movs	r1, #1
 800628c:	438a      	bics	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 fc22 	bl	8006adc <UART_SetConfig>
 8006298:	0003      	movs	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e024      	b.n	80062ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 ff95 	bl	80071dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	490d      	ldr	r1, [pc, #52]	; (80062f4 <HAL_UART_Init+0xa8>)
 80062be:	400a      	ands	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	212a      	movs	r1, #42	; 0x2a
 80062ce:	438a      	bics	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2101      	movs	r1, #1
 80062de:	430a      	orrs	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f001 f82d 	bl	8007344 <UART_CheckIdleState>
 80062ea:	0003      	movs	r3, r0
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b002      	add	sp, #8
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	ffffb7ff 	.word	0xffffb7ff

080062f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	1dbb      	adds	r3, r7, #6
 8006304:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2284      	movs	r2, #132	; 0x84
 800630a:	589b      	ldr	r3, [r3, r2]
 800630c:	2b20      	cmp	r3, #32
 800630e:	d000      	beq.n	8006312 <HAL_UART_Transmit_IT+0x1a>
 8006310:	e0a0      	b.n	8006454 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_UART_Transmit_IT+0x28>
 8006318:	1dbb      	adds	r3, r7, #6
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e098      	b.n	8006456 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	2380      	movs	r3, #128	; 0x80
 800632a:	015b      	lsls	r3, r3, #5
 800632c:	429a      	cmp	r2, r3
 800632e:	d109      	bne.n	8006344 <HAL_UART_Transmit_IT+0x4c>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2201      	movs	r2, #1
 800633c:	4013      	ands	r3, r2
 800633e:	d001      	beq.n	8006344 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e088      	b.n	8006456 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	5c9b      	ldrb	r3, [r3, r2]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_UART_Transmit_IT+0x5a>
 800634e:	2302      	movs	r3, #2
 8006350:	e081      	b.n	8006456 <HAL_UART_Transmit_IT+0x15e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2280      	movs	r2, #128	; 0x80
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1dba      	adds	r2, r7, #6
 8006364:	2154      	movs	r1, #84	; 0x54
 8006366:	8812      	ldrh	r2, [r2, #0]
 8006368:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1dba      	adds	r2, r7, #6
 800636e:	2156      	movs	r1, #86	; 0x56
 8006370:	8812      	ldrh	r2, [r2, #0]
 8006372:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	228c      	movs	r2, #140	; 0x8c
 800637e:	2100      	movs	r1, #0
 8006380:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2284      	movs	r2, #132	; 0x84
 8006386:	2121      	movs	r1, #33	; 0x21
 8006388:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	059b      	lsls	r3, r3, #22
 8006392:	429a      	cmp	r2, r3
 8006394:	d12e      	bne.n	80063f4 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	015b      	lsls	r3, r3, #5
 800639e:	429a      	cmp	r2, r3
 80063a0:	d107      	bne.n	80063b2 <HAL_UART_Transmit_IT+0xba>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <HAL_UART_Transmit_IT+0x168>)
 80063ae:	675a      	str	r2, [r3, #116]	; 0x74
 80063b0:	e002      	b.n	80063b8 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <HAL_UART_Transmit_IT+0x16c>)
 80063b6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	2100      	movs	r1, #0
 80063be:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c0:	f3ef 8310 	mrs	r3, PRIMASK
 80063c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80063c6:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ca:	2301      	movs	r3, #1
 80063cc:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f383 8810 	msr	PRIMASK, r3
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	0409      	lsls	r1, r1, #16
 80063e4:	430a      	orrs	r2, r1
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	e02d      	b.n	8006450 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d107      	bne.n	8006410 <HAL_UART_Transmit_IT+0x118>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <HAL_UART_Transmit_IT+0x170>)
 800640c:	675a      	str	r2, [r3, #116]	; 0x74
 800640e:	e002      	b.n	8006416 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_UART_Transmit_IT+0x174>)
 8006414:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641e:	f3ef 8310 	mrs	r3, PRIMASK
 8006422:	613b      	str	r3, [r7, #16]
  return(result);
 8006424:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006428:	2301      	movs	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f383 8810 	msr	PRIMASK, r3
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2180      	movs	r1, #128	; 0x80
 8006440:	430a      	orrs	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f383 8810 	msr	PRIMASK, r3
}
 800644e:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b00c      	add	sp, #48	; 0x30
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	080078c1 	.word	0x080078c1
 8006464:	080077d5 	.word	0x080077d5
 8006468:	08007717 	.word	0x08007717
 800646c:	08007663 	.word	0x08007663

08006470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	b0aa      	sub	sp, #168	; 0xa8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	22a4      	movs	r2, #164	; 0xa4
 8006480:	18b9      	adds	r1, r7, r2
 8006482:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	20a0      	movs	r0, #160	; 0xa0
 800648c:	1839      	adds	r1, r7, r0
 800648e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	249c      	movs	r4, #156	; 0x9c
 8006498:	1939      	adds	r1, r7, r4
 800649a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800649c:	0011      	movs	r1, r2
 800649e:	18bb      	adds	r3, r7, r2
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4aa0      	ldr	r2, [pc, #640]	; (8006724 <HAL_UART_IRQHandler+0x2b4>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	2298      	movs	r2, #152	; 0x98
 80064a8:	18bd      	adds	r5, r7, r2
 80064aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80064ac:	18bb      	adds	r3, r7, r2
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11a      	bne.n	80064ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2220      	movs	r2, #32
 80064ba:	4013      	ands	r3, r2
 80064bc:	d015      	beq.n	80064ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064be:	183b      	adds	r3, r7, r0
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2220      	movs	r2, #32
 80064c4:	4013      	ands	r3, r2
 80064c6:	d105      	bne.n	80064d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064c8:	193b      	adds	r3, r7, r4
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	055b      	lsls	r3, r3, #21
 80064d0:	4013      	ands	r3, r2
 80064d2:	d00a      	beq.n	80064ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d100      	bne.n	80064de <HAL_UART_IRQHandler+0x6e>
 80064dc:	e2cf      	b.n	8006a7e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	0010      	movs	r0, r2
 80064e6:	4798      	blx	r3
      }
      return;
 80064e8:	e2c9      	b.n	8006a7e <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064ea:	2398      	movs	r3, #152	; 0x98
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d100      	bne.n	80064f6 <HAL_UART_IRQHandler+0x86>
 80064f4:	e11e      	b.n	8006734 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064f6:	239c      	movs	r3, #156	; 0x9c
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a8a      	ldr	r2, [pc, #552]	; (8006728 <HAL_UART_IRQHandler+0x2b8>)
 80064fe:	4013      	ands	r3, r2
 8006500:	d106      	bne.n	8006510 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006502:	23a0      	movs	r3, #160	; 0xa0
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a88      	ldr	r2, [pc, #544]	; (800672c <HAL_UART_IRQHandler+0x2bc>)
 800650a:	4013      	ands	r3, r2
 800650c:	d100      	bne.n	8006510 <HAL_UART_IRQHandler+0xa0>
 800650e:	e111      	b.n	8006734 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006510:	23a4      	movs	r3, #164	; 0xa4
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2201      	movs	r2, #1
 8006518:	4013      	ands	r3, r2
 800651a:	d012      	beq.n	8006542 <HAL_UART_IRQHandler+0xd2>
 800651c:	23a0      	movs	r3, #160	; 0xa0
 800651e:	18fb      	adds	r3, r7, r3
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4013      	ands	r3, r2
 8006528:	d00b      	beq.n	8006542 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	228c      	movs	r2, #140	; 0x8c
 8006536:	589b      	ldr	r3, [r3, r2]
 8006538:	2201      	movs	r2, #1
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	218c      	movs	r1, #140	; 0x8c
 8006540:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006542:	23a4      	movs	r3, #164	; 0xa4
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2202      	movs	r2, #2
 800654a:	4013      	ands	r3, r2
 800654c:	d011      	beq.n	8006572 <HAL_UART_IRQHandler+0x102>
 800654e:	239c      	movs	r3, #156	; 0x9c
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	4013      	ands	r3, r2
 8006558:	d00b      	beq.n	8006572 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2202      	movs	r2, #2
 8006560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	228c      	movs	r2, #140	; 0x8c
 8006566:	589b      	ldr	r3, [r3, r2]
 8006568:	2204      	movs	r2, #4
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	218c      	movs	r1, #140	; 0x8c
 8006570:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006572:	23a4      	movs	r3, #164	; 0xa4
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2204      	movs	r2, #4
 800657a:	4013      	ands	r3, r2
 800657c:	d011      	beq.n	80065a2 <HAL_UART_IRQHandler+0x132>
 800657e:	239c      	movs	r3, #156	; 0x9c
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	4013      	ands	r3, r2
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2204      	movs	r2, #4
 8006590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	228c      	movs	r2, #140	; 0x8c
 8006596:	589b      	ldr	r3, [r3, r2]
 8006598:	2202      	movs	r2, #2
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	218c      	movs	r1, #140	; 0x8c
 80065a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065a2:	23a4      	movs	r3, #164	; 0xa4
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4013      	ands	r3, r2
 80065ac:	d017      	beq.n	80065de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065ae:	23a0      	movs	r3, #160	; 0xa0
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2220      	movs	r2, #32
 80065b6:	4013      	ands	r3, r2
 80065b8:	d105      	bne.n	80065c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065ba:	239c      	movs	r3, #156	; 0x9c
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a59      	ldr	r2, [pc, #356]	; (8006728 <HAL_UART_IRQHandler+0x2b8>)
 80065c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065c4:	d00b      	beq.n	80065de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2208      	movs	r2, #8
 80065cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	228c      	movs	r2, #140	; 0x8c
 80065d2:	589b      	ldr	r3, [r3, r2]
 80065d4:	2208      	movs	r2, #8
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	218c      	movs	r1, #140	; 0x8c
 80065dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065de:	23a4      	movs	r3, #164	; 0xa4
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	2380      	movs	r3, #128	; 0x80
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	4013      	ands	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_UART_IRQHandler+0x1a4>
 80065ec:	23a0      	movs	r3, #160	; 0xa0
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	04db      	lsls	r3, r3, #19
 80065f6:	4013      	ands	r3, r2
 80065f8:	d00c      	beq.n	8006614 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	0112      	lsls	r2, r2, #4
 8006602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	228c      	movs	r2, #140	; 0x8c
 8006608:	589b      	ldr	r3, [r3, r2]
 800660a:	2220      	movs	r2, #32
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	218c      	movs	r1, #140	; 0x8c
 8006612:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	228c      	movs	r2, #140	; 0x8c
 8006618:	589b      	ldr	r3, [r3, r2]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d100      	bne.n	8006620 <HAL_UART_IRQHandler+0x1b0>
 800661e:	e230      	b.n	8006a82 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006620:	23a4      	movs	r3, #164	; 0xa4
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2220      	movs	r2, #32
 8006628:	4013      	ands	r3, r2
 800662a:	d015      	beq.n	8006658 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800662c:	23a0      	movs	r3, #160	; 0xa0
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2220      	movs	r2, #32
 8006634:	4013      	ands	r3, r2
 8006636:	d106      	bne.n	8006646 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006638:	239c      	movs	r3, #156	; 0x9c
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	055b      	lsls	r3, r3, #21
 8006642:	4013      	ands	r3, r2
 8006644:	d008      	beq.n	8006658 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	2b00      	cmp	r3, #0
 800664c:	d004      	beq.n	8006658 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	0010      	movs	r0, r2
 8006656:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	228c      	movs	r2, #140	; 0x8c
 800665c:	589b      	ldr	r3, [r3, r2]
 800665e:	2194      	movs	r1, #148	; 0x94
 8006660:	187a      	adds	r2, r7, r1
 8006662:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2240      	movs	r2, #64	; 0x40
 800666c:	4013      	ands	r3, r2
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d004      	beq.n	800667c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006672:	187b      	adds	r3, r7, r1
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2228      	movs	r2, #40	; 0x28
 8006678:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667a:	d047      	beq.n	800670c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0018      	movs	r0, r3
 8006680:	f000 ff72 	bl	8007568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2240      	movs	r2, #64	; 0x40
 800668c:	4013      	ands	r3, r2
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d137      	bne.n	8006702 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006692:	f3ef 8310 	mrs	r3, PRIMASK
 8006696:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	2090      	movs	r0, #144	; 0x90
 800669c:	183a      	adds	r2, r7, r0
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	2301      	movs	r3, #1
 80066a2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	438a      	bics	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	183b      	adds	r3, r7, r0
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066c4:	f383 8810 	msr	PRIMASK, r3
}
 80066c8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d012      	beq.n	80066f8 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_UART_IRQHandler+0x2c0>)
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066de:	0018      	movs	r0, r3
 80066e0:	f7fe fada 	bl	8004c98 <HAL_DMA_Abort_IT>
 80066e4:	1e03      	subs	r3, r0, #0
 80066e6:	d01a      	beq.n	800671e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f2:	0018      	movs	r0, r3
 80066f4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f6:	e012      	b.n	800671e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 f9da 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	e00d      	b.n	800671e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 f9d5 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670a:	e008      	b.n	800671e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	0018      	movs	r0, r3
 8006710:	f000 f9d0 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	228c      	movs	r2, #140	; 0x8c
 8006718:	2100      	movs	r1, #0
 800671a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800671c:	e1b1      	b.n	8006a82 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671e:	46c0      	nop			; (mov r8, r8)
    return;
 8006720:	e1af      	b.n	8006a82 <HAL_UART_IRQHandler+0x612>
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	0000080f 	.word	0x0000080f
 8006728:	10000001 	.word	0x10000001
 800672c:	04000120 	.word	0x04000120
 8006730:	08007635 	.word	0x08007635

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d000      	beq.n	800673e <HAL_UART_IRQHandler+0x2ce>
 800673c:	e135      	b.n	80069aa <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800673e:	23a4      	movs	r3, #164	; 0xa4
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2210      	movs	r2, #16
 8006746:	4013      	ands	r3, r2
 8006748:	d100      	bne.n	800674c <HAL_UART_IRQHandler+0x2dc>
 800674a:	e12e      	b.n	80069aa <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800674c:	23a0      	movs	r3, #160	; 0xa0
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2210      	movs	r2, #16
 8006754:	4013      	ands	r3, r2
 8006756:	d100      	bne.n	800675a <HAL_UART_IRQHandler+0x2ea>
 8006758:	e127      	b.n	80069aa <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2210      	movs	r2, #16
 8006760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	4013      	ands	r3, r2
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d000      	beq.n	8006772 <HAL_UART_IRQHandler+0x302>
 8006770:	e09e      	b.n	80068b0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	217e      	movs	r1, #126	; 0x7e
 800677c:	187b      	adds	r3, r7, r1
 800677e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006780:	187b      	adds	r3, r7, r1
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d100      	bne.n	800678a <HAL_UART_IRQHandler+0x31a>
 8006788:	e17d      	b.n	8006a86 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	225c      	movs	r2, #92	; 0x5c
 800678e:	5a9b      	ldrh	r3, [r3, r2]
 8006790:	187a      	adds	r2, r7, r1
 8006792:	8812      	ldrh	r2, [r2, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d300      	bcc.n	800679a <HAL_UART_IRQHandler+0x32a>
 8006798:	e175      	b.n	8006a86 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	187a      	adds	r2, r7, r1
 800679e:	215e      	movs	r1, #94	; 0x5e
 80067a0:	8812      	ldrh	r2, [r2, #0]
 80067a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2220      	movs	r2, #32
 80067ae:	4013      	ands	r3, r2
 80067b0:	d16f      	bne.n	8006892 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b2:	f3ef 8310 	mrs	r3, PRIMASK
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80067bc:	2301      	movs	r3, #1
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	f383 8810 	msr	PRIMASK, r3
}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	49b1      	ldr	r1, [pc, #708]	; (8006a98 <HAL_UART_IRQHandler+0x628>)
 80067d4:	400a      	ands	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	f383 8810 	msr	PRIMASK, r3
}
 80067e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8310 	mrs	r3, PRIMASK
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	677b      	str	r3, [r7, #116]	; 0x74
 80067ee:	2301      	movs	r3, #1
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f4:	f383 8810 	msr	PRIMASK, r3
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2101      	movs	r1, #1
 8006806:	438a      	bics	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
 800680a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006816:	f3ef 8310 	mrs	r3, PRIMASK
 800681a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800681c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	673b      	str	r3, [r7, #112]	; 0x70
 8006820:	2301      	movs	r3, #1
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	f383 8810 	msr	PRIMASK, r3
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	438a      	bics	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800683e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	f383 8810 	msr	PRIMASK, r3
}
 8006846:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2288      	movs	r2, #136	; 0x88
 800684c:	2120      	movs	r1, #32
 800684e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006856:	f3ef 8310 	mrs	r3, PRIMASK
 800685a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800685c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006860:	2301      	movs	r3, #1
 8006862:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006866:	f383 8810 	msr	PRIMASK, r3
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2110      	movs	r1, #16
 8006878:	438a      	bics	r2, r1
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006882:	f383 8810 	msr	PRIMASK, r3
}
 8006886:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800688c:	0018      	movs	r0, r3
 800688e:	f7fe f9a3 	bl	8004bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	225c      	movs	r2, #92	; 0x5c
 8006896:	5a9a      	ldrh	r2, [r3, r2]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	215e      	movs	r1, #94	; 0x5e
 800689c:	5a5b      	ldrh	r3, [r3, r1]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 f90b 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ae:	e0ea      	b.n	8006a86 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	225c      	movs	r2, #92	; 0x5c
 80068b4:	5a99      	ldrh	r1, [r3, r2]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	225e      	movs	r2, #94	; 0x5e
 80068ba:	5a9b      	ldrh	r3, [r3, r2]
 80068bc:	b29a      	uxth	r2, r3
 80068be:	208e      	movs	r0, #142	; 0x8e
 80068c0:	183b      	adds	r3, r7, r0
 80068c2:	1a8a      	subs	r2, r1, r2
 80068c4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	225e      	movs	r2, #94	; 0x5e
 80068ca:	5a9b      	ldrh	r3, [r3, r2]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d100      	bne.n	80068d4 <HAL_UART_IRQHandler+0x464>
 80068d2:	e0da      	b.n	8006a8a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80068d4:	183b      	adds	r3, r7, r0
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d100      	bne.n	80068de <HAL_UART_IRQHandler+0x46e>
 80068dc:	e0d5      	b.n	8006a8a <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e6:	2488      	movs	r4, #136	; 0x88
 80068e8:	193a      	adds	r2, r7, r4
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	2301      	movs	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f383 8810 	msr	PRIMASK, r3
}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4966      	ldr	r1, [pc, #408]	; (8006a9c <HAL_UART_IRQHandler+0x62c>)
 8006904:	400a      	ands	r2, r1
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	193b      	adds	r3, r7, r4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006916:	f3ef 8310 	mrs	r3, PRIMASK
 800691a:	61bb      	str	r3, [r7, #24]
  return(result);
 800691c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691e:	2484      	movs	r4, #132	; 0x84
 8006920:	193a      	adds	r2, r7, r4
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	2301      	movs	r3, #1
 8006926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f383 8810 	msr	PRIMASK, r3
}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4959      	ldr	r1, [pc, #356]	; (8006aa0 <HAL_UART_IRQHandler+0x630>)
 800693c:	400a      	ands	r2, r1
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	193b      	adds	r3, r7, r4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f383 8810 	msr	PRIMASK, r3
}
 800694c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2288      	movs	r2, #136	; 0x88
 8006952:	2120      	movs	r1, #32
 8006954:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006962:	f3ef 8310 	mrs	r3, PRIMASK
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696a:	2480      	movs	r4, #128	; 0x80
 800696c:	193a      	adds	r2, r7, r4
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	2301      	movs	r3, #1
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	f383 8810 	msr	PRIMASK, r3
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2110      	movs	r1, #16
 8006988:	438a      	bics	r2, r1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	193b      	adds	r3, r7, r4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	f383 8810 	msr	PRIMASK, r3
}
 8006998:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800699a:	183b      	adds	r3, r7, r0
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0011      	movs	r1, r2
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 f88e 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069a8:	e06f      	b.n	8006a8a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069aa:	23a4      	movs	r3, #164	; 0xa4
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	035b      	lsls	r3, r3, #13
 80069b4:	4013      	ands	r3, r2
 80069b6:	d010      	beq.n	80069da <HAL_UART_IRQHandler+0x56a>
 80069b8:	239c      	movs	r3, #156	; 0x9c
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	; 0x80
 80069c0:	03db      	lsls	r3, r3, #15
 80069c2:	4013      	ands	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	0352      	lsls	r2, r2, #13
 80069ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f001 f81a 	bl	8007a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069d8:	e05a      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069da:	23a4      	movs	r3, #164	; 0xa4
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	4013      	ands	r3, r2
 80069e4:	d016      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069e6:	23a0      	movs	r3, #160	; 0xa0
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2280      	movs	r2, #128	; 0x80
 80069ee:	4013      	ands	r3, r2
 80069f0:	d106      	bne.n	8006a00 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069f2:	239c      	movs	r3, #156	; 0x9c
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	4013      	ands	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d042      	beq.n	8006a8e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	0010      	movs	r0, r2
 8006a10:	4798      	blx	r3
    }
    return;
 8006a12:	e03c      	b.n	8006a8e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a14:	23a4      	movs	r3, #164	; 0xa4
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d00a      	beq.n	8006a36 <HAL_UART_IRQHandler+0x5c6>
 8006a20:	23a0      	movs	r3, #160	; 0xa0
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f000 ffc0 	bl	80079b4 <UART_EndTransmit_IT>
    return;
 8006a34:	e02c      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a36:	23a4      	movs	r3, #164	; 0xa4
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	4013      	ands	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <HAL_UART_IRQHandler+0x5ec>
 8006a44:	23a0      	movs	r3, #160	; 0xa0
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	05db      	lsls	r3, r3, #23
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 ffe9 	bl	8007a2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a5a:	e019      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a5c:	23a4      	movs	r3, #164	; 0xa4
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	045b      	lsls	r3, r3, #17
 8006a66:	4013      	ands	r3, r2
 8006a68:	d012      	beq.n	8006a90 <HAL_UART_IRQHandler+0x620>
 8006a6a:	23a0      	movs	r3, #160	; 0xa0
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da0d      	bge.n	8006a90 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 ffd0 	bl	8007a1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a7c:	e008      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
      return;
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	e006      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
    return;
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	e004      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
      return;
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	e002      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
      return;
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	e000      	b.n	8006a90 <HAL_UART_IRQHandler+0x620>
    return;
 8006a8e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b02a      	add	sp, #168	; 0xa8
 8006a94:	bdb0      	pop	{r4, r5, r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	fffffeff 	.word	0xfffffeff
 8006a9c:	fffffedf 	.word	0xfffffedf
 8006aa0:	effffffe 	.word	0xeffffffe

08006aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	000a      	movs	r2, r1
 8006ace:	1cbb      	adds	r3, r7, #2
 8006ad0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006adc:	b5b0      	push	{r4, r5, r7, lr}
 8006ade:	b090      	sub	sp, #64	; 0x40
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae4:	231a      	movs	r3, #26
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	4694      	mov	ip, r2
 8006aea:	44bc      	add	ip, r7
 8006aec:	4463      	add	r3, ip
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4ac1      	ldr	r2, [pc, #772]	; (8006e18 <UART_SetConfig+0x33c>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	0019      	movs	r1, r3
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4abd      	ldr	r2, [pc, #756]	; (8006e1c <UART_SetConfig+0x340>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	68d9      	ldr	r1, [r3, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	0003      	movs	r3, r0
 8006b36:	430b      	orrs	r3, r1
 8006b38:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4ab6      	ldr	r2, [pc, #728]	; (8006e20 <UART_SetConfig+0x344>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <UART_SetConfig+0x82>
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4ab5      	ldr	r2, [pc, #724]	; (8006e24 <UART_SetConfig+0x348>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4ab0      	ldr	r2, [pc, #704]	; (8006e28 <UART_SetConfig+0x34c>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	430b      	orrs	r3, r1
 8006b72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	4393      	bics	r3, r2
 8006b7e:	0018      	movs	r0, r3
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	0003      	movs	r3, r0
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4aa6      	ldr	r2, [pc, #664]	; (8006e2c <UART_SetConfig+0x350>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d136      	bne.n	8006c06 <UART_SetConfig+0x12a>
 8006b98:	4ba5      	ldr	r3, [pc, #660]	; (8006e30 <UART_SetConfig+0x354>)
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d020      	beq.n	8006be6 <UART_SetConfig+0x10a>
 8006ba4:	d827      	bhi.n	8006bf6 <UART_SetConfig+0x11a>
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d00d      	beq.n	8006bc6 <UART_SetConfig+0xea>
 8006baa:	d824      	bhi.n	8006bf6 <UART_SetConfig+0x11a>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <UART_SetConfig+0xda>
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d010      	beq.n	8006bd6 <UART_SetConfig+0xfa>
 8006bb4:	e01f      	b.n	8006bf6 <UART_SetConfig+0x11a>
 8006bb6:	231b      	movs	r3, #27
 8006bb8:	2220      	movs	r2, #32
 8006bba:	4694      	mov	ip, r2
 8006bbc:	44bc      	add	ip, r7
 8006bbe:	4463      	add	r3, ip
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e16f      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006bc6:	231b      	movs	r3, #27
 8006bc8:	2220      	movs	r2, #32
 8006bca:	4694      	mov	ip, r2
 8006bcc:	44bc      	add	ip, r7
 8006bce:	4463      	add	r3, ip
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	e167      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006bd6:	231b      	movs	r3, #27
 8006bd8:	2220      	movs	r2, #32
 8006bda:	4694      	mov	ip, r2
 8006bdc:	44bc      	add	ip, r7
 8006bde:	4463      	add	r3, ip
 8006be0:	2204      	movs	r2, #4
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e15f      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006be6:	231b      	movs	r3, #27
 8006be8:	2220      	movs	r2, #32
 8006bea:	4694      	mov	ip, r2
 8006bec:	44bc      	add	ip, r7
 8006bee:	4463      	add	r3, ip
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	e157      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006bf6:	231b      	movs	r3, #27
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	44bc      	add	ip, r7
 8006bfe:	4463      	add	r3, ip
 8006c00:	2210      	movs	r2, #16
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e14f      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a8a      	ldr	r2, [pc, #552]	; (8006e34 <UART_SetConfig+0x358>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d136      	bne.n	8006c7e <UART_SetConfig+0x1a2>
 8006c10:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <UART_SetConfig+0x354>)
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	220c      	movs	r2, #12
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b0c      	cmp	r3, #12
 8006c1a:	d020      	beq.n	8006c5e <UART_SetConfig+0x182>
 8006c1c:	d827      	bhi.n	8006c6e <UART_SetConfig+0x192>
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d00d      	beq.n	8006c3e <UART_SetConfig+0x162>
 8006c22:	d824      	bhi.n	8006c6e <UART_SetConfig+0x192>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <UART_SetConfig+0x152>
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d010      	beq.n	8006c4e <UART_SetConfig+0x172>
 8006c2c:	e01f      	b.n	8006c6e <UART_SetConfig+0x192>
 8006c2e:	231b      	movs	r3, #27
 8006c30:	2220      	movs	r2, #32
 8006c32:	4694      	mov	ip, r2
 8006c34:	44bc      	add	ip, r7
 8006c36:	4463      	add	r3, ip
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e133      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c3e:	231b      	movs	r3, #27
 8006c40:	2220      	movs	r2, #32
 8006c42:	4694      	mov	ip, r2
 8006c44:	44bc      	add	ip, r7
 8006c46:	4463      	add	r3, ip
 8006c48:	2202      	movs	r2, #2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e12b      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c4e:	231b      	movs	r3, #27
 8006c50:	2220      	movs	r2, #32
 8006c52:	4694      	mov	ip, r2
 8006c54:	44bc      	add	ip, r7
 8006c56:	4463      	add	r3, ip
 8006c58:	2204      	movs	r2, #4
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e123      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c5e:	231b      	movs	r3, #27
 8006c60:	2220      	movs	r2, #32
 8006c62:	4694      	mov	ip, r2
 8006c64:	44bc      	add	ip, r7
 8006c66:	4463      	add	r3, ip
 8006c68:	2208      	movs	r2, #8
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e11b      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c6e:	231b      	movs	r3, #27
 8006c70:	2220      	movs	r2, #32
 8006c72:	4694      	mov	ip, r2
 8006c74:	44bc      	add	ip, r7
 8006c76:	4463      	add	r3, ip
 8006c78:	2210      	movs	r2, #16
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e113      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a6d      	ldr	r2, [pc, #436]	; (8006e38 <UART_SetConfig+0x35c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d136      	bne.n	8006cf6 <UART_SetConfig+0x21a>
 8006c88:	4b69      	ldr	r3, [pc, #420]	; (8006e30 <UART_SetConfig+0x354>)
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	2230      	movs	r2, #48	; 0x30
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2b30      	cmp	r3, #48	; 0x30
 8006c92:	d020      	beq.n	8006cd6 <UART_SetConfig+0x1fa>
 8006c94:	d827      	bhi.n	8006ce6 <UART_SetConfig+0x20a>
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d00d      	beq.n	8006cb6 <UART_SetConfig+0x1da>
 8006c9a:	d824      	bhi.n	8006ce6 <UART_SetConfig+0x20a>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <UART_SetConfig+0x1ca>
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d010      	beq.n	8006cc6 <UART_SetConfig+0x1ea>
 8006ca4:	e01f      	b.n	8006ce6 <UART_SetConfig+0x20a>
 8006ca6:	231b      	movs	r3, #27
 8006ca8:	2220      	movs	r2, #32
 8006caa:	4694      	mov	ip, r2
 8006cac:	44bc      	add	ip, r7
 8006cae:	4463      	add	r3, ip
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e0f7      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006cb6:	231b      	movs	r3, #27
 8006cb8:	2220      	movs	r2, #32
 8006cba:	4694      	mov	ip, r2
 8006cbc:	44bc      	add	ip, r7
 8006cbe:	4463      	add	r3, ip
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e0ef      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006cc6:	231b      	movs	r3, #27
 8006cc8:	2220      	movs	r2, #32
 8006cca:	4694      	mov	ip, r2
 8006ccc:	44bc      	add	ip, r7
 8006cce:	4463      	add	r3, ip
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e0e7      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006cd6:	231b      	movs	r3, #27
 8006cd8:	2220      	movs	r2, #32
 8006cda:	4694      	mov	ip, r2
 8006cdc:	44bc      	add	ip, r7
 8006cde:	4463      	add	r3, ip
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e0df      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006ce6:	231b      	movs	r3, #27
 8006ce8:	2220      	movs	r2, #32
 8006cea:	4694      	mov	ip, r2
 8006cec:	44bc      	add	ip, r7
 8006cee:	4463      	add	r3, ip
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e0d7      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a50      	ldr	r2, [pc, #320]	; (8006e3c <UART_SetConfig+0x360>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d107      	bne.n	8006d10 <UART_SetConfig+0x234>
 8006d00:	231b      	movs	r3, #27
 8006d02:	2220      	movs	r2, #32
 8006d04:	4694      	mov	ip, r2
 8006d06:	44bc      	add	ip, r7
 8006d08:	4463      	add	r3, ip
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e0ca      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a4a      	ldr	r2, [pc, #296]	; (8006e40 <UART_SetConfig+0x364>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d107      	bne.n	8006d2a <UART_SetConfig+0x24e>
 8006d1a:	231b      	movs	r3, #27
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	4694      	mov	ip, r2
 8006d20:	44bc      	add	ip, r7
 8006d22:	4463      	add	r3, ip
 8006d24:	2200      	movs	r2, #0
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e0bd      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a45      	ldr	r2, [pc, #276]	; (8006e44 <UART_SetConfig+0x368>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d107      	bne.n	8006d44 <UART_SetConfig+0x268>
 8006d34:	231b      	movs	r3, #27
 8006d36:	2220      	movs	r2, #32
 8006d38:	4694      	mov	ip, r2
 8006d3a:	44bc      	add	ip, r7
 8006d3c:	4463      	add	r3, ip
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e0b0      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <UART_SetConfig+0x344>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d143      	bne.n	8006dd6 <UART_SetConfig+0x2fa>
 8006d4e:	4b38      	ldr	r3, [pc, #224]	; (8006e30 <UART_SetConfig+0x354>)
 8006d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d52:	23c0      	movs	r3, #192	; 0xc0
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	4013      	ands	r3, r2
 8006d58:	22c0      	movs	r2, #192	; 0xc0
 8006d5a:	0112      	lsls	r2, r2, #4
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d02a      	beq.n	8006db6 <UART_SetConfig+0x2da>
 8006d60:	22c0      	movs	r2, #192	; 0xc0
 8006d62:	0112      	lsls	r2, r2, #4
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d82e      	bhi.n	8006dc6 <UART_SetConfig+0x2ea>
 8006d68:	2280      	movs	r2, #128	; 0x80
 8006d6a:	0112      	lsls	r2, r2, #4
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d012      	beq.n	8006d96 <UART_SetConfig+0x2ba>
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	0112      	lsls	r2, r2, #4
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d826      	bhi.n	8006dc6 <UART_SetConfig+0x2ea>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <UART_SetConfig+0x2aa>
 8006d7c:	2280      	movs	r2, #128	; 0x80
 8006d7e:	00d2      	lsls	r2, r2, #3
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d010      	beq.n	8006da6 <UART_SetConfig+0x2ca>
 8006d84:	e01f      	b.n	8006dc6 <UART_SetConfig+0x2ea>
 8006d86:	231b      	movs	r3, #27
 8006d88:	2220      	movs	r2, #32
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	44bc      	add	ip, r7
 8006d8e:	4463      	add	r3, ip
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e087      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006d96:	231b      	movs	r3, #27
 8006d98:	2220      	movs	r2, #32
 8006d9a:	4694      	mov	ip, r2
 8006d9c:	44bc      	add	ip, r7
 8006d9e:	4463      	add	r3, ip
 8006da0:	2202      	movs	r2, #2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e07f      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006da6:	231b      	movs	r3, #27
 8006da8:	2220      	movs	r2, #32
 8006daa:	4694      	mov	ip, r2
 8006dac:	44bc      	add	ip, r7
 8006dae:	4463      	add	r3, ip
 8006db0:	2204      	movs	r2, #4
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e077      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006db6:	231b      	movs	r3, #27
 8006db8:	2220      	movs	r2, #32
 8006dba:	4694      	mov	ip, r2
 8006dbc:	44bc      	add	ip, r7
 8006dbe:	4463      	add	r3, ip
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e06f      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006dc6:	231b      	movs	r3, #27
 8006dc8:	2220      	movs	r2, #32
 8006dca:	4694      	mov	ip, r2
 8006dcc:	44bc      	add	ip, r7
 8006dce:	4463      	add	r3, ip
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	e067      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <UART_SetConfig+0x348>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d15b      	bne.n	8006e98 <UART_SetConfig+0x3bc>
 8006de0:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <UART_SetConfig+0x354>)
 8006de2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de4:	23c0      	movs	r3, #192	; 0xc0
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4013      	ands	r3, r2
 8006dea:	22c0      	movs	r2, #192	; 0xc0
 8006dec:	0092      	lsls	r2, r2, #2
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d042      	beq.n	8006e78 <UART_SetConfig+0x39c>
 8006df2:	22c0      	movs	r2, #192	; 0xc0
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d846      	bhi.n	8006e88 <UART_SetConfig+0x3ac>
 8006dfa:	2280      	movs	r2, #128	; 0x80
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d02a      	beq.n	8006e58 <UART_SetConfig+0x37c>
 8006e02:	2280      	movs	r2, #128	; 0x80
 8006e04:	0092      	lsls	r2, r2, #2
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d83e      	bhi.n	8006e88 <UART_SetConfig+0x3ac>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01c      	beq.n	8006e48 <UART_SetConfig+0x36c>
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	0052      	lsls	r2, r2, #1
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d028      	beq.n	8006e68 <UART_SetConfig+0x38c>
 8006e16:	e037      	b.n	8006e88 <UART_SetConfig+0x3ac>
 8006e18:	cfff69f3 	.word	0xcfff69f3
 8006e1c:	ffffcfff 	.word	0xffffcfff
 8006e20:	40008000 	.word	0x40008000
 8006e24:	40008400 	.word	0x40008400
 8006e28:	11fff4ff 	.word	0x11fff4ff
 8006e2c:	40013800 	.word	0x40013800
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40004400 	.word	0x40004400
 8006e38:	40004800 	.word	0x40004800
 8006e3c:	40004c00 	.word	0x40004c00
 8006e40:	40005000 	.word	0x40005000
 8006e44:	40013c00 	.word	0x40013c00
 8006e48:	231b      	movs	r3, #27
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	4694      	mov	ip, r2
 8006e4e:	44bc      	add	ip, r7
 8006e50:	4463      	add	r3, ip
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e026      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006e58:	231b      	movs	r3, #27
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	4694      	mov	ip, r2
 8006e5e:	44bc      	add	ip, r7
 8006e60:	4463      	add	r3, ip
 8006e62:	2202      	movs	r2, #2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e01e      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006e68:	231b      	movs	r3, #27
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	4694      	mov	ip, r2
 8006e6e:	44bc      	add	ip, r7
 8006e70:	4463      	add	r3, ip
 8006e72:	2204      	movs	r2, #4
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e016      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006e78:	231b      	movs	r3, #27
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	4694      	mov	ip, r2
 8006e7e:	44bc      	add	ip, r7
 8006e80:	4463      	add	r3, ip
 8006e82:	2208      	movs	r2, #8
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e00e      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006e88:	231b      	movs	r3, #27
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	4694      	mov	ip, r2
 8006e8e:	44bc      	add	ip, r7
 8006e90:	4463      	add	r3, ip
 8006e92:	2210      	movs	r2, #16
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e006      	b.n	8006ea6 <UART_SetConfig+0x3ca>
 8006e98:	231b      	movs	r3, #27
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	4694      	mov	ip, r2
 8006e9e:	44bc      	add	ip, r7
 8006ea0:	4463      	add	r3, ip
 8006ea2:	2210      	movs	r2, #16
 8006ea4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4ab8      	ldr	r2, [pc, #736]	; (800718c <UART_SetConfig+0x6b0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d005      	beq.n	8006ebc <UART_SetConfig+0x3e0>
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4ab6      	ldr	r2, [pc, #728]	; (8007190 <UART_SetConfig+0x6b4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d000      	beq.n	8006ebc <UART_SetConfig+0x3e0>
 8006eba:	e097      	b.n	8006fec <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ebc:	231b      	movs	r3, #27
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	4694      	mov	ip, r2
 8006ec2:	44bc      	add	ip, r7
 8006ec4:	4463      	add	r3, ip
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d015      	beq.n	8006ef8 <UART_SetConfig+0x41c>
 8006ecc:	dc18      	bgt.n	8006f00 <UART_SetConfig+0x424>
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d00d      	beq.n	8006eee <UART_SetConfig+0x412>
 8006ed2:	dc15      	bgt.n	8006f00 <UART_SetConfig+0x424>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <UART_SetConfig+0x402>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d005      	beq.n	8006ee8 <UART_SetConfig+0x40c>
 8006edc:	e010      	b.n	8006f00 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ede:	f7fe ff63 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee6:	e015      	b.n	8006f14 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee8:	4baa      	ldr	r3, [pc, #680]	; (8007194 <UART_SetConfig+0x6b8>)
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eec:	e012      	b.n	8006f14 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eee:	f7fe fecf 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ef6:	e00d      	b.n	8006f14 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006efe:	e009      	b.n	8006f14 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f04:	231a      	movs	r3, #26
 8006f06:	2220      	movs	r2, #32
 8006f08:	4694      	mov	ip, r2
 8006f0a:	44bc      	add	ip, r7
 8006f0c:	4463      	add	r3, ip
 8006f0e:	2201      	movs	r2, #1
 8006f10:	701a      	strb	r2, [r3, #0]
        break;
 8006f12:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d100      	bne.n	8006f1c <UART_SetConfig+0x440>
 8006f1a:	e146      	b.n	80071aa <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f20:	4b9d      	ldr	r3, [pc, #628]	; (8007198 <UART_SetConfig+0x6bc>)
 8006f22:	0052      	lsls	r2, r2, #1
 8006f24:	5ad3      	ldrh	r3, [r2, r3]
 8006f26:	0019      	movs	r1, r3
 8006f28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f2a:	f7f9 f907 	bl	800013c <__udivsi3>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	0013      	movs	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d305      	bcc.n	8006f4e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d907      	bls.n	8006f5e <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8006f4e:	231a      	movs	r3, #26
 8006f50:	2220      	movs	r2, #32
 8006f52:	4694      	mov	ip, r2
 8006f54:	44bc      	add	ip, r7
 8006f56:	4463      	add	r3, ip
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e045      	b.n	8006fea <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <UART_SetConfig+0x6bc>)
 8006f6c:	0052      	lsls	r2, r2, #1
 8006f6e:	5ad3      	ldrh	r3, [r2, r3]
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	f7f9 fa91 	bl	80004a4 <__aeabi_uldivmod>
 8006f82:	0002      	movs	r2, r0
 8006f84:	000b      	movs	r3, r1
 8006f86:	0e11      	lsrs	r1, r2, #24
 8006f88:	021d      	lsls	r5, r3, #8
 8006f8a:	430d      	orrs	r5, r1
 8006f8c:	0214      	lsls	r4, r2, #8
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	1900      	adds	r0, r0, r4
 8006fa0:	4169      	adcs	r1, r5
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f7f9 fa78 	bl	80004a4 <__aeabi_uldivmod>
 8006fb4:	0002      	movs	r2, r0
 8006fb6:	000b      	movs	r3, r1
 8006fb8:	0013      	movs	r3, r2
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbe:	23c0      	movs	r3, #192	; 0xc0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d309      	bcc.n	8006fda <UART_SetConfig+0x4fe>
 8006fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	035b      	lsls	r3, r3, #13
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d204      	bcs.n	8006fda <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd6:	60da      	str	r2, [r3, #12]
 8006fd8:	e007      	b.n	8006fea <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8006fda:	231a      	movs	r3, #26
 8006fdc:	2220      	movs	r2, #32
 8006fde:	4694      	mov	ip, r2
 8006fe0:	44bc      	add	ip, r7
 8006fe2:	4463      	add	r3, ip
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006fe8:	e0df      	b.n	80071aa <UART_SetConfig+0x6ce>
 8006fea:	e0de      	b.n	80071aa <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d000      	beq.n	8006ffa <UART_SetConfig+0x51e>
 8006ff8:	e074      	b.n	80070e4 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8006ffa:	231b      	movs	r3, #27
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	4694      	mov	ip, r2
 8007000:	44bc      	add	ip, r7
 8007002:	4463      	add	r3, ip
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b08      	cmp	r3, #8
 8007008:	d015      	beq.n	8007036 <UART_SetConfig+0x55a>
 800700a:	dc18      	bgt.n	800703e <UART_SetConfig+0x562>
 800700c:	2b04      	cmp	r3, #4
 800700e:	d00d      	beq.n	800702c <UART_SetConfig+0x550>
 8007010:	dc15      	bgt.n	800703e <UART_SetConfig+0x562>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <UART_SetConfig+0x540>
 8007016:	2b02      	cmp	r3, #2
 8007018:	d005      	beq.n	8007026 <UART_SetConfig+0x54a>
 800701a:	e010      	b.n	800703e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fe fec4 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8007020:	0003      	movs	r3, r0
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007024:	e015      	b.n	8007052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007026:	4b5b      	ldr	r3, [pc, #364]	; (8007194 <UART_SetConfig+0x6b8>)
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800702a:	e012      	b.n	8007052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702c:	f7fe fe30 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8007030:	0003      	movs	r3, r0
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007034:	e00d      	b.n	8007052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007036:	2380      	movs	r3, #128	; 0x80
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007042:	231a      	movs	r3, #26
 8007044:	2220      	movs	r2, #32
 8007046:	4694      	mov	ip, r2
 8007048:	44bc      	add	ip, r7
 800704a:	4463      	add	r3, ip
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
        break;
 8007050:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	2b00      	cmp	r3, #0
 8007056:	d100      	bne.n	800705a <UART_SetConfig+0x57e>
 8007058:	e0a7      	b.n	80071aa <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800705e:	4b4e      	ldr	r3, [pc, #312]	; (8007198 <UART_SetConfig+0x6bc>)
 8007060:	0052      	lsls	r2, r2, #1
 8007062:	5ad3      	ldrh	r3, [r2, r3]
 8007064:	0019      	movs	r1, r3
 8007066:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007068:	f7f9 f868 	bl	800013c <__udivsi3>
 800706c:	0003      	movs	r3, r0
 800706e:	005a      	lsls	r2, r3, #1
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	18d2      	adds	r2, r2, r3
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0019      	movs	r1, r3
 800707e:	0010      	movs	r0, r2
 8007080:	f7f9 f85c 	bl	800013c <__udivsi3>
 8007084:	0003      	movs	r3, r0
 8007086:	b29b      	uxth	r3, r3
 8007088:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b0f      	cmp	r3, #15
 800708e:	d921      	bls.n	80070d4 <UART_SetConfig+0x5f8>
 8007090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	025b      	lsls	r3, r3, #9
 8007096:	429a      	cmp	r2, r3
 8007098:	d21c      	bcs.n	80070d4 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	b29a      	uxth	r2, r3
 800709e:	200e      	movs	r0, #14
 80070a0:	2420      	movs	r4, #32
 80070a2:	193b      	adds	r3, r7, r4
 80070a4:	181b      	adds	r3, r3, r0
 80070a6:	210f      	movs	r1, #15
 80070a8:	438a      	bics	r2, r1
 80070aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2207      	movs	r2, #7
 80070b4:	4013      	ands	r3, r2
 80070b6:	b299      	uxth	r1, r3
 80070b8:	193b      	adds	r3, r7, r4
 80070ba:	181b      	adds	r3, r3, r0
 80070bc:	193a      	adds	r2, r7, r4
 80070be:	1812      	adds	r2, r2, r0
 80070c0:	8812      	ldrh	r2, [r2, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	193a      	adds	r2, r7, r4
 80070cc:	1812      	adds	r2, r2, r0
 80070ce:	8812      	ldrh	r2, [r2, #0]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e06a      	b.n	80071aa <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070d4:	231a      	movs	r3, #26
 80070d6:	2220      	movs	r2, #32
 80070d8:	4694      	mov	ip, r2
 80070da:	44bc      	add	ip, r7
 80070dc:	4463      	add	r3, ip
 80070de:	2201      	movs	r2, #1
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e062      	b.n	80071aa <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070e4:	231b      	movs	r3, #27
 80070e6:	2220      	movs	r2, #32
 80070e8:	4694      	mov	ip, r2
 80070ea:	44bc      	add	ip, r7
 80070ec:	4463      	add	r3, ip
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d015      	beq.n	8007120 <UART_SetConfig+0x644>
 80070f4:	dc18      	bgt.n	8007128 <UART_SetConfig+0x64c>
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d00d      	beq.n	8007116 <UART_SetConfig+0x63a>
 80070fa:	dc15      	bgt.n	8007128 <UART_SetConfig+0x64c>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <UART_SetConfig+0x62a>
 8007100:	2b02      	cmp	r3, #2
 8007102:	d005      	beq.n	8007110 <UART_SetConfig+0x634>
 8007104:	e010      	b.n	8007128 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007106:	f7fe fe4f 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 800710a:	0003      	movs	r3, r0
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800710e:	e015      	b.n	800713c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007110:	4b20      	ldr	r3, [pc, #128]	; (8007194 <UART_SetConfig+0x6b8>)
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007114:	e012      	b.n	800713c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007116:	f7fe fdbb 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 800711a:	0003      	movs	r3, r0
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800711e:	e00d      	b.n	800713c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007126:	e009      	b.n	800713c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800712c:	231a      	movs	r3, #26
 800712e:	2220      	movs	r2, #32
 8007130:	4694      	mov	ip, r2
 8007132:	44bc      	add	ip, r7
 8007134:	4463      	add	r3, ip
 8007136:	2201      	movs	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
        break;
 800713a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	2b00      	cmp	r3, #0
 8007140:	d033      	beq.n	80071aa <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <UART_SetConfig+0x6bc>)
 8007148:	0052      	lsls	r2, r2, #1
 800714a:	5ad3      	ldrh	r3, [r2, r3]
 800714c:	0019      	movs	r1, r3
 800714e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007150:	f7f8 fff4 	bl	800013c <__udivsi3>
 8007154:	0003      	movs	r3, r0
 8007156:	001a      	movs	r2, r3
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	18d2      	adds	r2, r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	0019      	movs	r1, r3
 8007166:	0010      	movs	r0, r2
 8007168:	f7f8 ffe8 	bl	800013c <__udivsi3>
 800716c:	0003      	movs	r3, r0
 800716e:	b29b      	uxth	r3, r3
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d911      	bls.n	800719c <UART_SetConfig+0x6c0>
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	025b      	lsls	r3, r3, #9
 800717e:	429a      	cmp	r2, r3
 8007180:	d20c      	bcs.n	800719c <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	e00e      	b.n	80071aa <UART_SetConfig+0x6ce>
 800718c:	40008000 	.word	0x40008000
 8007190:	40008400 	.word	0x40008400
 8007194:	00f42400 	.word	0x00f42400
 8007198:	0800ad08 	.word	0x0800ad08
      }
      else
      {
        ret = HAL_ERROR;
 800719c:	231a      	movs	r3, #26
 800719e:	2220      	movs	r2, #32
 80071a0:	4694      	mov	ip, r2
 80071a2:	44bc      	add	ip, r7
 80071a4:	4463      	add	r3, ip
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	226a      	movs	r2, #106	; 0x6a
 80071ae:	2101      	movs	r1, #1
 80071b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2268      	movs	r2, #104	; 0x68
 80071b6:	2101      	movs	r1, #1
 80071b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2200      	movs	r2, #0
 80071be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	2200      	movs	r2, #0
 80071c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071c6:	231a      	movs	r3, #26
 80071c8:	2220      	movs	r2, #32
 80071ca:	4694      	mov	ip, r2
 80071cc:	44bc      	add	ip, r7
 80071ce:	4463      	add	r3, ip
 80071d0:	781b      	ldrb	r3, [r3, #0]
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b010      	add	sp, #64	; 0x40
 80071d8:	bdb0      	pop	{r4, r5, r7, pc}
 80071da:	46c0      	nop			; (mov r8, r8)

080071dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	2201      	movs	r2, #1
 80071ea:	4013      	ands	r3, r2
 80071ec:	d00b      	beq.n	8007206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4a4a      	ldr	r2, [pc, #296]	; (8007320 <UART_AdvFeatureConfig+0x144>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	0019      	movs	r1, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	2202      	movs	r2, #2
 800720c:	4013      	ands	r3, r2
 800720e:	d00b      	beq.n	8007228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4a43      	ldr	r2, [pc, #268]	; (8007324 <UART_AdvFeatureConfig+0x148>)
 8007218:	4013      	ands	r3, r2
 800721a:	0019      	movs	r1, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	2204      	movs	r2, #4
 800722e:	4013      	ands	r3, r2
 8007230:	d00b      	beq.n	800724a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a3b      	ldr	r2, [pc, #236]	; (8007328 <UART_AdvFeatureConfig+0x14c>)
 800723a:	4013      	ands	r3, r2
 800723c:	0019      	movs	r1, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	2208      	movs	r2, #8
 8007250:	4013      	ands	r3, r2
 8007252:	d00b      	beq.n	800726c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4a34      	ldr	r2, [pc, #208]	; (800732c <UART_AdvFeatureConfig+0x150>)
 800725c:	4013      	ands	r3, r2
 800725e:	0019      	movs	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	2210      	movs	r2, #16
 8007272:	4013      	ands	r3, r2
 8007274:	d00b      	beq.n	800728e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <UART_AdvFeatureConfig+0x154>)
 800727e:	4013      	ands	r3, r2
 8007280:	0019      	movs	r1, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	2220      	movs	r2, #32
 8007294:	4013      	ands	r3, r2
 8007296:	d00b      	beq.n	80072b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4a25      	ldr	r2, [pc, #148]	; (8007334 <UART_AdvFeatureConfig+0x158>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	0019      	movs	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	2240      	movs	r2, #64	; 0x40
 80072b6:	4013      	ands	r3, r2
 80072b8:	d01d      	beq.n	80072f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <UART_AdvFeatureConfig+0x15c>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	0019      	movs	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072d6:	2380      	movs	r3, #128	; 0x80
 80072d8:	035b      	lsls	r3, r3, #13
 80072da:	429a      	cmp	r2, r3
 80072dc:	d10b      	bne.n	80072f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <UART_AdvFeatureConfig+0x160>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	0019      	movs	r1, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	2280      	movs	r2, #128	; 0x80
 80072fc:	4013      	ands	r3, r2
 80072fe:	d00b      	beq.n	8007318 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <UART_AdvFeatureConfig+0x164>)
 8007308:	4013      	ands	r3, r2
 800730a:	0019      	movs	r1, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }
}
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	46bd      	mov	sp, r7
 800731c:	b002      	add	sp, #8
 800731e:	bd80      	pop	{r7, pc}
 8007320:	fffdffff 	.word	0xfffdffff
 8007324:	fffeffff 	.word	0xfffeffff
 8007328:	fffbffff 	.word	0xfffbffff
 800732c:	ffff7fff 	.word	0xffff7fff
 8007330:	ffffefff 	.word	0xffffefff
 8007334:	ffffdfff 	.word	0xffffdfff
 8007338:	ffefffff 	.word	0xffefffff
 800733c:	ff9fffff 	.word	0xff9fffff
 8007340:	fff7ffff 	.word	0xfff7ffff

08007344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	228c      	movs	r2, #140	; 0x8c
 8007350:	2100      	movs	r1, #0
 8007352:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007354:	f7fc f8f4 	bl	8003540 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2208      	movs	r2, #8
 8007364:	4013      	ands	r3, r2
 8007366:	2b08      	cmp	r3, #8
 8007368:	d10c      	bne.n	8007384 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	0391      	lsls	r1, r2, #14
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <UART_CheckIdleState+0x90>)
 8007374:	9200      	str	r2, [sp, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	f000 f82e 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 800737c:	1e03      	subs	r3, r0, #0
 800737e:	d001      	beq.n	8007384 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e023      	b.n	80073cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2204      	movs	r2, #4
 800738c:	4013      	ands	r3, r2
 800738e:	2b04      	cmp	r3, #4
 8007390:	d10c      	bne.n	80073ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	03d1      	lsls	r1, r2, #15
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <UART_CheckIdleState+0x90>)
 800739c:	9200      	str	r2, [sp, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	f000 f81a 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 80073a4:	1e03      	subs	r3, r0, #0
 80073a6:	d001      	beq.n	80073ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e00f      	b.n	80073cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2284      	movs	r2, #132	; 0x84
 80073b0:	2120      	movs	r1, #32
 80073b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2288      	movs	r2, #136	; 0x88
 80073b8:	2120      	movs	r1, #32
 80073ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2280      	movs	r2, #128	; 0x80
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	0018      	movs	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b004      	add	sp, #16
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	01ffffff 	.word	0x01ffffff

080073d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b094      	sub	sp, #80	; 0x50
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	1dfb      	adds	r3, r7, #7
 80073e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e8:	e0a7      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ec:	3301      	adds	r3, #1
 80073ee:	d100      	bne.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80073f0:	e0a3      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fc f8a5 	bl	8003540 <HAL_GetTick>
 80073f6:	0002      	movs	r2, r0
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <UART_WaitOnFlagUntilTimeout+0x30>
 8007402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007404:	2b00      	cmp	r3, #0
 8007406:	d13f      	bne.n	8007488 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007408:	f3ef 8310 	mrs	r3, PRIMASK
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007410:	647b      	str	r3, [r7, #68]	; 0x44
 8007412:	2301      	movs	r3, #1
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	f383 8810 	msr	PRIMASK, r3
}
 800741c:	46c0      	nop			; (mov r8, r8)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	494e      	ldr	r1, [pc, #312]	; (8007564 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800742a:	400a      	ands	r2, r1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007430:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	f383 8810 	msr	PRIMASK, r3
}
 8007438:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743a:	f3ef 8310 	mrs	r3, PRIMASK
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	643b      	str	r3, [r7, #64]	; 0x40
 8007444:	2301      	movs	r3, #1
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f383 8810 	msr	PRIMASK, r3
}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2101      	movs	r1, #1
 800745c:	438a      	bics	r2, r1
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007466:	f383 8810 	msr	PRIMASK, r3
}
 800746a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2284      	movs	r2, #132	; 0x84
 8007470:	2120      	movs	r1, #32
 8007472:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2288      	movs	r2, #136	; 0x88
 8007478:	2120      	movs	r1, #32
 800747a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2280      	movs	r2, #128	; 0x80
 8007480:	2100      	movs	r1, #0
 8007482:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e069      	b.n	800755c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2204      	movs	r2, #4
 8007490:	4013      	ands	r3, r2
 8007492:	d052      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69da      	ldr	r2, [r3, #28]
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	401a      	ands	r2, r3
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d148      	bne.n	800753a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2280      	movs	r2, #128	; 0x80
 80074ae:	0112      	lsls	r2, r2, #4
 80074b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b2:	f3ef 8310 	mrs	r3, PRIMASK
 80074b6:	613b      	str	r3, [r7, #16]
  return(result);
 80074b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074bc:	2301      	movs	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4924      	ldr	r1, [pc, #144]	; (8007564 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e4:	f3ef 8310 	mrs	r3, PRIMASK
 80074e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80074ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ee:	2301      	movs	r3, #1
 80074f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f383 8810 	msr	PRIMASK, r3
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2101      	movs	r1, #1
 8007506:	438a      	bics	r2, r1
 8007508:	609a      	str	r2, [r3, #8]
 800750a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2284      	movs	r2, #132	; 0x84
 800751a:	2120      	movs	r1, #32
 800751c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2288      	movs	r2, #136	; 0x88
 8007522:	2120      	movs	r1, #32
 8007524:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	228c      	movs	r2, #140	; 0x8c
 800752a:	2120      	movs	r1, #32
 800752c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2280      	movs	r2, #128	; 0x80
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e010      	b.n	800755c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	425a      	negs	r2, r3
 800754a:	4153      	adcs	r3, r2
 800754c:	b2db      	uxtb	r3, r3
 800754e:	001a      	movs	r2, r3
 8007550:	1dfb      	adds	r3, r7, #7
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d100      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0x182>
 8007558:	e747      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b014      	add	sp, #80	; 0x50
 8007562:	bd80      	pop	{r7, pc}
 8007564:	fffffe5f 	.word	0xfffffe5f

08007568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08e      	sub	sp, #56	; 0x38
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007570:	f3ef 8310 	mrs	r3, PRIMASK
 8007574:	617b      	str	r3, [r7, #20]
  return(result);
 8007576:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
 800757a:	2301      	movs	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f383 8810 	msr	PRIMASK, r3
}
 8007584:	46c0      	nop			; (mov r8, r8)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4926      	ldr	r1, [pc, #152]	; (800762c <UART_EndRxTransfer+0xc4>)
 8007592:	400a      	ands	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f383 8810 	msr	PRIMASK, r3
}
 80075a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a2:	f3ef 8310 	mrs	r3, PRIMASK
 80075a6:	623b      	str	r3, [r7, #32]
  return(result);
 80075a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	2301      	movs	r3, #1
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	f383 8810 	msr	PRIMASK, r3
}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	491b      	ldr	r1, [pc, #108]	; (8007630 <UART_EndRxTransfer+0xc8>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	f383 8810 	msr	PRIMASK, r3
}
 80075d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d118      	bne.n	800760e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075dc:	f3ef 8310 	mrs	r3, PRIMASK
 80075e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e6:	2301      	movs	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f383 8810 	msr	PRIMASK, r3
}
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2110      	movs	r1, #16
 80075fe:	438a      	bics	r2, r1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f383 8810 	msr	PRIMASK, r3
}
 800760c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2288      	movs	r2, #136	; 0x88
 8007612:	2120      	movs	r1, #32
 8007614:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	46bd      	mov	sp, r7
 8007626:	b00e      	add	sp, #56	; 0x38
 8007628:	bd80      	pop	{r7, pc}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	fffffedf 	.word	0xfffffedf
 8007630:	effffffe 	.word	0xeffffffe

08007634 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	225e      	movs	r2, #94	; 0x5e
 8007646:	2100      	movs	r1, #0
 8007648:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2256      	movs	r2, #86	; 0x56
 800764e:	2100      	movs	r1, #0
 8007650:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	0018      	movs	r0, r3
 8007656:	f7ff fa2d 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	46bd      	mov	sp, r7
 800765e:	b004      	add	sp, #16
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08a      	sub	sp, #40	; 0x28
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2284      	movs	r2, #132	; 0x84
 800766e:	589b      	ldr	r3, [r3, r2]
 8007670:	2b21      	cmp	r3, #33	; 0x21
 8007672:	d14c      	bne.n	800770e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2256      	movs	r2, #86	; 0x56
 8007678:	5a9b      	ldrh	r3, [r3, r2]
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d132      	bne.n	80076e6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007680:	f3ef 8310 	mrs	r3, PRIMASK
 8007684:	60bb      	str	r3, [r7, #8]
  return(result);
 8007686:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
 800768a:	2301      	movs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f383 8810 	msr	PRIMASK, r3
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2180      	movs	r1, #128	; 0x80
 80076a2:	438a      	bics	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f383 8810 	msr	PRIMASK, r3
}
 80076b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b2:	f3ef 8310 	mrs	r3, PRIMASK
 80076b6:	617b      	str	r3, [r7, #20]
  return(result);
 80076b8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ba:	623b      	str	r3, [r7, #32]
 80076bc:	2301      	movs	r3, #1
 80076be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f383 8810 	msr	PRIMASK, r3
}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2140      	movs	r1, #64	; 0x40
 80076d4:	430a      	orrs	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f383 8810 	msr	PRIMASK, r3
}
 80076e2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80076e4:	e013      	b.n	800770e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2256      	movs	r2, #86	; 0x56
 8007700:	5a9b      	ldrh	r3, [r3, r2]
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b299      	uxth	r1, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2256      	movs	r2, #86	; 0x56
 800770c:	5299      	strh	r1, [r3, r2]
}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b00a      	add	sp, #40	; 0x28
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b08c      	sub	sp, #48	; 0x30
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2284      	movs	r2, #132	; 0x84
 8007722:	589b      	ldr	r3, [r3, r2]
 8007724:	2b21      	cmp	r3, #33	; 0x21
 8007726:	d151      	bne.n	80077cc <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2256      	movs	r2, #86	; 0x56
 800772c:	5a9b      	ldrh	r3, [r3, r2]
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d132      	bne.n	800779a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007734:	f3ef 8310 	mrs	r3, PRIMASK
 8007738:	60fb      	str	r3, [r7, #12]
  return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
 800773e:	2301      	movs	r3, #1
 8007740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2180      	movs	r1, #128	; 0x80
 8007756:	438a      	bics	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007766:	f3ef 8310 	mrs	r3, PRIMASK
 800776a:	61bb      	str	r3, [r7, #24]
  return(result);
 800776c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
 8007770:	2301      	movs	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f383 8810 	msr	PRIMASK, r3
}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2140      	movs	r1, #64	; 0x40
 8007788:	430a      	orrs	r2, r1
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	f383 8810 	msr	PRIMASK, r3
}
 8007796:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007798:	e018      	b.n	80077cc <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	001a      	movs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	05d2      	lsls	r2, r2, #23
 80077ac:	0dd2      	lsrs	r2, r2, #23
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2256      	movs	r2, #86	; 0x56
 80077be:	5a9b      	ldrh	r3, [r3, r2]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b299      	uxth	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2256      	movs	r2, #86	; 0x56
 80077ca:	5299      	strh	r1, [r3, r2]
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b00c      	add	sp, #48	; 0x30
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2284      	movs	r2, #132	; 0x84
 80077e0:	589b      	ldr	r3, [r3, r2]
 80077e2:	2b21      	cmp	r3, #33	; 0x21
 80077e4:	d165      	bne.n	80078b2 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077e6:	232e      	movs	r3, #46	; 0x2e
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	216a      	movs	r1, #106	; 0x6a
 80077ee:	5a52      	ldrh	r2, [r2, r1]
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e059      	b.n	80078a8 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2256      	movs	r2, #86	; 0x56
 80077f8:	5a9b      	ldrh	r3, [r3, r2]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d133      	bne.n	8007868 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007800:	f3ef 8310 	mrs	r3, PRIMASK
 8007804:	60fb      	str	r3, [r7, #12]
  return(result);
 8007806:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
 800780a:	2301      	movs	r3, #1
 800780c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f383 8810 	msr	PRIMASK, r3
}
 8007814:	46c0      	nop			; (mov r8, r8)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4926      	ldr	r1, [pc, #152]	; (80078bc <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8007822:	400a      	ands	r2, r1
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f383 8810 	msr	PRIMASK, r3
}
 8007830:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	61bb      	str	r3, [r7, #24]
  return(result);
 8007838:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
 800783c:	2301      	movs	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2140      	movs	r1, #64	; 0x40
 8007854:	430a      	orrs	r2, r1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8007864:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8007866:	e024      	b.n	80078b2 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	4013      	ands	r3, r2
 8007872:	d013      	beq.n	800789c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2256      	movs	r2, #86	; 0x56
 800788e:	5a9b      	ldrh	r3, [r3, r2]
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b299      	uxth	r1, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2256      	movs	r2, #86	; 0x56
 800789a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800789c:	212e      	movs	r1, #46	; 0x2e
 800789e:	187b      	adds	r3, r7, r1
 80078a0:	881a      	ldrh	r2, [r3, #0]
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	3a01      	subs	r2, #1
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	232e      	movs	r3, #46	; 0x2e
 80078aa:	18fb      	adds	r3, r7, r3
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1a0      	bne.n	80077f4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b00c      	add	sp, #48	; 0x30
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	ff7fffff 	.word	0xff7fffff

080078c0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08c      	sub	sp, #48	; 0x30
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2284      	movs	r2, #132	; 0x84
 80078cc:	589b      	ldr	r3, [r3, r2]
 80078ce:	2b21      	cmp	r3, #33	; 0x21
 80078d0:	d16a      	bne.n	80079a8 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80078d2:	232e      	movs	r3, #46	; 0x2e
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	216a      	movs	r1, #106	; 0x6a
 80078da:	5a52      	ldrh	r2, [r2, r1]
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e05e      	b.n	800799e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2256      	movs	r2, #86	; 0x56
 80078e4:	5a9b      	ldrh	r3, [r3, r2]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d133      	bne.n	8007954 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ec:	f3ef 8310 	mrs	r3, PRIMASK
 80078f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80078f2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	2301      	movs	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f383 8810 	msr	PRIMASK, r3
}
 8007900:	46c0      	nop			; (mov r8, r8)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4928      	ldr	r1, [pc, #160]	; (80079b0 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800790e:	400a      	ands	r2, r1
 8007910:	609a      	str	r2, [r3, #8]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f383 8810 	msr	PRIMASK, r3
}
 800791c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791e:	f3ef 8310 	mrs	r3, PRIMASK
 8007922:	617b      	str	r3, [r7, #20]
  return(result);
 8007924:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	2301      	movs	r3, #1
 800792a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f383 8810 	msr	PRIMASK, r3
}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2140      	movs	r1, #64	; 0x40
 8007940:	430a      	orrs	r2, r1
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f383 8810 	msr	PRIMASK, r3
}
 800794e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8007950:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8007952:	e029      	b.n	80079a8 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	2280      	movs	r2, #128	; 0x80
 800795c:	4013      	ands	r3, r2
 800795e:	d018      	beq.n	8007992 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	001a      	movs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	05d2      	lsls	r2, r2, #23
 8007972:	0dd2      	lsrs	r2, r2, #23
 8007974:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	1c9a      	adds	r2, r3, #2
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2256      	movs	r2, #86	; 0x56
 8007984:	5a9b      	ldrh	r3, [r3, r2]
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b299      	uxth	r1, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2256      	movs	r2, #86	; 0x56
 8007990:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007992:	212e      	movs	r1, #46	; 0x2e
 8007994:	187b      	adds	r3, r7, r1
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	187b      	adds	r3, r7, r1
 800799a:	3a01      	subs	r2, #1
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	232e      	movs	r3, #46	; 0x2e
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d19b      	bne.n	80078e0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b00c      	add	sp, #48	; 0x30
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	ff7fffff 	.word	0xff7fffff

080079b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079bc:	f3ef 8310 	mrs	r3, PRIMASK
 80079c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80079c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	2301      	movs	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f383 8810 	msr	PRIMASK, r3
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2140      	movs	r1, #64	; 0x40
 80079de:	438a      	bics	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f383 8810 	msr	PRIMASK, r3
}
 80079ec:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2284      	movs	r2, #132	; 0x84
 80079f2:	2120      	movs	r1, #32
 80079f4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7ff f850 	bl	8006aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a04:	46c0      	nop			; (mov r8, r8)
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b006      	add	sp, #24
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a14:	46c0      	nop			; (mov r8, r8)
 8007a16:	46bd      	mov	sp, r7
 8007a18:	b002      	add	sp, #8
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a24:	46c0      	nop			; (mov r8, r8)
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b002      	add	sp, #8
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a34:	46c0      	nop			; (mov r8, r8)
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b002      	add	sp, #8
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	5c9b      	ldrb	r3, [r3, r2]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e027      	b.n	8007aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	2101      	movs	r1, #1
 8007a58:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2284      	movs	r2, #132	; 0x84
 8007a5e:	2124      	movs	r1, #36	; 0x24
 8007a60:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2101      	movs	r1, #1
 8007a76:	438a      	bics	r2, r1
 8007a78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <HAL_UARTEx_DisableFifoMode+0x70>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2284      	movs	r2, #132	; 0x84
 8007a94:	2120      	movs	r1, #32
 8007a96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2280      	movs	r2, #128	; 0x80
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b004      	add	sp, #16
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	dfffffff 	.word	0xdfffffff

08007ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2280      	movs	r2, #128	; 0x80
 8007abe:	5c9b      	ldrb	r3, [r3, r2]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e02e      	b.n	8007b26 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2280      	movs	r2, #128	; 0x80
 8007acc:	2101      	movs	r1, #1
 8007ace:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2284      	movs	r2, #132	; 0x84
 8007ad4:	2124      	movs	r1, #36	; 0x24
 8007ad6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	438a      	bics	r2, r1
 8007aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	08d9      	lsrs	r1, r3, #3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	0018      	movs	r0, r3
 8007b08:	f000 f854 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2284      	movs	r2, #132	; 0x84
 8007b18:	2120      	movs	r1, #32
 8007b1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2280      	movs	r2, #128	; 0x80
 8007b20:	2100      	movs	r1, #0
 8007b22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b004      	add	sp, #16
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2280      	movs	r2, #128	; 0x80
 8007b3e:	5c9b      	ldrb	r3, [r3, r2]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e02f      	b.n	8007ba8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2280      	movs	r2, #128	; 0x80
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2284      	movs	r2, #132	; 0x84
 8007b54:	2124      	movs	r1, #36	; 0x24
 8007b56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	438a      	bics	r2, r1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4a0e      	ldr	r2, [pc, #56]	; (8007bb0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	0019      	movs	r1, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	0018      	movs	r0, r3
 8007b8a:	f000 f813 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2284      	movs	r2, #132	; 0x84
 8007b9a:	2120      	movs	r1, #32
 8007b9c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2280      	movs	r2, #128	; 0x80
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	0018      	movs	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b004      	add	sp, #16
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	f1ffffff 	.word	0xf1ffffff

08007bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	226a      	movs	r2, #106	; 0x6a
 8007bc8:	2101      	movs	r1, #1
 8007bca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2268      	movs	r2, #104	; 0x68
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd4:	e043      	b.n	8007c5e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd6:	260f      	movs	r6, #15
 8007bd8:	19bb      	adds	r3, r7, r6
 8007bda:	2208      	movs	r2, #8
 8007bdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bde:	200e      	movs	r0, #14
 8007be0:	183b      	adds	r3, r7, r0
 8007be2:	2208      	movs	r2, #8
 8007be4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	0e5b      	lsrs	r3, r3, #25
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	240d      	movs	r4, #13
 8007bf2:	193b      	adds	r3, r7, r4
 8007bf4:	2107      	movs	r1, #7
 8007bf6:	400a      	ands	r2, r1
 8007bf8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	0f5b      	lsrs	r3, r3, #29
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	250c      	movs	r5, #12
 8007c06:	197b      	adds	r3, r7, r5
 8007c08:	2107      	movs	r1, #7
 8007c0a:	400a      	ands	r2, r1
 8007c0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c0e:	183b      	adds	r3, r7, r0
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	197a      	adds	r2, r7, r5
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	4914      	ldr	r1, [pc, #80]	; (8007c68 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c18:	5c8a      	ldrb	r2, [r1, r2]
 8007c1a:	435a      	muls	r2, r3
 8007c1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c1e:	197b      	adds	r3, r7, r5
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c26:	0019      	movs	r1, r3
 8007c28:	f7f8 fb12 	bl	8000250 <__divsi3>
 8007c2c:	0003      	movs	r3, r0
 8007c2e:	b299      	uxth	r1, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	226a      	movs	r2, #106	; 0x6a
 8007c34:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c36:	19bb      	adds	r3, r7, r6
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	193a      	adds	r2, r7, r4
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	490a      	ldr	r1, [pc, #40]	; (8007c68 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c40:	5c8a      	ldrb	r2, [r1, r2]
 8007c42:	435a      	muls	r2, r3
 8007c44:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c46:	193b      	adds	r3, r7, r4
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c4e:	0019      	movs	r1, r3
 8007c50:	f7f8 fafe 	bl	8000250 <__divsi3>
 8007c54:	0003      	movs	r3, r0
 8007c56:	b299      	uxth	r1, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2268      	movs	r2, #104	; 0x68
 8007c5c:	5299      	strh	r1, [r3, r2]
}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	46bd      	mov	sp, r7
 8007c62:	b005      	add	sp, #20
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	0800ad20 	.word	0x0800ad20
 8007c6c:	0800ad28 	.word	0x0800ad28

08007c70 <__errno>:
 8007c70:	4b01      	ldr	r3, [pc, #4]	; (8007c78 <__errno+0x8>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	4770      	bx	lr
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <__libc_init_array>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	2600      	movs	r6, #0
 8007c80:	4d0c      	ldr	r5, [pc, #48]	; (8007cb4 <__libc_init_array+0x38>)
 8007c82:	4c0d      	ldr	r4, [pc, #52]	; (8007cb8 <__libc_init_array+0x3c>)
 8007c84:	1b64      	subs	r4, r4, r5
 8007c86:	10a4      	asrs	r4, r4, #2
 8007c88:	42a6      	cmp	r6, r4
 8007c8a:	d109      	bne.n	8007ca0 <__libc_init_array+0x24>
 8007c8c:	2600      	movs	r6, #0
 8007c8e:	f002 ff6d 	bl	800ab6c <_init>
 8007c92:	4d0a      	ldr	r5, [pc, #40]	; (8007cbc <__libc_init_array+0x40>)
 8007c94:	4c0a      	ldr	r4, [pc, #40]	; (8007cc0 <__libc_init_array+0x44>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	42a6      	cmp	r6, r4
 8007c9c:	d105      	bne.n	8007caa <__libc_init_array+0x2e>
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	00b3      	lsls	r3, r6, #2
 8007ca2:	58eb      	ldr	r3, [r5, r3]
 8007ca4:	4798      	blx	r3
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7ee      	b.n	8007c88 <__libc_init_array+0xc>
 8007caa:	00b3      	lsls	r3, r6, #2
 8007cac:	58eb      	ldr	r3, [r5, r3]
 8007cae:	4798      	blx	r3
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	e7f2      	b.n	8007c9a <__libc_init_array+0x1e>
 8007cb4:	0800b11c 	.word	0x0800b11c
 8007cb8:	0800b11c 	.word	0x0800b11c
 8007cbc:	0800b11c 	.word	0x0800b11c
 8007cc0:	0800b120 	.word	0x0800b120

08007cc4 <memset>:
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	1882      	adds	r2, r0, r2
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d100      	bne.n	8007cce <memset+0xa>
 8007ccc:	4770      	bx	lr
 8007cce:	7019      	strb	r1, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	e7f9      	b.n	8007cc8 <memset+0x4>

08007cd4 <__cvt>:
 8007cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd6:	001e      	movs	r6, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	0014      	movs	r4, r2
 8007cdc:	b08b      	sub	sp, #44	; 0x2c
 8007cde:	429e      	cmp	r6, r3
 8007ce0:	da04      	bge.n	8007cec <__cvt+0x18>
 8007ce2:	2180      	movs	r1, #128	; 0x80
 8007ce4:	0609      	lsls	r1, r1, #24
 8007ce6:	1873      	adds	r3, r6, r1
 8007ce8:	001e      	movs	r6, r3
 8007cea:	232d      	movs	r3, #45	; 0x2d
 8007cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cf0:	7013      	strb	r3, [r2, #0]
 8007cf2:	2320      	movs	r3, #32
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	439f      	bics	r7, r3
 8007cf8:	2f46      	cmp	r7, #70	; 0x46
 8007cfa:	d007      	beq.n	8007d0c <__cvt+0x38>
 8007cfc:	003b      	movs	r3, r7
 8007cfe:	3b45      	subs	r3, #69	; 0x45
 8007d00:	4259      	negs	r1, r3
 8007d02:	414b      	adcs	r3, r1
 8007d04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d06:	3a01      	subs	r2, #1
 8007d08:	18cb      	adds	r3, r1, r3
 8007d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d0c:	ab09      	add	r3, sp, #36	; 0x24
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	ab08      	add	r3, sp, #32
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d16:	9200      	str	r2, [sp, #0]
 8007d18:	9302      	str	r3, [sp, #8]
 8007d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d1c:	0022      	movs	r2, r4
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	0033      	movs	r3, r6
 8007d22:	f000 fcfd 	bl	8008720 <_dtoa_r>
 8007d26:	0005      	movs	r5, r0
 8007d28:	2f47      	cmp	r7, #71	; 0x47
 8007d2a:	d102      	bne.n	8007d32 <__cvt+0x5e>
 8007d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d2e:	07db      	lsls	r3, r3, #31
 8007d30:	d528      	bpl.n	8007d84 <__cvt+0xb0>
 8007d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d34:	18eb      	adds	r3, r5, r3
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	2f46      	cmp	r7, #70	; 0x46
 8007d3a:	d114      	bne.n	8007d66 <__cvt+0x92>
 8007d3c:	782b      	ldrb	r3, [r5, #0]
 8007d3e:	2b30      	cmp	r3, #48	; 0x30
 8007d40:	d10c      	bne.n	8007d5c <__cvt+0x88>
 8007d42:	2200      	movs	r2, #0
 8007d44:	2300      	movs	r3, #0
 8007d46:	0020      	movs	r0, r4
 8007d48:	0031      	movs	r1, r6
 8007d4a:	f7f8 fb7d 	bl	8000448 <__aeabi_dcmpeq>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d104      	bne.n	8007d5c <__cvt+0x88>
 8007d52:	2301      	movs	r3, #1
 8007d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d56:	1a9b      	subs	r3, r3, r2
 8007d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d5e:	9a07      	ldr	r2, [sp, #28]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	18d3      	adds	r3, r2, r3
 8007d64:	9307      	str	r3, [sp, #28]
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	0020      	movs	r0, r4
 8007d6c:	0031      	movs	r1, r6
 8007d6e:	f7f8 fb6b 	bl	8000448 <__aeabi_dcmpeq>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d001      	beq.n	8007d7a <__cvt+0xa6>
 8007d76:	9b07      	ldr	r3, [sp, #28]
 8007d78:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7a:	2230      	movs	r2, #48	; 0x30
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	9907      	ldr	r1, [sp, #28]
 8007d80:	428b      	cmp	r3, r1
 8007d82:	d306      	bcc.n	8007d92 <__cvt+0xbe>
 8007d84:	0028      	movs	r0, r5
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d8a:	1b5b      	subs	r3, r3, r5
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	b00b      	add	sp, #44	; 0x2c
 8007d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d92:	1c59      	adds	r1, r3, #1
 8007d94:	9109      	str	r1, [sp, #36]	; 0x24
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e7f0      	b.n	8007d7c <__cvt+0xa8>

08007d9a <__exponent>:
 8007d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9c:	1c83      	adds	r3, r0, #2
 8007d9e:	b087      	sub	sp, #28
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	0005      	movs	r5, r0
 8007da4:	000c      	movs	r4, r1
 8007da6:	232b      	movs	r3, #43	; 0x2b
 8007da8:	7002      	strb	r2, [r0, #0]
 8007daa:	2900      	cmp	r1, #0
 8007dac:	da01      	bge.n	8007db2 <__exponent+0x18>
 8007dae:	424c      	negs	r4, r1
 8007db0:	3302      	adds	r3, #2
 8007db2:	706b      	strb	r3, [r5, #1]
 8007db4:	2c09      	cmp	r4, #9
 8007db6:	dd31      	ble.n	8007e1c <__exponent+0x82>
 8007db8:	270a      	movs	r7, #10
 8007dba:	ab04      	add	r3, sp, #16
 8007dbc:	1dde      	adds	r6, r3, #7
 8007dbe:	0020      	movs	r0, r4
 8007dc0:	0039      	movs	r1, r7
 8007dc2:	9601      	str	r6, [sp, #4]
 8007dc4:	f7f8 fb2a 	bl	800041c <__aeabi_idivmod>
 8007dc8:	3e01      	subs	r6, #1
 8007dca:	3130      	adds	r1, #48	; 0x30
 8007dcc:	0020      	movs	r0, r4
 8007dce:	7031      	strb	r1, [r6, #0]
 8007dd0:	0039      	movs	r1, r7
 8007dd2:	9402      	str	r4, [sp, #8]
 8007dd4:	f7f8 fa3c 	bl	8000250 <__divsi3>
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	0004      	movs	r4, r0
 8007ddc:	2b63      	cmp	r3, #99	; 0x63
 8007dde:	dcee      	bgt.n	8007dbe <__exponent+0x24>
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	3430      	adds	r4, #48	; 0x30
 8007de4:	1e9a      	subs	r2, r3, #2
 8007de6:	0013      	movs	r3, r2
 8007de8:	9903      	ldr	r1, [sp, #12]
 8007dea:	7014      	strb	r4, [r2, #0]
 8007dec:	a804      	add	r0, sp, #16
 8007dee:	3007      	adds	r0, #7
 8007df0:	4298      	cmp	r0, r3
 8007df2:	d80e      	bhi.n	8007e12 <__exponent+0x78>
 8007df4:	ab04      	add	r3, sp, #16
 8007df6:	3307      	adds	r3, #7
 8007df8:	2000      	movs	r0, #0
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d804      	bhi.n	8007e08 <__exponent+0x6e>
 8007dfe:	ab04      	add	r3, sp, #16
 8007e00:	3009      	adds	r0, #9
 8007e02:	18c0      	adds	r0, r0, r3
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	1ac0      	subs	r0, r0, r3
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1818      	adds	r0, r3, r0
 8007e0c:	1b40      	subs	r0, r0, r5
 8007e0e:	b007      	add	sp, #28
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e12:	7818      	ldrb	r0, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	7008      	strb	r0, [r1, #0]
 8007e18:	3101      	adds	r1, #1
 8007e1a:	e7e7      	b.n	8007dec <__exponent+0x52>
 8007e1c:	2330      	movs	r3, #48	; 0x30
 8007e1e:	18e4      	adds	r4, r4, r3
 8007e20:	70ab      	strb	r3, [r5, #2]
 8007e22:	1d28      	adds	r0, r5, #4
 8007e24:	70ec      	strb	r4, [r5, #3]
 8007e26:	e7f1      	b.n	8007e0c <__exponent+0x72>

08007e28 <_printf_float>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b095      	sub	sp, #84	; 0x54
 8007e2c:	000c      	movs	r4, r1
 8007e2e:	9208      	str	r2, [sp, #32]
 8007e30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e32:	9309      	str	r3, [sp, #36]	; 0x24
 8007e34:	0007      	movs	r7, r0
 8007e36:	f001 fa91 	bl	800935c <_localeconv_r>
 8007e3a:	6803      	ldr	r3, [r0, #0]
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e40:	f7f8 f960 	bl	8000104 <strlen>
 8007e44:	2300      	movs	r3, #0
 8007e46:	9312      	str	r3, [sp, #72]	; 0x48
 8007e48:	7e23      	ldrb	r3, [r4, #24]
 8007e4a:	2207      	movs	r2, #7
 8007e4c:	001e      	movs	r6, r3
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	900d      	str	r0, [sp, #52]	; 0x34
 8007e52:	930c      	str	r3, [sp, #48]	; 0x30
 8007e54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	05c9      	lsls	r1, r1, #23
 8007e5a:	d547      	bpl.n	8007eec <_printf_float+0xc4>
 8007e5c:	189b      	adds	r3, r3, r2
 8007e5e:	4393      	bics	r3, r2
 8007e60:	001a      	movs	r2, r3
 8007e62:	3208      	adds	r2, #8
 8007e64:	602a      	str	r2, [r5, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	64a2      	str	r2, [r4, #72]	; 0x48
 8007e6c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e6e:	2201      	movs	r2, #1
 8007e70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e72:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007e74:	930a      	str	r3, [sp, #40]	; 0x28
 8007e76:	006b      	lsls	r3, r5, #1
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e7e:	4ba8      	ldr	r3, [pc, #672]	; (8008120 <_printf_float+0x2f8>)
 8007e80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007e82:	4252      	negs	r2, r2
 8007e84:	f7fa fc10 	bl	80026a8 <__aeabi_dcmpun>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d131      	bne.n	8007ef0 <_printf_float+0xc8>
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4ba4      	ldr	r3, [pc, #656]	; (8008120 <_printf_float+0x2f8>)
 8007e90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007e94:	4252      	negs	r2, r2
 8007e96:	f7f8 fae7 	bl	8000468 <__aeabi_dcmple>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d128      	bne.n	8007ef0 <_printf_float+0xc8>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	0029      	movs	r1, r5
 8007ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ea6:	f7f8 fad5 	bl	8000454 <__aeabi_dcmplt>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d003      	beq.n	8007eb6 <_printf_float+0x8e>
 8007eae:	0023      	movs	r3, r4
 8007eb0:	222d      	movs	r2, #45	; 0x2d
 8007eb2:	3343      	adds	r3, #67	; 0x43
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	4d9b      	ldr	r5, [pc, #620]	; (8008124 <_printf_float+0x2fc>)
 8007eb8:	2e47      	cmp	r6, #71	; 0x47
 8007eba:	d900      	bls.n	8007ebe <_printf_float+0x96>
 8007ebc:	4d9a      	ldr	r5, [pc, #616]	; (8008128 <_printf_float+0x300>)
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	439a      	bics	r2, r3
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	0021      	movs	r1, r4
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	0038      	movs	r0, r7
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	aa13      	add	r2, sp, #76	; 0x4c
 8007eda:	f000 f9f3 	bl	80082c4 <_printf_common>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d000      	beq.n	8007ee4 <_printf_float+0xbc>
 8007ee2:	e09e      	b.n	8008022 <_printf_float+0x1fa>
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	4240      	negs	r0, r0
 8007ee8:	b015      	add	sp, #84	; 0x54
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eec:	3307      	adds	r3, #7
 8007eee:	e7b6      	b.n	8007e5e <_printf_float+0x36>
 8007ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef2:	002b      	movs	r3, r5
 8007ef4:	0010      	movs	r0, r2
 8007ef6:	0029      	movs	r1, r5
 8007ef8:	f7fa fbd6 	bl	80026a8 <__aeabi_dcmpun>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d00a      	beq.n	8007f16 <_printf_float+0xee>
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	da03      	bge.n	8007f0c <_printf_float+0xe4>
 8007f04:	0023      	movs	r3, r4
 8007f06:	222d      	movs	r2, #45	; 0x2d
 8007f08:	3343      	adds	r3, #67	; 0x43
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	4d87      	ldr	r5, [pc, #540]	; (800812c <_printf_float+0x304>)
 8007f0e:	2e47      	cmp	r6, #71	; 0x47
 8007f10:	d9d5      	bls.n	8007ebe <_printf_float+0x96>
 8007f12:	4d87      	ldr	r5, [pc, #540]	; (8008130 <_printf_float+0x308>)
 8007f14:	e7d3      	b.n	8007ebe <_printf_float+0x96>
 8007f16:	2220      	movs	r2, #32
 8007f18:	0031      	movs	r1, r6
 8007f1a:	6863      	ldr	r3, [r4, #4]
 8007f1c:	4391      	bics	r1, r2
 8007f1e:	910e      	str	r1, [sp, #56]	; 0x38
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	d147      	bne.n	8007fb4 <_printf_float+0x18c>
 8007f24:	3307      	adds	r3, #7
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	2200      	movs	r2, #0
 8007f32:	9206      	str	r2, [sp, #24]
 8007f34:	aa12      	add	r2, sp, #72	; 0x48
 8007f36:	9205      	str	r2, [sp, #20]
 8007f38:	aa11      	add	r2, sp, #68	; 0x44
 8007f3a:	9203      	str	r2, [sp, #12]
 8007f3c:	2223      	movs	r2, #35	; 0x23
 8007f3e:	a908      	add	r1, sp, #32
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	1852      	adds	r2, r2, r1
 8007f48:	9202      	str	r2, [sp, #8]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	0038      	movs	r0, r7
 8007f4e:	002b      	movs	r3, r5
 8007f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f52:	9604      	str	r6, [sp, #16]
 8007f54:	f7ff febe 	bl	8007cd4 <__cvt>
 8007f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5a:	0005      	movs	r5, r0
 8007f5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f5e:	2b47      	cmp	r3, #71	; 0x47
 8007f60:	d108      	bne.n	8007f74 <_printf_float+0x14c>
 8007f62:	1ccb      	adds	r3, r1, #3
 8007f64:	db02      	blt.n	8007f6c <_printf_float+0x144>
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	4299      	cmp	r1, r3
 8007f6a:	dd46      	ble.n	8007ffa <_printf_float+0x1d2>
 8007f6c:	0033      	movs	r3, r6
 8007f6e:	3b02      	subs	r3, #2
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	001e      	movs	r6, r3
 8007f74:	2e65      	cmp	r6, #101	; 0x65
 8007f76:	d824      	bhi.n	8007fc2 <_printf_float+0x19a>
 8007f78:	0020      	movs	r0, r4
 8007f7a:	0032      	movs	r2, r6
 8007f7c:	3901      	subs	r1, #1
 8007f7e:	3050      	adds	r0, #80	; 0x50
 8007f80:	9111      	str	r1, [sp, #68]	; 0x44
 8007f82:	f7ff ff0a 	bl	8007d9a <__exponent>
 8007f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f88:	900a      	str	r0, [sp, #40]	; 0x28
 8007f8a:	1813      	adds	r3, r2, r0
 8007f8c:	6123      	str	r3, [r4, #16]
 8007f8e:	2a01      	cmp	r2, #1
 8007f90:	dc02      	bgt.n	8007f98 <_printf_float+0x170>
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	07d2      	lsls	r2, r2, #31
 8007f96:	d501      	bpl.n	8007f9c <_printf_float+0x174>
 8007f98:	3301      	adds	r3, #1
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	2323      	movs	r3, #35	; 0x23
 8007f9e:	aa08      	add	r2, sp, #32
 8007fa0:	189b      	adds	r3, r3, r2
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d100      	bne.n	8007faa <_printf_float+0x182>
 8007fa8:	e791      	b.n	8007ece <_printf_float+0xa6>
 8007faa:	0023      	movs	r3, r4
 8007fac:	222d      	movs	r2, #45	; 0x2d
 8007fae:	3343      	adds	r3, #67	; 0x43
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e78c      	b.n	8007ece <_printf_float+0xa6>
 8007fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fb6:	2a47      	cmp	r2, #71	; 0x47
 8007fb8:	d1b6      	bne.n	8007f28 <_printf_float+0x100>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1b4      	bne.n	8007f28 <_printf_float+0x100>
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	e7b1      	b.n	8007f26 <_printf_float+0xfe>
 8007fc2:	2e66      	cmp	r6, #102	; 0x66
 8007fc4:	d11b      	bne.n	8007ffe <_printf_float+0x1d6>
 8007fc6:	6863      	ldr	r3, [r4, #4]
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	dd0d      	ble.n	8007fe8 <_printf_float+0x1c0>
 8007fcc:	6121      	str	r1, [r4, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <_printf_float+0x1b0>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	07d2      	lsls	r2, r2, #31
 8007fd6:	d502      	bpl.n	8007fde <_printf_float+0x1b6>
 8007fd8:	3301      	adds	r3, #1
 8007fda:	1859      	adds	r1, r3, r1
 8007fdc:	6121      	str	r1, [r4, #16]
 8007fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fe0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe6:	e7d9      	b.n	8007f9c <_printf_float+0x174>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <_printf_float+0x1cc>
 8007fec:	2201      	movs	r2, #1
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	4211      	tst	r1, r2
 8007ff2:	d000      	beq.n	8007ff6 <_printf_float+0x1ce>
 8007ff4:	1c9a      	adds	r2, r3, #2
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	e7f1      	b.n	8007fde <_printf_float+0x1b6>
 8007ffa:	2367      	movs	r3, #103	; 0x67
 8007ffc:	001e      	movs	r6, r3
 8007ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008002:	4293      	cmp	r3, r2
 8008004:	db06      	blt.n	8008014 <_printf_float+0x1ec>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	07d2      	lsls	r2, r2, #31
 800800c:	d5e7      	bpl.n	8007fde <_printf_float+0x1b6>
 800800e:	3301      	adds	r3, #1
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	e7e4      	b.n	8007fde <_printf_float+0x1b6>
 8008014:	2101      	movs	r1, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	dc01      	bgt.n	800801e <_printf_float+0x1f6>
 800801a:	1849      	adds	r1, r1, r1
 800801c:	1ac9      	subs	r1, r1, r3
 800801e:	1852      	adds	r2, r2, r1
 8008020:	e7e9      	b.n	8007ff6 <_printf_float+0x1ce>
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	0553      	lsls	r3, r2, #21
 8008026:	d408      	bmi.n	800803a <_printf_float+0x212>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	002a      	movs	r2, r5
 800802c:	0038      	movs	r0, r7
 800802e:	9908      	ldr	r1, [sp, #32]
 8008030:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008032:	47a8      	blx	r5
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d129      	bne.n	800808c <_printf_float+0x264>
 8008038:	e754      	b.n	8007ee4 <_printf_float+0xbc>
 800803a:	2e65      	cmp	r6, #101	; 0x65
 800803c:	d800      	bhi.n	8008040 <_printf_float+0x218>
 800803e:	e0ec      	b.n	800821a <_printf_float+0x3f2>
 8008040:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008042:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008044:	2200      	movs	r2, #0
 8008046:	2300      	movs	r3, #0
 8008048:	f7f8 f9fe 	bl	8000448 <__aeabi_dcmpeq>
 800804c:	2800      	cmp	r0, #0
 800804e:	d034      	beq.n	80080ba <_printf_float+0x292>
 8008050:	2301      	movs	r3, #1
 8008052:	0038      	movs	r0, r7
 8008054:	4a37      	ldr	r2, [pc, #220]	; (8008134 <_printf_float+0x30c>)
 8008056:	9908      	ldr	r1, [sp, #32]
 8008058:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800805a:	47a8      	blx	r5
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d100      	bne.n	8008062 <_printf_float+0x23a>
 8008060:	e740      	b.n	8007ee4 <_printf_float+0xbc>
 8008062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008066:	4293      	cmp	r3, r2
 8008068:	db02      	blt.n	8008070 <_printf_float+0x248>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	07db      	lsls	r3, r3, #31
 800806e:	d50d      	bpl.n	800808c <_printf_float+0x264>
 8008070:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008072:	0038      	movs	r0, r7
 8008074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008078:	9908      	ldr	r1, [sp, #32]
 800807a:	47a8      	blx	r5
 800807c:	2500      	movs	r5, #0
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d100      	bne.n	8008084 <_printf_float+0x25c>
 8008082:	e72f      	b.n	8007ee4 <_printf_float+0xbc>
 8008084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008086:	3b01      	subs	r3, #1
 8008088:	42ab      	cmp	r3, r5
 800808a:	dc0a      	bgt.n	80080a2 <_printf_float+0x27a>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	d500      	bpl.n	8008094 <_printf_float+0x26c>
 8008092:	e114      	b.n	80082be <_printf_float+0x496>
 8008094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008096:	68e0      	ldr	r0, [r4, #12]
 8008098:	4298      	cmp	r0, r3
 800809a:	db00      	blt.n	800809e <_printf_float+0x276>
 800809c:	e724      	b.n	8007ee8 <_printf_float+0xc0>
 800809e:	0018      	movs	r0, r3
 80080a0:	e722      	b.n	8007ee8 <_printf_float+0xc0>
 80080a2:	0022      	movs	r2, r4
 80080a4:	2301      	movs	r3, #1
 80080a6:	0038      	movs	r0, r7
 80080a8:	9908      	ldr	r1, [sp, #32]
 80080aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080ac:	321a      	adds	r2, #26
 80080ae:	47b0      	blx	r6
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d100      	bne.n	80080b6 <_printf_float+0x28e>
 80080b4:	e716      	b.n	8007ee4 <_printf_float+0xbc>
 80080b6:	3501      	adds	r5, #1
 80080b8:	e7e4      	b.n	8008084 <_printf_float+0x25c>
 80080ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dc3b      	bgt.n	8008138 <_printf_float+0x310>
 80080c0:	2301      	movs	r3, #1
 80080c2:	0038      	movs	r0, r7
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <_printf_float+0x30c>)
 80080c6:	9908      	ldr	r1, [sp, #32]
 80080c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080ca:	47b0      	blx	r6
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d100      	bne.n	80080d2 <_printf_float+0x2aa>
 80080d0:	e708      	b.n	8007ee4 <_printf_float+0xbc>
 80080d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080d6:	4313      	orrs	r3, r2
 80080d8:	d102      	bne.n	80080e0 <_printf_float+0x2b8>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	07db      	lsls	r3, r3, #31
 80080de:	d5d5      	bpl.n	800808c <_printf_float+0x264>
 80080e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080e2:	0038      	movs	r0, r7
 80080e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080e6:	9908      	ldr	r1, [sp, #32]
 80080e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080ea:	47b0      	blx	r6
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d100      	bne.n	80080f2 <_printf_float+0x2ca>
 80080f0:	e6f8      	b.n	8007ee4 <_printf_float+0xbc>
 80080f2:	2300      	movs	r3, #0
 80080f4:	930a      	str	r3, [sp, #40]	; 0x28
 80080f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080fa:	425b      	negs	r3, r3
 80080fc:	4293      	cmp	r3, r2
 80080fe:	dc01      	bgt.n	8008104 <_printf_float+0x2dc>
 8008100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008102:	e792      	b.n	800802a <_printf_float+0x202>
 8008104:	0022      	movs	r2, r4
 8008106:	2301      	movs	r3, #1
 8008108:	0038      	movs	r0, r7
 800810a:	9908      	ldr	r1, [sp, #32]
 800810c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800810e:	321a      	adds	r2, #26
 8008110:	47b0      	blx	r6
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	d100      	bne.n	8008118 <_printf_float+0x2f0>
 8008116:	e6e5      	b.n	8007ee4 <_printf_float+0xbc>
 8008118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811a:	3301      	adds	r3, #1
 800811c:	e7ea      	b.n	80080f4 <_printf_float+0x2cc>
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	7fefffff 	.word	0x7fefffff
 8008124:	0800ad34 	.word	0x0800ad34
 8008128:	0800ad38 	.word	0x0800ad38
 800812c:	0800ad3c 	.word	0x0800ad3c
 8008130:	0800ad40 	.word	0x0800ad40
 8008134:	0800ad44 	.word	0x0800ad44
 8008138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800813a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800813c:	920a      	str	r2, [sp, #40]	; 0x28
 800813e:	429a      	cmp	r2, r3
 8008140:	dd00      	ble.n	8008144 <_printf_float+0x31c>
 8008142:	930a      	str	r3, [sp, #40]	; 0x28
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	2b00      	cmp	r3, #0
 8008148:	dc3d      	bgt.n	80081c6 <_printf_float+0x39e>
 800814a:	2300      	movs	r3, #0
 800814c:	930e      	str	r3, [sp, #56]	; 0x38
 800814e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008150:	43db      	mvns	r3, r3
 8008152:	17db      	asrs	r3, r3, #31
 8008154:	930f      	str	r3, [sp, #60]	; 0x3c
 8008156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800815a:	930c      	str	r3, [sp, #48]	; 0x30
 800815c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815e:	4013      	ands	r3, r2
 8008160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008166:	4293      	cmp	r3, r2
 8008168:	dc36      	bgt.n	80081d8 <_printf_float+0x3b0>
 800816a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800816c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800816e:	4293      	cmp	r3, r2
 8008170:	db40      	blt.n	80081f4 <_printf_float+0x3cc>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	07db      	lsls	r3, r3, #31
 8008176:	d43d      	bmi.n	80081f4 <_printf_float+0x3cc>
 8008178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800817a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800817c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	1a52      	subs	r2, r2, r1
 8008182:	920a      	str	r2, [sp, #40]	; 0x28
 8008184:	429a      	cmp	r2, r3
 8008186:	dd00      	ble.n	800818a <_printf_float+0x362>
 8008188:	930a      	str	r3, [sp, #40]	; 0x28
 800818a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc3a      	bgt.n	8008206 <_printf_float+0x3de>
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	2500      	movs	r5, #0
 8008194:	43db      	mvns	r3, r3
 8008196:	17db      	asrs	r3, r3, #31
 8008198:	930b      	str	r3, [sp, #44]	; 0x2c
 800819a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800819c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800819e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081a0:	1a9b      	subs	r3, r3, r2
 80081a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a4:	400a      	ands	r2, r1
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dc00      	bgt.n	80081ae <_printf_float+0x386>
 80081ac:	e76e      	b.n	800808c <_printf_float+0x264>
 80081ae:	0022      	movs	r2, r4
 80081b0:	2301      	movs	r3, #1
 80081b2:	0038      	movs	r0, r7
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081b8:	321a      	adds	r2, #26
 80081ba:	47b0      	blx	r6
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d100      	bne.n	80081c2 <_printf_float+0x39a>
 80081c0:	e690      	b.n	8007ee4 <_printf_float+0xbc>
 80081c2:	3501      	adds	r5, #1
 80081c4:	e7e9      	b.n	800819a <_printf_float+0x372>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	002a      	movs	r2, r5
 80081ca:	0038      	movs	r0, r7
 80081cc:	9908      	ldr	r1, [sp, #32]
 80081ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081d0:	47b0      	blx	r6
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d1b9      	bne.n	800814a <_printf_float+0x322>
 80081d6:	e685      	b.n	8007ee4 <_printf_float+0xbc>
 80081d8:	0022      	movs	r2, r4
 80081da:	2301      	movs	r3, #1
 80081dc:	0038      	movs	r0, r7
 80081de:	9908      	ldr	r1, [sp, #32]
 80081e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081e2:	321a      	adds	r2, #26
 80081e4:	47b0      	blx	r6
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d100      	bne.n	80081ec <_printf_float+0x3c4>
 80081ea:	e67b      	b.n	8007ee4 <_printf_float+0xbc>
 80081ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ee:	3301      	adds	r3, #1
 80081f0:	930e      	str	r3, [sp, #56]	; 0x38
 80081f2:	e7b0      	b.n	8008156 <_printf_float+0x32e>
 80081f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f6:	0038      	movs	r0, r7
 80081f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081fa:	9908      	ldr	r1, [sp, #32]
 80081fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081fe:	47b0      	blx	r6
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d1b9      	bne.n	8008178 <_printf_float+0x350>
 8008204:	e66e      	b.n	8007ee4 <_printf_float+0xbc>
 8008206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008208:	0038      	movs	r0, r7
 800820a:	18ea      	adds	r2, r5, r3
 800820c:	9908      	ldr	r1, [sp, #32]
 800820e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008210:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008212:	47a8      	blx	r5
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d1bb      	bne.n	8008190 <_printf_float+0x368>
 8008218:	e664      	b.n	8007ee4 <_printf_float+0xbc>
 800821a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800821c:	2b01      	cmp	r3, #1
 800821e:	dc02      	bgt.n	8008226 <_printf_float+0x3fe>
 8008220:	2301      	movs	r3, #1
 8008222:	421a      	tst	r2, r3
 8008224:	d038      	beq.n	8008298 <_printf_float+0x470>
 8008226:	2301      	movs	r3, #1
 8008228:	002a      	movs	r2, r5
 800822a:	0038      	movs	r0, r7
 800822c:	9908      	ldr	r1, [sp, #32]
 800822e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008230:	47b0      	blx	r6
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d100      	bne.n	8008238 <_printf_float+0x410>
 8008236:	e655      	b.n	8007ee4 <_printf_float+0xbc>
 8008238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823a:	0038      	movs	r0, r7
 800823c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800823e:	9908      	ldr	r1, [sp, #32]
 8008240:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008242:	47b0      	blx	r6
 8008244:	1c43      	adds	r3, r0, #1
 8008246:	d100      	bne.n	800824a <_printf_float+0x422>
 8008248:	e64c      	b.n	8007ee4 <_printf_float+0xbc>
 800824a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800824c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	f7f8 f8f9 	bl	8000448 <__aeabi_dcmpeq>
 8008256:	2800      	cmp	r0, #0
 8008258:	d11c      	bne.n	8008294 <_printf_float+0x46c>
 800825a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800825c:	1c6a      	adds	r2, r5, #1
 800825e:	3b01      	subs	r3, #1
 8008260:	0038      	movs	r0, r7
 8008262:	9908      	ldr	r1, [sp, #32]
 8008264:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008266:	47a8      	blx	r5
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d10f      	bne.n	800828c <_printf_float+0x464>
 800826c:	e63a      	b.n	8007ee4 <_printf_float+0xbc>
 800826e:	0022      	movs	r2, r4
 8008270:	2301      	movs	r3, #1
 8008272:	0038      	movs	r0, r7
 8008274:	9908      	ldr	r1, [sp, #32]
 8008276:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008278:	321a      	adds	r2, #26
 800827a:	47b0      	blx	r6
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d100      	bne.n	8008282 <_printf_float+0x45a>
 8008280:	e630      	b.n	8007ee4 <_printf_float+0xbc>
 8008282:	3501      	adds	r5, #1
 8008284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008286:	3b01      	subs	r3, #1
 8008288:	42ab      	cmp	r3, r5
 800828a:	dcf0      	bgt.n	800826e <_printf_float+0x446>
 800828c:	0022      	movs	r2, r4
 800828e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008290:	3250      	adds	r2, #80	; 0x50
 8008292:	e6cb      	b.n	800802c <_printf_float+0x204>
 8008294:	2500      	movs	r5, #0
 8008296:	e7f5      	b.n	8008284 <_printf_float+0x45c>
 8008298:	002a      	movs	r2, r5
 800829a:	e7e1      	b.n	8008260 <_printf_float+0x438>
 800829c:	0022      	movs	r2, r4
 800829e:	2301      	movs	r3, #1
 80082a0:	0038      	movs	r0, r7
 80082a2:	9908      	ldr	r1, [sp, #32]
 80082a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082a6:	3219      	adds	r2, #25
 80082a8:	47b0      	blx	r6
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d100      	bne.n	80082b0 <_printf_float+0x488>
 80082ae:	e619      	b.n	8007ee4 <_printf_float+0xbc>
 80082b0:	3501      	adds	r5, #1
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dcef      	bgt.n	800829c <_printf_float+0x474>
 80082bc:	e6ea      	b.n	8008094 <_printf_float+0x26c>
 80082be:	2500      	movs	r5, #0
 80082c0:	e7f7      	b.n	80082b2 <_printf_float+0x48a>
 80082c2:	46c0      	nop			; (mov r8, r8)

080082c4 <_printf_common>:
 80082c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c6:	0015      	movs	r5, r2
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	688a      	ldr	r2, [r1, #8]
 80082cc:	690b      	ldr	r3, [r1, #16]
 80082ce:	000c      	movs	r4, r1
 80082d0:	9000      	str	r0, [sp, #0]
 80082d2:	4293      	cmp	r3, r2
 80082d4:	da00      	bge.n	80082d8 <_printf_common+0x14>
 80082d6:	0013      	movs	r3, r2
 80082d8:	0022      	movs	r2, r4
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	3243      	adds	r2, #67	; 0x43
 80082de:	7812      	ldrb	r2, [r2, #0]
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	d001      	beq.n	80082e8 <_printf_common+0x24>
 80082e4:	3301      	adds	r3, #1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	069b      	lsls	r3, r3, #26
 80082ec:	d502      	bpl.n	80082f4 <_printf_common+0x30>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	3302      	adds	r3, #2
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	2306      	movs	r3, #6
 80082f8:	0017      	movs	r7, r2
 80082fa:	401f      	ands	r7, r3
 80082fc:	421a      	tst	r2, r3
 80082fe:	d027      	beq.n	8008350 <_printf_common+0x8c>
 8008300:	0023      	movs	r3, r4
 8008302:	3343      	adds	r3, #67	; 0x43
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	1e5a      	subs	r2, r3, #1
 8008308:	4193      	sbcs	r3, r2
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	0692      	lsls	r2, r2, #26
 800830e:	d430      	bmi.n	8008372 <_printf_common+0xae>
 8008310:	0022      	movs	r2, r4
 8008312:	9901      	ldr	r1, [sp, #4]
 8008314:	9800      	ldr	r0, [sp, #0]
 8008316:	9e08      	ldr	r6, [sp, #32]
 8008318:	3243      	adds	r2, #67	; 0x43
 800831a:	47b0      	blx	r6
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d025      	beq.n	800836c <_printf_common+0xa8>
 8008320:	2306      	movs	r3, #6
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	682a      	ldr	r2, [r5, #0]
 8008326:	68e1      	ldr	r1, [r4, #12]
 8008328:	2500      	movs	r5, #0
 800832a:	4003      	ands	r3, r0
 800832c:	2b04      	cmp	r3, #4
 800832e:	d103      	bne.n	8008338 <_printf_common+0x74>
 8008330:	1a8d      	subs	r5, r1, r2
 8008332:	43eb      	mvns	r3, r5
 8008334:	17db      	asrs	r3, r3, #31
 8008336:	401d      	ands	r5, r3
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	6922      	ldr	r2, [r4, #16]
 800833c:	4293      	cmp	r3, r2
 800833e:	dd01      	ble.n	8008344 <_printf_common+0x80>
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	18ed      	adds	r5, r5, r3
 8008344:	2700      	movs	r7, #0
 8008346:	42bd      	cmp	r5, r7
 8008348:	d120      	bne.n	800838c <_printf_common+0xc8>
 800834a:	2000      	movs	r0, #0
 800834c:	e010      	b.n	8008370 <_printf_common+0xac>
 800834e:	3701      	adds	r7, #1
 8008350:	68e3      	ldr	r3, [r4, #12]
 8008352:	682a      	ldr	r2, [r5, #0]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	42bb      	cmp	r3, r7
 8008358:	ddd2      	ble.n	8008300 <_printf_common+0x3c>
 800835a:	0022      	movs	r2, r4
 800835c:	2301      	movs	r3, #1
 800835e:	9901      	ldr	r1, [sp, #4]
 8008360:	9800      	ldr	r0, [sp, #0]
 8008362:	9e08      	ldr	r6, [sp, #32]
 8008364:	3219      	adds	r2, #25
 8008366:	47b0      	blx	r6
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d1f0      	bne.n	800834e <_printf_common+0x8a>
 800836c:	2001      	movs	r0, #1
 800836e:	4240      	negs	r0, r0
 8008370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008372:	2030      	movs	r0, #48	; 0x30
 8008374:	18e1      	adds	r1, r4, r3
 8008376:	3143      	adds	r1, #67	; 0x43
 8008378:	7008      	strb	r0, [r1, #0]
 800837a:	0021      	movs	r1, r4
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	3145      	adds	r1, #69	; 0x45
 8008380:	7809      	ldrb	r1, [r1, #0]
 8008382:	18a2      	adds	r2, r4, r2
 8008384:	3243      	adds	r2, #67	; 0x43
 8008386:	3302      	adds	r3, #2
 8008388:	7011      	strb	r1, [r2, #0]
 800838a:	e7c1      	b.n	8008310 <_printf_common+0x4c>
 800838c:	0022      	movs	r2, r4
 800838e:	2301      	movs	r3, #1
 8008390:	9901      	ldr	r1, [sp, #4]
 8008392:	9800      	ldr	r0, [sp, #0]
 8008394:	9e08      	ldr	r6, [sp, #32]
 8008396:	321a      	adds	r2, #26
 8008398:	47b0      	blx	r6
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d0e6      	beq.n	800836c <_printf_common+0xa8>
 800839e:	3701      	adds	r7, #1
 80083a0:	e7d1      	b.n	8008346 <_printf_common+0x82>
	...

080083a4 <_printf_i>:
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	; 0x2c
 80083a8:	9206      	str	r2, [sp, #24]
 80083aa:	000a      	movs	r2, r1
 80083ac:	3243      	adds	r2, #67	; 0x43
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	9005      	str	r0, [sp, #20]
 80083b2:	9204      	str	r2, [sp, #16]
 80083b4:	7e0a      	ldrb	r2, [r1, #24]
 80083b6:	000c      	movs	r4, r1
 80083b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ba:	2a78      	cmp	r2, #120	; 0x78
 80083bc:	d806      	bhi.n	80083cc <_printf_i+0x28>
 80083be:	2a62      	cmp	r2, #98	; 0x62
 80083c0:	d808      	bhi.n	80083d4 <_printf_i+0x30>
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d100      	bne.n	80083c8 <_printf_i+0x24>
 80083c6:	e0c0      	b.n	800854a <_printf_i+0x1a6>
 80083c8:	2a58      	cmp	r2, #88	; 0x58
 80083ca:	d052      	beq.n	8008472 <_printf_i+0xce>
 80083cc:	0026      	movs	r6, r4
 80083ce:	3642      	adds	r6, #66	; 0x42
 80083d0:	7032      	strb	r2, [r6, #0]
 80083d2:	e022      	b.n	800841a <_printf_i+0x76>
 80083d4:	0010      	movs	r0, r2
 80083d6:	3863      	subs	r0, #99	; 0x63
 80083d8:	2815      	cmp	r0, #21
 80083da:	d8f7      	bhi.n	80083cc <_printf_i+0x28>
 80083dc:	f7f7 fea4 	bl	8000128 <__gnu_thumb1_case_shi>
 80083e0:	001f0016 	.word	0x001f0016
 80083e4:	fff6fff6 	.word	0xfff6fff6
 80083e8:	fff6fff6 	.word	0xfff6fff6
 80083ec:	fff6001f 	.word	0xfff6001f
 80083f0:	fff6fff6 	.word	0xfff6fff6
 80083f4:	00a8fff6 	.word	0x00a8fff6
 80083f8:	009a0036 	.word	0x009a0036
 80083fc:	fff6fff6 	.word	0xfff6fff6
 8008400:	fff600b9 	.word	0xfff600b9
 8008404:	fff60036 	.word	0xfff60036
 8008408:	009efff6 	.word	0x009efff6
 800840c:	0026      	movs	r6, r4
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	3642      	adds	r6, #66	; 0x42
 8008412:	1d11      	adds	r1, r2, #4
 8008414:	6019      	str	r1, [r3, #0]
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	7033      	strb	r3, [r6, #0]
 800841a:	2301      	movs	r3, #1
 800841c:	e0a7      	b.n	800856e <_printf_i+0x1ca>
 800841e:	6808      	ldr	r0, [r1, #0]
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	1d0a      	adds	r2, r1, #4
 8008424:	0605      	lsls	r5, r0, #24
 8008426:	d50b      	bpl.n	8008440 <_printf_i+0x9c>
 8008428:	680d      	ldr	r5, [r1, #0]
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	2d00      	cmp	r5, #0
 800842e:	da03      	bge.n	8008438 <_printf_i+0x94>
 8008430:	232d      	movs	r3, #45	; 0x2d
 8008432:	9a04      	ldr	r2, [sp, #16]
 8008434:	426d      	negs	r5, r5
 8008436:	7013      	strb	r3, [r2, #0]
 8008438:	4b61      	ldr	r3, [pc, #388]	; (80085c0 <_printf_i+0x21c>)
 800843a:	270a      	movs	r7, #10
 800843c:	9303      	str	r3, [sp, #12]
 800843e:	e032      	b.n	80084a6 <_printf_i+0x102>
 8008440:	680d      	ldr	r5, [r1, #0]
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	0641      	lsls	r1, r0, #25
 8008446:	d5f1      	bpl.n	800842c <_printf_i+0x88>
 8008448:	b22d      	sxth	r5, r5
 800844a:	e7ef      	b.n	800842c <_printf_i+0x88>
 800844c:	680d      	ldr	r5, [r1, #0]
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	1d08      	adds	r0, r1, #4
 8008452:	6018      	str	r0, [r3, #0]
 8008454:	062e      	lsls	r6, r5, #24
 8008456:	d501      	bpl.n	800845c <_printf_i+0xb8>
 8008458:	680d      	ldr	r5, [r1, #0]
 800845a:	e003      	b.n	8008464 <_printf_i+0xc0>
 800845c:	066d      	lsls	r5, r5, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0xb4>
 8008460:	680d      	ldr	r5, [r1, #0]
 8008462:	b2ad      	uxth	r5, r5
 8008464:	4b56      	ldr	r3, [pc, #344]	; (80085c0 <_printf_i+0x21c>)
 8008466:	270a      	movs	r7, #10
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	2a6f      	cmp	r2, #111	; 0x6f
 800846c:	d117      	bne.n	800849e <_printf_i+0xfa>
 800846e:	2708      	movs	r7, #8
 8008470:	e015      	b.n	800849e <_printf_i+0xfa>
 8008472:	3145      	adds	r1, #69	; 0x45
 8008474:	700a      	strb	r2, [r1, #0]
 8008476:	4a52      	ldr	r2, [pc, #328]	; (80085c0 <_printf_i+0x21c>)
 8008478:	9203      	str	r2, [sp, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6821      	ldr	r1, [r4, #0]
 800847e:	ca20      	ldmia	r2!, {r5}
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	0608      	lsls	r0, r1, #24
 8008484:	d550      	bpl.n	8008528 <_printf_i+0x184>
 8008486:	07cb      	lsls	r3, r1, #31
 8008488:	d502      	bpl.n	8008490 <_printf_i+0xec>
 800848a:	2320      	movs	r3, #32
 800848c:	4319      	orrs	r1, r3
 800848e:	6021      	str	r1, [r4, #0]
 8008490:	2710      	movs	r7, #16
 8008492:	2d00      	cmp	r5, #0
 8008494:	d103      	bne.n	800849e <_printf_i+0xfa>
 8008496:	2320      	movs	r3, #32
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	439a      	bics	r2, r3
 800849c:	6022      	str	r2, [r4, #0]
 800849e:	0023      	movs	r3, r4
 80084a0:	2200      	movs	r2, #0
 80084a2:	3343      	adds	r3, #67	; 0x43
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	60a3      	str	r3, [r4, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	db03      	blt.n	80084b6 <_printf_i+0x112>
 80084ae:	2204      	movs	r2, #4
 80084b0:	6821      	ldr	r1, [r4, #0]
 80084b2:	4391      	bics	r1, r2
 80084b4:	6021      	str	r1, [r4, #0]
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	d102      	bne.n	80084c0 <_printf_i+0x11c>
 80084ba:	9e04      	ldr	r6, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00c      	beq.n	80084da <_printf_i+0x136>
 80084c0:	9e04      	ldr	r6, [sp, #16]
 80084c2:	0028      	movs	r0, r5
 80084c4:	0039      	movs	r1, r7
 80084c6:	f7f7 febf 	bl	8000248 <__aeabi_uidivmod>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	3e01      	subs	r6, #1
 80084ce:	5c5b      	ldrb	r3, [r3, r1]
 80084d0:	7033      	strb	r3, [r6, #0]
 80084d2:	002b      	movs	r3, r5
 80084d4:	0005      	movs	r5, r0
 80084d6:	429f      	cmp	r7, r3
 80084d8:	d9f3      	bls.n	80084c2 <_printf_i+0x11e>
 80084da:	2f08      	cmp	r7, #8
 80084dc:	d109      	bne.n	80084f2 <_printf_i+0x14e>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	07db      	lsls	r3, r3, #31
 80084e2:	d506      	bpl.n	80084f2 <_printf_i+0x14e>
 80084e4:	6863      	ldr	r3, [r4, #4]
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	dc02      	bgt.n	80084f2 <_printf_i+0x14e>
 80084ec:	2330      	movs	r3, #48	; 0x30
 80084ee:	3e01      	subs	r6, #1
 80084f0:	7033      	strb	r3, [r6, #0]
 80084f2:	9b04      	ldr	r3, [sp, #16]
 80084f4:	1b9b      	subs	r3, r3, r6
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	0021      	movs	r1, r4
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	9805      	ldr	r0, [sp, #20]
 8008500:	9b06      	ldr	r3, [sp, #24]
 8008502:	aa09      	add	r2, sp, #36	; 0x24
 8008504:	f7ff fede 	bl	80082c4 <_printf_common>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d135      	bne.n	8008578 <_printf_i+0x1d4>
 800850c:	2001      	movs	r0, #1
 800850e:	4240      	negs	r0, r0
 8008510:	b00b      	add	sp, #44	; 0x2c
 8008512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008514:	2220      	movs	r2, #32
 8008516:	6809      	ldr	r1, [r1, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	0022      	movs	r2, r4
 800851e:	2178      	movs	r1, #120	; 0x78
 8008520:	3245      	adds	r2, #69	; 0x45
 8008522:	7011      	strb	r1, [r2, #0]
 8008524:	4a27      	ldr	r2, [pc, #156]	; (80085c4 <_printf_i+0x220>)
 8008526:	e7a7      	b.n	8008478 <_printf_i+0xd4>
 8008528:	0648      	lsls	r0, r1, #25
 800852a:	d5ac      	bpl.n	8008486 <_printf_i+0xe2>
 800852c:	b2ad      	uxth	r5, r5
 800852e:	e7aa      	b.n	8008486 <_printf_i+0xe2>
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	680d      	ldr	r5, [r1, #0]
 8008534:	1d10      	adds	r0, r2, #4
 8008536:	6949      	ldr	r1, [r1, #20]
 8008538:	6018      	str	r0, [r3, #0]
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	062e      	lsls	r6, r5, #24
 800853e:	d501      	bpl.n	8008544 <_printf_i+0x1a0>
 8008540:	6019      	str	r1, [r3, #0]
 8008542:	e002      	b.n	800854a <_printf_i+0x1a6>
 8008544:	066d      	lsls	r5, r5, #25
 8008546:	d5fb      	bpl.n	8008540 <_printf_i+0x19c>
 8008548:	8019      	strh	r1, [r3, #0]
 800854a:	2300      	movs	r3, #0
 800854c:	9e04      	ldr	r6, [sp, #16]
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	e7d2      	b.n	80084f8 <_printf_i+0x154>
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	1d11      	adds	r1, r2, #4
 8008556:	6019      	str	r1, [r3, #0]
 8008558:	6816      	ldr	r6, [r2, #0]
 800855a:	2100      	movs	r1, #0
 800855c:	0030      	movs	r0, r6
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	f000 ff0a 	bl	8009378 <memchr>
 8008564:	2800      	cmp	r0, #0
 8008566:	d001      	beq.n	800856c <_printf_i+0x1c8>
 8008568:	1b80      	subs	r0, r0, r6
 800856a:	6060      	str	r0, [r4, #4]
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	2300      	movs	r3, #0
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	7013      	strb	r3, [r2, #0]
 8008576:	e7bf      	b.n	80084f8 <_printf_i+0x154>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	0032      	movs	r2, r6
 800857c:	9906      	ldr	r1, [sp, #24]
 800857e:	9805      	ldr	r0, [sp, #20]
 8008580:	9d07      	ldr	r5, [sp, #28]
 8008582:	47a8      	blx	r5
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d0c1      	beq.n	800850c <_printf_i+0x168>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	079b      	lsls	r3, r3, #30
 800858c:	d415      	bmi.n	80085ba <_printf_i+0x216>
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	68e0      	ldr	r0, [r4, #12]
 8008592:	4298      	cmp	r0, r3
 8008594:	dabc      	bge.n	8008510 <_printf_i+0x16c>
 8008596:	0018      	movs	r0, r3
 8008598:	e7ba      	b.n	8008510 <_printf_i+0x16c>
 800859a:	0022      	movs	r2, r4
 800859c:	2301      	movs	r3, #1
 800859e:	9906      	ldr	r1, [sp, #24]
 80085a0:	9805      	ldr	r0, [sp, #20]
 80085a2:	9e07      	ldr	r6, [sp, #28]
 80085a4:	3219      	adds	r2, #25
 80085a6:	47b0      	blx	r6
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d0af      	beq.n	800850c <_printf_i+0x168>
 80085ac:	3501      	adds	r5, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	dcf0      	bgt.n	800859a <_printf_i+0x1f6>
 80085b8:	e7e9      	b.n	800858e <_printf_i+0x1ea>
 80085ba:	2500      	movs	r5, #0
 80085bc:	e7f7      	b.n	80085ae <_printf_i+0x20a>
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	0800ad46 	.word	0x0800ad46
 80085c4:	0800ad57 	.word	0x0800ad57

080085c8 <siprintf>:
 80085c8:	b40e      	push	{r1, r2, r3}
 80085ca:	b500      	push	{lr}
 80085cc:	490b      	ldr	r1, [pc, #44]	; (80085fc <siprintf+0x34>)
 80085ce:	b09c      	sub	sp, #112	; 0x70
 80085d0:	ab1d      	add	r3, sp, #116	; 0x74
 80085d2:	9002      	str	r0, [sp, #8]
 80085d4:	9006      	str	r0, [sp, #24]
 80085d6:	9107      	str	r1, [sp, #28]
 80085d8:	9104      	str	r1, [sp, #16]
 80085da:	4809      	ldr	r0, [pc, #36]	; (8008600 <siprintf+0x38>)
 80085dc:	4909      	ldr	r1, [pc, #36]	; (8008604 <siprintf+0x3c>)
 80085de:	cb04      	ldmia	r3!, {r2}
 80085e0:	9105      	str	r1, [sp, #20]
 80085e2:	6800      	ldr	r0, [r0, #0]
 80085e4:	a902      	add	r1, sp, #8
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f001 fb90 	bl	8009d0c <_svfiprintf_r>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9a02      	ldr	r2, [sp, #8]
 80085f0:	7013      	strb	r3, [r2, #0]
 80085f2:	b01c      	add	sp, #112	; 0x70
 80085f4:	bc08      	pop	{r3}
 80085f6:	b003      	add	sp, #12
 80085f8:	4718      	bx	r3
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	7fffffff 	.word	0x7fffffff
 8008600:	2000000c 	.word	0x2000000c
 8008604:	ffff0208 	.word	0xffff0208

08008608 <quorem>:
 8008608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860a:	0006      	movs	r6, r0
 800860c:	690d      	ldr	r5, [r1, #16]
 800860e:	6933      	ldr	r3, [r6, #16]
 8008610:	b087      	sub	sp, #28
 8008612:	2000      	movs	r0, #0
 8008614:	9102      	str	r1, [sp, #8]
 8008616:	42ab      	cmp	r3, r5
 8008618:	db6b      	blt.n	80086f2 <quorem+0xea>
 800861a:	000b      	movs	r3, r1
 800861c:	3d01      	subs	r5, #1
 800861e:	00ac      	lsls	r4, r5, #2
 8008620:	3314      	adds	r3, #20
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	191b      	adds	r3, r3, r4
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	0033      	movs	r3, r6
 800862a:	3314      	adds	r3, #20
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	191c      	adds	r4, r3, r4
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	6827      	ldr	r7, [r4, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	0038      	movs	r0, r7
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	3301      	adds	r3, #1
 800863c:	0019      	movs	r1, r3
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	f7f7 fd7c 	bl	800013c <__udivsi3>
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	9000      	str	r0, [sp, #0]
 8008648:	429f      	cmp	r7, r3
 800864a:	d329      	bcc.n	80086a0 <quorem+0x98>
 800864c:	2300      	movs	r3, #0
 800864e:	469c      	mov	ip, r3
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	9f05      	ldr	r7, [sp, #20]
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	cf08      	ldmia	r7!, {r3}
 8008658:	9a00      	ldr	r2, [sp, #0]
 800865a:	b299      	uxth	r1, r3
 800865c:	4351      	muls	r1, r2
 800865e:	0c1b      	lsrs	r3, r3, #16
 8008660:	4353      	muls	r3, r2
 8008662:	4461      	add	r1, ip
 8008664:	0c0a      	lsrs	r2, r1, #16
 8008666:	189b      	adds	r3, r3, r2
 8008668:	0c1a      	lsrs	r2, r3, #16
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	6803      	ldr	r3, [r0, #0]
 800866e:	4694      	mov	ip, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	b289      	uxth	r1, r1
 8008676:	18d2      	adds	r2, r2, r3
 8008678:	6803      	ldr	r3, [r0, #0]
 800867a:	1a52      	subs	r2, r2, r1
 800867c:	0c19      	lsrs	r1, r3, #16
 800867e:	466b      	mov	r3, sp
 8008680:	8a9b      	ldrh	r3, [r3, #20]
 8008682:	1acb      	subs	r3, r1, r3
 8008684:	1411      	asrs	r1, r2, #16
 8008686:	185b      	adds	r3, r3, r1
 8008688:	1419      	asrs	r1, r3, #16
 800868a:	b292      	uxth	r2, r2
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	431a      	orrs	r2, r3
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	9104      	str	r1, [sp, #16]
 8008694:	c004      	stmia	r0!, {r2}
 8008696:	42bb      	cmp	r3, r7
 8008698:	d2dd      	bcs.n	8008656 <quorem+0x4e>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d02e      	beq.n	80086fe <quorem+0xf6>
 80086a0:	0030      	movs	r0, r6
 80086a2:	9902      	ldr	r1, [sp, #8]
 80086a4:	f001 f902 	bl	80098ac <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	db21      	blt.n	80086f0 <quorem+0xe8>
 80086ac:	0030      	movs	r0, r6
 80086ae:	2400      	movs	r4, #0
 80086b0:	9b00      	ldr	r3, [sp, #0]
 80086b2:	9902      	ldr	r1, [sp, #8]
 80086b4:	3301      	adds	r3, #1
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	3014      	adds	r0, #20
 80086ba:	3114      	adds	r1, #20
 80086bc:	6802      	ldr	r2, [r0, #0]
 80086be:	c908      	ldmia	r1!, {r3}
 80086c0:	b292      	uxth	r2, r2
 80086c2:	1914      	adds	r4, r2, r4
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	1aa2      	subs	r2, r4, r2
 80086c8:	6804      	ldr	r4, [r0, #0]
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	0c24      	lsrs	r4, r4, #16
 80086ce:	1ae3      	subs	r3, r4, r3
 80086d0:	1414      	asrs	r4, r2, #16
 80086d2:	191b      	adds	r3, r3, r4
 80086d4:	141c      	asrs	r4, r3, #16
 80086d6:	b292      	uxth	r2, r2
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	4313      	orrs	r3, r2
 80086dc:	c008      	stmia	r0!, {r3}
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	428b      	cmp	r3, r1
 80086e2:	d2eb      	bcs.n	80086bc <quorem+0xb4>
 80086e4:	9a01      	ldr	r2, [sp, #4]
 80086e6:	00ab      	lsls	r3, r5, #2
 80086e8:	18d3      	adds	r3, r2, r3
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	d010      	beq.n	8008712 <quorem+0x10a>
 80086f0:	9800      	ldr	r0, [sp, #0]
 80086f2:	b007      	add	sp, #28
 80086f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <quorem+0xfe>
 80086fc:	3d01      	subs	r5, #1
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	3c04      	subs	r4, #4
 8008702:	42a3      	cmp	r3, r4
 8008704:	d3f7      	bcc.n	80086f6 <quorem+0xee>
 8008706:	6135      	str	r5, [r6, #16]
 8008708:	e7ca      	b.n	80086a0 <quorem+0x98>
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	2a00      	cmp	r2, #0
 800870e:	d104      	bne.n	800871a <quorem+0x112>
 8008710:	3d01      	subs	r5, #1
 8008712:	9a01      	ldr	r2, [sp, #4]
 8008714:	3b04      	subs	r3, #4
 8008716:	429a      	cmp	r2, r3
 8008718:	d3f7      	bcc.n	800870a <quorem+0x102>
 800871a:	6135      	str	r5, [r6, #16]
 800871c:	e7e8      	b.n	80086f0 <quorem+0xe8>
	...

08008720 <_dtoa_r>:
 8008720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008722:	b09d      	sub	sp, #116	; 0x74
 8008724:	9202      	str	r2, [sp, #8]
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	9c03      	ldr	r4, [sp, #12]
 800872c:	930a      	str	r3, [sp, #40]	; 0x28
 800872e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008732:	0007      	movs	r7, r0
 8008734:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008736:	2c00      	cmp	r4, #0
 8008738:	d10e      	bne.n	8008758 <_dtoa_r+0x38>
 800873a:	2010      	movs	r0, #16
 800873c:	f000 fe12 	bl	8009364 <malloc>
 8008740:	1e02      	subs	r2, r0, #0
 8008742:	6278      	str	r0, [r7, #36]	; 0x24
 8008744:	d104      	bne.n	8008750 <_dtoa_r+0x30>
 8008746:	21ea      	movs	r1, #234	; 0xea
 8008748:	4bc0      	ldr	r3, [pc, #768]	; (8008a4c <_dtoa_r+0x32c>)
 800874a:	48c1      	ldr	r0, [pc, #772]	; (8008a50 <_dtoa_r+0x330>)
 800874c:	f001 fbf0 	bl	8009f30 <__assert_func>
 8008750:	6044      	str	r4, [r0, #4]
 8008752:	6084      	str	r4, [r0, #8]
 8008754:	6004      	str	r4, [r0, #0]
 8008756:	60c4      	str	r4, [r0, #12]
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	2900      	cmp	r1, #0
 800875e:	d00a      	beq.n	8008776 <_dtoa_r+0x56>
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	2301      	movs	r3, #1
 8008764:	4093      	lsls	r3, r2
 8008766:	604a      	str	r2, [r1, #4]
 8008768:	608b      	str	r3, [r1, #8]
 800876a:	0038      	movs	r0, r7
 800876c:	f000 fe5c 	bl	8009428 <_Bfree>
 8008770:	2200      	movs	r2, #0
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da21      	bge.n	80087c0 <_dtoa_r+0xa0>
 800877c:	2301      	movs	r3, #1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	930b      	str	r3, [sp, #44]	; 0x2c
 8008788:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800878a:	4bb2      	ldr	r3, [pc, #712]	; (8008a54 <_dtoa_r+0x334>)
 800878c:	002a      	movs	r2, r5
 800878e:	9318      	str	r3, [sp, #96]	; 0x60
 8008790:	401a      	ands	r2, r3
 8008792:	429a      	cmp	r2, r3
 8008794:	d117      	bne.n	80087c6 <_dtoa_r+0xa6>
 8008796:	4bb0      	ldr	r3, [pc, #704]	; (8008a58 <_dtoa_r+0x338>)
 8008798:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800879a:	0328      	lsls	r0, r5, #12
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	0b00      	lsrs	r0, r0, #12
 80087a2:	4318      	orrs	r0, r3
 80087a4:	d101      	bne.n	80087aa <_dtoa_r+0x8a>
 80087a6:	f000 fdc3 	bl	8009330 <_dtoa_r+0xc10>
 80087aa:	48ac      	ldr	r0, [pc, #688]	; (8008a5c <_dtoa_r+0x33c>)
 80087ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087ae:	9005      	str	r0, [sp, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <_dtoa_r+0x9a>
 80087b4:	4baa      	ldr	r3, [pc, #680]	; (8008a60 <_dtoa_r+0x340>)
 80087b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	9805      	ldr	r0, [sp, #20]
 80087bc:	b01d      	add	sp, #116	; 0x74
 80087be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c0:	2300      	movs	r3, #0
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	e7e0      	b.n	8008788 <_dtoa_r+0x68>
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80087ca:	9312      	str	r3, [sp, #72]	; 0x48
 80087cc:	9413      	str	r4, [sp, #76]	; 0x4c
 80087ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	f7f7 fe37 	bl	8000448 <__aeabi_dcmpeq>
 80087da:	1e04      	subs	r4, r0, #0
 80087dc:	d00b      	beq.n	80087f6 <_dtoa_r+0xd6>
 80087de:	2301      	movs	r3, #1
 80087e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	4b9f      	ldr	r3, [pc, #636]	; (8008a64 <_dtoa_r+0x344>)
 80087e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d0e5      	beq.n	80087ba <_dtoa_r+0x9a>
 80087ee:	4a9e      	ldr	r2, [pc, #632]	; (8008a68 <_dtoa_r+0x348>)
 80087f0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80087f2:	600a      	str	r2, [r1, #0]
 80087f4:	e7e1      	b.n	80087ba <_dtoa_r+0x9a>
 80087f6:	ab1a      	add	r3, sp, #104	; 0x68
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	0038      	movs	r0, r7
 8008800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008804:	f001 f906 	bl	8009a14 <__d2b>
 8008808:	006e      	lsls	r6, r5, #1
 800880a:	9004      	str	r0, [sp, #16]
 800880c:	0d76      	lsrs	r6, r6, #21
 800880e:	d100      	bne.n	8008812 <_dtoa_r+0xf2>
 8008810:	e07c      	b.n	800890c <_dtoa_r+0x1ec>
 8008812:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008814:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008818:	4a94      	ldr	r2, [pc, #592]	; (8008a6c <_dtoa_r+0x34c>)
 800881a:	031b      	lsls	r3, r3, #12
 800881c:	0b1b      	lsrs	r3, r3, #12
 800881e:	431a      	orrs	r2, r3
 8008820:	0011      	movs	r1, r2
 8008822:	4b93      	ldr	r3, [pc, #588]	; (8008a70 <_dtoa_r+0x350>)
 8008824:	9416      	str	r4, [sp, #88]	; 0x58
 8008826:	18f6      	adds	r6, r6, r3
 8008828:	2200      	movs	r2, #0
 800882a:	4b92      	ldr	r3, [pc, #584]	; (8008a74 <_dtoa_r+0x354>)
 800882c:	f7f9 fbaa 	bl	8001f84 <__aeabi_dsub>
 8008830:	4a91      	ldr	r2, [pc, #580]	; (8008a78 <_dtoa_r+0x358>)
 8008832:	4b92      	ldr	r3, [pc, #584]	; (8008a7c <_dtoa_r+0x35c>)
 8008834:	f7f9 f93a 	bl	8001aac <__aeabi_dmul>
 8008838:	4a91      	ldr	r2, [pc, #580]	; (8008a80 <_dtoa_r+0x360>)
 800883a:	4b92      	ldr	r3, [pc, #584]	; (8008a84 <_dtoa_r+0x364>)
 800883c:	f7f8 f9c6 	bl	8000bcc <__aeabi_dadd>
 8008840:	0004      	movs	r4, r0
 8008842:	0030      	movs	r0, r6
 8008844:	000d      	movs	r5, r1
 8008846:	f7f9 ff83 	bl	8002750 <__aeabi_i2d>
 800884a:	4a8f      	ldr	r2, [pc, #572]	; (8008a88 <_dtoa_r+0x368>)
 800884c:	4b8f      	ldr	r3, [pc, #572]	; (8008a8c <_dtoa_r+0x36c>)
 800884e:	f7f9 f92d 	bl	8001aac <__aeabi_dmul>
 8008852:	0002      	movs	r2, r0
 8008854:	000b      	movs	r3, r1
 8008856:	0020      	movs	r0, r4
 8008858:	0029      	movs	r1, r5
 800885a:	f7f8 f9b7 	bl	8000bcc <__aeabi_dadd>
 800885e:	0004      	movs	r4, r0
 8008860:	000d      	movs	r5, r1
 8008862:	f7f9 ff3f 	bl	80026e4 <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	9002      	str	r0, [sp, #8]
 800886a:	2300      	movs	r3, #0
 800886c:	0020      	movs	r0, r4
 800886e:	0029      	movs	r1, r5
 8008870:	f7f7 fdf0 	bl	8000454 <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	d00b      	beq.n	8008890 <_dtoa_r+0x170>
 8008878:	9802      	ldr	r0, [sp, #8]
 800887a:	f7f9 ff69 	bl	8002750 <__aeabi_i2d>
 800887e:	002b      	movs	r3, r5
 8008880:	0022      	movs	r2, r4
 8008882:	f7f7 fde1 	bl	8000448 <__aeabi_dcmpeq>
 8008886:	4243      	negs	r3, r0
 8008888:	4158      	adcs	r0, r3
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	1a1b      	subs	r3, r3, r0
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	2301      	movs	r3, #1
 8008892:	9315      	str	r3, [sp, #84]	; 0x54
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	2b16      	cmp	r3, #22
 8008898:	d80f      	bhi.n	80088ba <_dtoa_r+0x19a>
 800889a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800889c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800889e:	00da      	lsls	r2, r3, #3
 80088a0:	4b7b      	ldr	r3, [pc, #492]	; (8008a90 <_dtoa_r+0x370>)
 80088a2:	189b      	adds	r3, r3, r2
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f7f7 fdd4 	bl	8000454 <__aeabi_dcmplt>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d049      	beq.n	8008944 <_dtoa_r+0x224>
 80088b0:	9b02      	ldr	r3, [sp, #8]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9315      	str	r3, [sp, #84]	; 0x54
 80088ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088bc:	1b9e      	subs	r6, r3, r6
 80088be:	2300      	movs	r3, #0
 80088c0:	9308      	str	r3, [sp, #32]
 80088c2:	0033      	movs	r3, r6
 80088c4:	3b01      	subs	r3, #1
 80088c6:	930d      	str	r3, [sp, #52]	; 0x34
 80088c8:	d504      	bpl.n	80088d4 <_dtoa_r+0x1b4>
 80088ca:	2301      	movs	r3, #1
 80088cc:	1b9b      	subs	r3, r3, r6
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	2300      	movs	r3, #0
 80088d2:	930d      	str	r3, [sp, #52]	; 0x34
 80088d4:	9b02      	ldr	r3, [sp, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db36      	blt.n	8008948 <_dtoa_r+0x228>
 80088da:	9a02      	ldr	r2, [sp, #8]
 80088dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088de:	4694      	mov	ip, r2
 80088e0:	4463      	add	r3, ip
 80088e2:	930d      	str	r3, [sp, #52]	; 0x34
 80088e4:	2300      	movs	r3, #0
 80088e6:	9214      	str	r2, [sp, #80]	; 0x50
 80088e8:	930e      	str	r3, [sp, #56]	; 0x38
 80088ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ec:	2401      	movs	r4, #1
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d862      	bhi.n	80089b8 <_dtoa_r+0x298>
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	dd02      	ble.n	80088fc <_dtoa_r+0x1dc>
 80088f6:	2400      	movs	r4, #0
 80088f8:	3b04      	subs	r3, #4
 80088fa:	9322      	str	r3, [sp, #136]	; 0x88
 80088fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088fe:	1e98      	subs	r0, r3, #2
 8008900:	2803      	cmp	r0, #3
 8008902:	d862      	bhi.n	80089ca <_dtoa_r+0x2aa>
 8008904:	f7f7 fc06 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008908:	56343629 	.word	0x56343629
 800890c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800890e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008910:	189e      	adds	r6, r3, r2
 8008912:	4b60      	ldr	r3, [pc, #384]	; (8008a94 <_dtoa_r+0x374>)
 8008914:	18f2      	adds	r2, r6, r3
 8008916:	2a20      	cmp	r2, #32
 8008918:	dd0f      	ble.n	800893a <_dtoa_r+0x21a>
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	409d      	lsls	r5, r3
 8008920:	4b5d      	ldr	r3, [pc, #372]	; (8008a98 <_dtoa_r+0x378>)
 8008922:	9802      	ldr	r0, [sp, #8]
 8008924:	18f3      	adds	r3, r6, r3
 8008926:	40d8      	lsrs	r0, r3
 8008928:	4328      	orrs	r0, r5
 800892a:	f7f9 ff41 	bl	80027b0 <__aeabi_ui2d>
 800892e:	2301      	movs	r3, #1
 8008930:	4c5a      	ldr	r4, [pc, #360]	; (8008a9c <_dtoa_r+0x37c>)
 8008932:	3e01      	subs	r6, #1
 8008934:	1909      	adds	r1, r1, r4
 8008936:	9316      	str	r3, [sp, #88]	; 0x58
 8008938:	e776      	b.n	8008828 <_dtoa_r+0x108>
 800893a:	2320      	movs	r3, #32
 800893c:	9802      	ldr	r0, [sp, #8]
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	4098      	lsls	r0, r3
 8008942:	e7f2      	b.n	800892a <_dtoa_r+0x20a>
 8008944:	9015      	str	r0, [sp, #84]	; 0x54
 8008946:	e7b8      	b.n	80088ba <_dtoa_r+0x19a>
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	9a02      	ldr	r2, [sp, #8]
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	9308      	str	r3, [sp, #32]
 8008950:	4253      	negs	r3, r2
 8008952:	930e      	str	r3, [sp, #56]	; 0x38
 8008954:	2300      	movs	r3, #0
 8008956:	9314      	str	r3, [sp, #80]	; 0x50
 8008958:	e7c7      	b.n	80088ea <_dtoa_r+0x1ca>
 800895a:	2300      	movs	r3, #0
 800895c:	930f      	str	r3, [sp, #60]	; 0x3c
 800895e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc36      	bgt.n	80089d2 <_dtoa_r+0x2b2>
 8008964:	2301      	movs	r3, #1
 8008966:	001a      	movs	r2, r3
 8008968:	930c      	str	r3, [sp, #48]	; 0x30
 800896a:	9306      	str	r3, [sp, #24]
 800896c:	9223      	str	r2, [sp, #140]	; 0x8c
 800896e:	e00d      	b.n	800898c <_dtoa_r+0x26c>
 8008970:	2301      	movs	r3, #1
 8008972:	e7f3      	b.n	800895c <_dtoa_r+0x23c>
 8008974:	2300      	movs	r3, #0
 8008976:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008978:	930f      	str	r3, [sp, #60]	; 0x3c
 800897a:	4694      	mov	ip, r2
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	4463      	add	r3, ip
 8008980:	930c      	str	r3, [sp, #48]	; 0x30
 8008982:	3301      	adds	r3, #1
 8008984:	9306      	str	r3, [sp, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dc00      	bgt.n	800898c <_dtoa_r+0x26c>
 800898a:	2301      	movs	r3, #1
 800898c:	2200      	movs	r2, #0
 800898e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008990:	6042      	str	r2, [r0, #4]
 8008992:	3204      	adds	r2, #4
 8008994:	0015      	movs	r5, r2
 8008996:	3514      	adds	r5, #20
 8008998:	6841      	ldr	r1, [r0, #4]
 800899a:	429d      	cmp	r5, r3
 800899c:	d91d      	bls.n	80089da <_dtoa_r+0x2ba>
 800899e:	0038      	movs	r0, r7
 80089a0:	f000 fcfe 	bl	80093a0 <_Balloc>
 80089a4:	9005      	str	r0, [sp, #20]
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d11b      	bne.n	80089e2 <_dtoa_r+0x2c2>
 80089aa:	21d5      	movs	r1, #213	; 0xd5
 80089ac:	0002      	movs	r2, r0
 80089ae:	4b3c      	ldr	r3, [pc, #240]	; (8008aa0 <_dtoa_r+0x380>)
 80089b0:	0049      	lsls	r1, r1, #1
 80089b2:	e6ca      	b.n	800874a <_dtoa_r+0x2a>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7de      	b.n	8008976 <_dtoa_r+0x256>
 80089b8:	2300      	movs	r3, #0
 80089ba:	940f      	str	r4, [sp, #60]	; 0x3c
 80089bc:	9322      	str	r3, [sp, #136]	; 0x88
 80089be:	3b01      	subs	r3, #1
 80089c0:	930c      	str	r3, [sp, #48]	; 0x30
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	2200      	movs	r2, #0
 80089c6:	3313      	adds	r3, #19
 80089c8:	e7d0      	b.n	800896c <_dtoa_r+0x24c>
 80089ca:	2301      	movs	r3, #1
 80089cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ce:	3b02      	subs	r3, #2
 80089d0:	e7f6      	b.n	80089c0 <_dtoa_r+0x2a0>
 80089d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089d4:	930c      	str	r3, [sp, #48]	; 0x30
 80089d6:	9306      	str	r3, [sp, #24]
 80089d8:	e7d8      	b.n	800898c <_dtoa_r+0x26c>
 80089da:	3101      	adds	r1, #1
 80089dc:	6041      	str	r1, [r0, #4]
 80089de:	0052      	lsls	r2, r2, #1
 80089e0:	e7d8      	b.n	8008994 <_dtoa_r+0x274>
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	2b0e      	cmp	r3, #14
 80089ec:	d900      	bls.n	80089f0 <_dtoa_r+0x2d0>
 80089ee:	e0eb      	b.n	8008bc8 <_dtoa_r+0x4a8>
 80089f0:	2c00      	cmp	r4, #0
 80089f2:	d100      	bne.n	80089f6 <_dtoa_r+0x2d6>
 80089f4:	e0e8      	b.n	8008bc8 <_dtoa_r+0x4a8>
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd68      	ble.n	8008ace <_dtoa_r+0x3ae>
 80089fc:	001a      	movs	r2, r3
 80089fe:	210f      	movs	r1, #15
 8008a00:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <_dtoa_r+0x370>)
 8008a02:	400a      	ands	r2, r1
 8008a04:	00d2      	lsls	r2, r2, #3
 8008a06:	189b      	adds	r3, r3, r2
 8008a08:	681d      	ldr	r5, [r3, #0]
 8008a0a:	685e      	ldr	r6, [r3, #4]
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	111c      	asrs	r4, r3, #4
 8008a10:	2302      	movs	r3, #2
 8008a12:	9310      	str	r3, [sp, #64]	; 0x40
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	05db      	lsls	r3, r3, #23
 8008a18:	d50b      	bpl.n	8008a32 <_dtoa_r+0x312>
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <_dtoa_r+0x384>)
 8008a1c:	400c      	ands	r4, r1
 8008a1e:	6a1a      	ldr	r2, [r3, #32]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a24:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a26:	f7f8 fc3b 	bl	80012a0 <__aeabi_ddiv>
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a30:	9310      	str	r3, [sp, #64]	; 0x40
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <_dtoa_r+0x384>)
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	2c00      	cmp	r4, #0
 8008a38:	d136      	bne.n	8008aa8 <_dtoa_r+0x388>
 8008a3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a3e:	002a      	movs	r2, r5
 8008a40:	0033      	movs	r3, r6
 8008a42:	f7f8 fc2d 	bl	80012a0 <__aeabi_ddiv>
 8008a46:	900a      	str	r0, [sp, #40]	; 0x28
 8008a48:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a4a:	e05c      	b.n	8008b06 <_dtoa_r+0x3e6>
 8008a4c:	0800ad75 	.word	0x0800ad75
 8008a50:	0800ad8c 	.word	0x0800ad8c
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	0000270f 	.word	0x0000270f
 8008a5c:	0800ad71 	.word	0x0800ad71
 8008a60:	0800ad74 	.word	0x0800ad74
 8008a64:	0800ad44 	.word	0x0800ad44
 8008a68:	0800ad45 	.word	0x0800ad45
 8008a6c:	3ff00000 	.word	0x3ff00000
 8008a70:	fffffc01 	.word	0xfffffc01
 8008a74:	3ff80000 	.word	0x3ff80000
 8008a78:	636f4361 	.word	0x636f4361
 8008a7c:	3fd287a7 	.word	0x3fd287a7
 8008a80:	8b60c8b3 	.word	0x8b60c8b3
 8008a84:	3fc68a28 	.word	0x3fc68a28
 8008a88:	509f79fb 	.word	0x509f79fb
 8008a8c:	3fd34413 	.word	0x3fd34413
 8008a90:	0800ae88 	.word	0x0800ae88
 8008a94:	00000432 	.word	0x00000432
 8008a98:	00000412 	.word	0x00000412
 8008a9c:	fe100000 	.word	0xfe100000
 8008aa0:	0800adeb 	.word	0x0800adeb
 8008aa4:	0800ae60 	.word	0x0800ae60
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	421c      	tst	r4, r3
 8008aac:	d00b      	beq.n	8008ac6 <_dtoa_r+0x3a6>
 8008aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ab0:	0028      	movs	r0, r5
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	9310      	str	r3, [sp, #64]	; 0x40
 8008ab6:	9b07      	ldr	r3, [sp, #28]
 8008ab8:	0031      	movs	r1, r6
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f7f8 fff5 	bl	8001aac <__aeabi_dmul>
 8008ac2:	0005      	movs	r5, r0
 8008ac4:	000e      	movs	r6, r1
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	1064      	asrs	r4, r4, #1
 8008aca:	3308      	adds	r3, #8
 8008acc:	e7b2      	b.n	8008a34 <_dtoa_r+0x314>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d016      	beq.n	8008b06 <_dtoa_r+0x3e6>
 8008ad8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ada:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008adc:	425c      	negs	r4, r3
 8008ade:	230f      	movs	r3, #15
 8008ae0:	4ab5      	ldr	r2, [pc, #724]	; (8008db8 <_dtoa_r+0x698>)
 8008ae2:	4023      	ands	r3, r4
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	18d3      	adds	r3, r2, r3
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f7f8 ffde 	bl	8001aac <__aeabi_dmul>
 8008af0:	2601      	movs	r6, #1
 8008af2:	2300      	movs	r3, #0
 8008af4:	900a      	str	r0, [sp, #40]	; 0x28
 8008af6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008af8:	4db0      	ldr	r5, [pc, #704]	; (8008dbc <_dtoa_r+0x69c>)
 8008afa:	1124      	asrs	r4, r4, #4
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	d000      	beq.n	8008b02 <_dtoa_r+0x3e2>
 8008b00:	e094      	b.n	8008c2c <_dtoa_r+0x50c>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d19f      	bne.n	8008a46 <_dtoa_r+0x326>
 8008b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d100      	bne.n	8008b0e <_dtoa_r+0x3ee>
 8008b0c:	e09b      	b.n	8008c46 <_dtoa_r+0x526>
 8008b0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b12:	2200      	movs	r2, #0
 8008b14:	0020      	movs	r0, r4
 8008b16:	0029      	movs	r1, r5
 8008b18:	4ba9      	ldr	r3, [pc, #676]	; (8008dc0 <_dtoa_r+0x6a0>)
 8008b1a:	f7f7 fc9b 	bl	8000454 <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d100      	bne.n	8008b24 <_dtoa_r+0x404>
 8008b22:	e090      	b.n	8008c46 <_dtoa_r+0x526>
 8008b24:	9b06      	ldr	r3, [sp, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d100      	bne.n	8008b2c <_dtoa_r+0x40c>
 8008b2a:	e08c      	b.n	8008c46 <_dtoa_r+0x526>
 8008b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dd46      	ble.n	8008bc0 <_dtoa_r+0x4a0>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	0020      	movs	r0, r4
 8008b38:	0029      	movs	r1, r5
 8008b3a:	1e5e      	subs	r6, r3, #1
 8008b3c:	4ba1      	ldr	r3, [pc, #644]	; (8008dc4 <_dtoa_r+0x6a4>)
 8008b3e:	f7f8 ffb5 	bl	8001aac <__aeabi_dmul>
 8008b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b44:	900a      	str	r0, [sp, #40]	; 0x28
 8008b46:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b48:	3301      	adds	r3, #1
 8008b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	f7f9 fdfb 	bl	8002750 <__aeabi_i2d>
 8008b5a:	0022      	movs	r2, r4
 8008b5c:	002b      	movs	r3, r5
 8008b5e:	f7f8 ffa5 	bl	8001aac <__aeabi_dmul>
 8008b62:	2200      	movs	r2, #0
 8008b64:	4b98      	ldr	r3, [pc, #608]	; (8008dc8 <_dtoa_r+0x6a8>)
 8008b66:	f7f8 f831 	bl	8000bcc <__aeabi_dadd>
 8008b6a:	9010      	str	r0, [sp, #64]	; 0x40
 8008b6c:	9111      	str	r1, [sp, #68]	; 0x44
 8008b6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b72:	920a      	str	r2, [sp, #40]	; 0x28
 8008b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b76:	4a95      	ldr	r2, [pc, #596]	; (8008dcc <_dtoa_r+0x6ac>)
 8008b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b7a:	4694      	mov	ip, r2
 8008b7c:	4463      	add	r3, ip
 8008b7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b82:	9b07      	ldr	r3, [sp, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d161      	bne.n	8008c4c <_dtoa_r+0x52c>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	0020      	movs	r0, r4
 8008b8c:	0029      	movs	r1, r5
 8008b8e:	4b90      	ldr	r3, [pc, #576]	; (8008dd0 <_dtoa_r+0x6b0>)
 8008b90:	f7f9 f9f8 	bl	8001f84 <__aeabi_dsub>
 8008b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b98:	0004      	movs	r4, r0
 8008b9a:	000d      	movs	r5, r1
 8008b9c:	f7f7 fc6e 	bl	800047c <__aeabi_dcmpgt>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d000      	beq.n	8008ba6 <_dtoa_r+0x486>
 8008ba4:	e2b5      	b.n	8009112 <_dtoa_r+0x9f2>
 8008ba6:	488b      	ldr	r0, [pc, #556]	; (8008dd4 <_dtoa_r+0x6b4>)
 8008ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008baa:	4684      	mov	ip, r0
 8008bac:	4461      	add	r1, ip
 8008bae:	000b      	movs	r3, r1
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	0029      	movs	r1, r5
 8008bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bb6:	f7f7 fc4d 	bl	8000454 <__aeabi_dcmplt>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d000      	beq.n	8008bc0 <_dtoa_r+0x4a0>
 8008bbe:	e2a5      	b.n	800910c <_dtoa_r+0x9ec>
 8008bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bc2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc6:	940b      	str	r4, [sp, #44]	; 0x2c
 8008bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da00      	bge.n	8008bd0 <_dtoa_r+0x4b0>
 8008bce:	e171      	b.n	8008eb4 <_dtoa_r+0x794>
 8008bd0:	9a02      	ldr	r2, [sp, #8]
 8008bd2:	2a0e      	cmp	r2, #14
 8008bd4:	dd00      	ble.n	8008bd8 <_dtoa_r+0x4b8>
 8008bd6:	e16d      	b.n	8008eb4 <_dtoa_r+0x794>
 8008bd8:	4b77      	ldr	r3, [pc, #476]	; (8008db8 <_dtoa_r+0x698>)
 8008bda:	00d2      	lsls	r2, r2, #3
 8008bdc:	189b      	adds	r3, r3, r2
 8008bde:	685c      	ldr	r4, [r3, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	9308      	str	r3, [sp, #32]
 8008be4:	9409      	str	r4, [sp, #36]	; 0x24
 8008be6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	db00      	blt.n	8008bee <_dtoa_r+0x4ce>
 8008bec:	e0f6      	b.n	8008ddc <_dtoa_r+0x6bc>
 8008bee:	9b06      	ldr	r3, [sp, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dd00      	ble.n	8008bf6 <_dtoa_r+0x4d6>
 8008bf4:	e0f2      	b.n	8008ddc <_dtoa_r+0x6bc>
 8008bf6:	d000      	beq.n	8008bfa <_dtoa_r+0x4da>
 8008bf8:	e288      	b.n	800910c <_dtoa_r+0x9ec>
 8008bfa:	9808      	ldr	r0, [sp, #32]
 8008bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4b73      	ldr	r3, [pc, #460]	; (8008dd0 <_dtoa_r+0x6b0>)
 8008c02:	f7f8 ff53 	bl	8001aac <__aeabi_dmul>
 8008c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0a:	f7f7 fc41 	bl	8000490 <__aeabi_dcmpge>
 8008c0e:	9e06      	ldr	r6, [sp, #24]
 8008c10:	0035      	movs	r5, r6
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d000      	beq.n	8008c18 <_dtoa_r+0x4f8>
 8008c16:	e25f      	b.n	80090d8 <_dtoa_r+0x9b8>
 8008c18:	9b05      	ldr	r3, [sp, #20]
 8008c1a:	9a05      	ldr	r2, [sp, #20]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	2331      	movs	r3, #49	; 0x31
 8008c22:	7013      	strb	r3, [r2, #0]
 8008c24:	9b02      	ldr	r3, [sp, #8]
 8008c26:	3301      	adds	r3, #1
 8008c28:	9302      	str	r3, [sp, #8]
 8008c2a:	e25a      	b.n	80090e2 <_dtoa_r+0x9c2>
 8008c2c:	4234      	tst	r4, r6
 8008c2e:	d007      	beq.n	8008c40 <_dtoa_r+0x520>
 8008c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c32:	3301      	adds	r3, #1
 8008c34:	9310      	str	r3, [sp, #64]	; 0x40
 8008c36:	682a      	ldr	r2, [r5, #0]
 8008c38:	686b      	ldr	r3, [r5, #4]
 8008c3a:	f7f8 ff37 	bl	8001aac <__aeabi_dmul>
 8008c3e:	0033      	movs	r3, r6
 8008c40:	1064      	asrs	r4, r4, #1
 8008c42:	3508      	adds	r5, #8
 8008c44:	e75a      	b.n	8008afc <_dtoa_r+0x3dc>
 8008c46:	9e02      	ldr	r6, [sp, #8]
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	e780      	b.n	8008b4e <_dtoa_r+0x42e>
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c50:	1e5a      	subs	r2, r3, #1
 8008c52:	4b59      	ldr	r3, [pc, #356]	; (8008db8 <_dtoa_r+0x698>)
 8008c54:	00d2      	lsls	r2, r2, #3
 8008c56:	189b      	adds	r3, r3, r2
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	d051      	beq.n	8008d04 <_dtoa_r+0x5e4>
 8008c60:	2000      	movs	r0, #0
 8008c62:	495d      	ldr	r1, [pc, #372]	; (8008dd8 <_dtoa_r+0x6b8>)
 8008c64:	f7f8 fb1c 	bl	80012a0 <__aeabi_ddiv>
 8008c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c6c:	f7f9 f98a 	bl	8001f84 <__aeabi_dsub>
 8008c70:	9a05      	ldr	r2, [sp, #20]
 8008c72:	9b05      	ldr	r3, [sp, #20]
 8008c74:	4694      	mov	ip, r2
 8008c76:	9310      	str	r3, [sp, #64]	; 0x40
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	900a      	str	r0, [sp, #40]	; 0x28
 8008c7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c7e:	4463      	add	r3, ip
 8008c80:	9319      	str	r3, [sp, #100]	; 0x64
 8008c82:	0029      	movs	r1, r5
 8008c84:	0020      	movs	r0, r4
 8008c86:	f7f9 fd2d 	bl	80026e4 <__aeabi_d2iz>
 8008c8a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c8c:	f7f9 fd60 	bl	8002750 <__aeabi_i2d>
 8008c90:	0002      	movs	r2, r0
 8008c92:	000b      	movs	r3, r1
 8008c94:	0020      	movs	r0, r4
 8008c96:	0029      	movs	r1, r5
 8008c98:	f7f9 f974 	bl	8001f84 <__aeabi_dsub>
 8008c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ca6:	0004      	movs	r4, r0
 8008ca8:	3330      	adds	r3, #48	; 0x30
 8008caa:	7013      	strb	r3, [r2, #0]
 8008cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb0:	000d      	movs	r5, r1
 8008cb2:	f7f7 fbcf 	bl	8000454 <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d175      	bne.n	8008da6 <_dtoa_r+0x686>
 8008cba:	0022      	movs	r2, r4
 8008cbc:	002b      	movs	r3, r5
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	493f      	ldr	r1, [pc, #252]	; (8008dc0 <_dtoa_r+0x6a0>)
 8008cc2:	f7f9 f95f 	bl	8001f84 <__aeabi_dsub>
 8008cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cca:	f7f7 fbc3 	bl	8000454 <__aeabi_dcmplt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d000      	beq.n	8008cd4 <_dtoa_r+0x5b4>
 8008cd2:	e0d1      	b.n	8008e78 <_dtoa_r+0x758>
 8008cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cd6:	9a07      	ldr	r2, [sp, #28]
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <_dtoa_r+0x5be>
 8008cdc:	e770      	b.n	8008bc0 <_dtoa_r+0x4a0>
 8008cde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4b37      	ldr	r3, [pc, #220]	; (8008dc4 <_dtoa_r+0x6a4>)
 8008ce6:	f7f8 fee1 	bl	8001aac <__aeabi_dmul>
 8008cea:	4b36      	ldr	r3, [pc, #216]	; (8008dc4 <_dtoa_r+0x6a4>)
 8008cec:	900a      	str	r0, [sp, #40]	; 0x28
 8008cee:	910b      	str	r1, [sp, #44]	; 0x2c
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	0029      	movs	r1, r5
 8008cf6:	f7f8 fed9 	bl	8001aac <__aeabi_dmul>
 8008cfa:	9b07      	ldr	r3, [sp, #28]
 8008cfc:	0004      	movs	r4, r0
 8008cfe:	000d      	movs	r5, r1
 8008d00:	9310      	str	r3, [sp, #64]	; 0x40
 8008d02:	e7be      	b.n	8008c82 <_dtoa_r+0x562>
 8008d04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d08:	f7f8 fed0 	bl	8001aac <__aeabi_dmul>
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	4694      	mov	ip, r2
 8008d12:	930a      	str	r3, [sp, #40]	; 0x28
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	9010      	str	r0, [sp, #64]	; 0x40
 8008d18:	9111      	str	r1, [sp, #68]	; 0x44
 8008d1a:	4463      	add	r3, ip
 8008d1c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d1e:	0029      	movs	r1, r5
 8008d20:	0020      	movs	r0, r4
 8008d22:	f7f9 fcdf 	bl	80026e4 <__aeabi_d2iz>
 8008d26:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d28:	f7f9 fd12 	bl	8002750 <__aeabi_i2d>
 8008d2c:	0002      	movs	r2, r0
 8008d2e:	000b      	movs	r3, r1
 8008d30:	0020      	movs	r0, r4
 8008d32:	0029      	movs	r1, r5
 8008d34:	f7f9 f926 	bl	8001f84 <__aeabi_dsub>
 8008d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d3c:	3330      	adds	r3, #48	; 0x30
 8008d3e:	7013      	strb	r3, [r2, #0]
 8008d40:	0013      	movs	r3, r2
 8008d42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d44:	3301      	adds	r3, #1
 8008d46:	0004      	movs	r4, r0
 8008d48:	000d      	movs	r5, r1
 8008d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d12c      	bne.n	8008daa <_dtoa_r+0x68a>
 8008d50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d54:	9a05      	ldr	r2, [sp, #20]
 8008d56:	9b07      	ldr	r3, [sp, #28]
 8008d58:	4694      	mov	ip, r2
 8008d5a:	4463      	add	r3, ip
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	9307      	str	r3, [sp, #28]
 8008d60:	4b1d      	ldr	r3, [pc, #116]	; (8008dd8 <_dtoa_r+0x6b8>)
 8008d62:	f7f7 ff33 	bl	8000bcc <__aeabi_dadd>
 8008d66:	0002      	movs	r2, r0
 8008d68:	000b      	movs	r3, r1
 8008d6a:	0020      	movs	r0, r4
 8008d6c:	0029      	movs	r1, r5
 8008d6e:	f7f7 fb85 	bl	800047c <__aeabi_dcmpgt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d000      	beq.n	8008d78 <_dtoa_r+0x658>
 8008d76:	e07f      	b.n	8008e78 <_dtoa_r+0x758>
 8008d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4916      	ldr	r1, [pc, #88]	; (8008dd8 <_dtoa_r+0x6b8>)
 8008d80:	f7f9 f900 	bl	8001f84 <__aeabi_dsub>
 8008d84:	0002      	movs	r2, r0
 8008d86:	000b      	movs	r3, r1
 8008d88:	0020      	movs	r0, r4
 8008d8a:	0029      	movs	r1, r5
 8008d8c:	f7f7 fb62 	bl	8000454 <__aeabi_dcmplt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d100      	bne.n	8008d96 <_dtoa_r+0x676>
 8008d94:	e714      	b.n	8008bc0 <_dtoa_r+0x4a0>
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	001a      	movs	r2, r3
 8008d9a:	3a01      	subs	r2, #1
 8008d9c:	9207      	str	r2, [sp, #28]
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	2a30      	cmp	r2, #48	; 0x30
 8008da2:	d0f8      	beq.n	8008d96 <_dtoa_r+0x676>
 8008da4:	9307      	str	r3, [sp, #28]
 8008da6:	9602      	str	r6, [sp, #8]
 8008da8:	e054      	b.n	8008e54 <_dtoa_r+0x734>
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <_dtoa_r+0x6a4>)
 8008dae:	f7f8 fe7d 	bl	8001aac <__aeabi_dmul>
 8008db2:	0004      	movs	r4, r0
 8008db4:	000d      	movs	r5, r1
 8008db6:	e7b2      	b.n	8008d1e <_dtoa_r+0x5fe>
 8008db8:	0800ae88 	.word	0x0800ae88
 8008dbc:	0800ae60 	.word	0x0800ae60
 8008dc0:	3ff00000 	.word	0x3ff00000
 8008dc4:	40240000 	.word	0x40240000
 8008dc8:	401c0000 	.word	0x401c0000
 8008dcc:	fcc00000 	.word	0xfcc00000
 8008dd0:	40140000 	.word	0x40140000
 8008dd4:	7cc00000 	.word	0x7cc00000
 8008dd8:	3fe00000 	.word	0x3fe00000
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	9e05      	ldr	r6, [sp, #20]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	199b      	adds	r3, r3, r6
 8008de4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008de6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008de8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dea:	9a08      	ldr	r2, [sp, #32]
 8008dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dee:	0020      	movs	r0, r4
 8008df0:	0029      	movs	r1, r5
 8008df2:	f7f8 fa55 	bl	80012a0 <__aeabi_ddiv>
 8008df6:	f7f9 fc75 	bl	80026e4 <__aeabi_d2iz>
 8008dfa:	9006      	str	r0, [sp, #24]
 8008dfc:	f7f9 fca8 	bl	8002750 <__aeabi_i2d>
 8008e00:	9a08      	ldr	r2, [sp, #32]
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	f7f8 fe52 	bl	8001aac <__aeabi_dmul>
 8008e08:	0002      	movs	r2, r0
 8008e0a:	000b      	movs	r3, r1
 8008e0c:	0020      	movs	r0, r4
 8008e0e:	0029      	movs	r1, r5
 8008e10:	f7f9 f8b8 	bl	8001f84 <__aeabi_dsub>
 8008e14:	0033      	movs	r3, r6
 8008e16:	9a06      	ldr	r2, [sp, #24]
 8008e18:	3601      	adds	r6, #1
 8008e1a:	3230      	adds	r2, #48	; 0x30
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e20:	9607      	str	r6, [sp, #28]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d139      	bne.n	8008e9a <_dtoa_r+0x77a>
 8008e26:	0002      	movs	r2, r0
 8008e28:	000b      	movs	r3, r1
 8008e2a:	f7f7 fecf 	bl	8000bcc <__aeabi_dadd>
 8008e2e:	9a08      	ldr	r2, [sp, #32]
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	0004      	movs	r4, r0
 8008e34:	000d      	movs	r5, r1
 8008e36:	f7f7 fb21 	bl	800047c <__aeabi_dcmpgt>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d11b      	bne.n	8008e76 <_dtoa_r+0x756>
 8008e3e:	9a08      	ldr	r2, [sp, #32]
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	0020      	movs	r0, r4
 8008e44:	0029      	movs	r1, r5
 8008e46:	f7f7 faff 	bl	8000448 <__aeabi_dcmpeq>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d002      	beq.n	8008e54 <_dtoa_r+0x734>
 8008e4e:	9b06      	ldr	r3, [sp, #24]
 8008e50:	07db      	lsls	r3, r3, #31
 8008e52:	d410      	bmi.n	8008e76 <_dtoa_r+0x756>
 8008e54:	0038      	movs	r0, r7
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	f000 fae6 	bl	8009428 <_Bfree>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9a07      	ldr	r2, [sp, #28]
 8008e60:	9802      	ldr	r0, [sp, #8]
 8008e62:	7013      	strb	r3, [r2, #0]
 8008e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e66:	3001      	adds	r0, #1
 8008e68:	6018      	str	r0, [r3, #0]
 8008e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d100      	bne.n	8008e72 <_dtoa_r+0x752>
 8008e70:	e4a3      	b.n	80087ba <_dtoa_r+0x9a>
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e4a1      	b.n	80087ba <_dtoa_r+0x9a>
 8008e76:	9e02      	ldr	r6, [sp, #8]
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	9307      	str	r3, [sp, #28]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	2a39      	cmp	r2, #57	; 0x39
 8008e82:	d106      	bne.n	8008e92 <_dtoa_r+0x772>
 8008e84:	9a05      	ldr	r2, [sp, #20]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d1f7      	bne.n	8008e7a <_dtoa_r+0x75a>
 8008e8a:	2230      	movs	r2, #48	; 0x30
 8008e8c:	9905      	ldr	r1, [sp, #20]
 8008e8e:	3601      	adds	r6, #1
 8008e90:	700a      	strb	r2, [r1, #0]
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	3201      	adds	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e785      	b.n	8008da6 <_dtoa_r+0x686>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4bad      	ldr	r3, [pc, #692]	; (8009154 <_dtoa_r+0xa34>)
 8008e9e:	f7f8 fe05 	bl	8001aac <__aeabi_dmul>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	0004      	movs	r4, r0
 8008ea8:	000d      	movs	r5, r1
 8008eaa:	f7f7 facd 	bl	8000448 <__aeabi_dcmpeq>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d09b      	beq.n	8008dea <_dtoa_r+0x6ca>
 8008eb2:	e7cf      	b.n	8008e54 <_dtoa_r+0x734>
 8008eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	d100      	bne.n	8008ebc <_dtoa_r+0x79c>
 8008eba:	e082      	b.n	8008fc2 <_dtoa_r+0x8a2>
 8008ebc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ebe:	2a01      	cmp	r2, #1
 8008ec0:	dc66      	bgt.n	8008f90 <_dtoa_r+0x870>
 8008ec2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ec4:	2a00      	cmp	r2, #0
 8008ec6:	d05f      	beq.n	8008f88 <_dtoa_r+0x868>
 8008ec8:	4aa3      	ldr	r2, [pc, #652]	; (8009158 <_dtoa_r+0xa38>)
 8008eca:	189b      	adds	r3, r3, r2
 8008ecc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ece:	9c08      	ldr	r4, [sp, #32]
 8008ed0:	9a08      	ldr	r2, [sp, #32]
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	18d2      	adds	r2, r2, r3
 8008ed6:	9208      	str	r2, [sp, #32]
 8008ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eda:	0038      	movs	r0, r7
 8008edc:	18d3      	adds	r3, r2, r3
 8008ede:	930d      	str	r3, [sp, #52]	; 0x34
 8008ee0:	f000 fb52 	bl	8009588 <__i2b>
 8008ee4:	0005      	movs	r5, r0
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	dd0e      	ble.n	8008f08 <_dtoa_r+0x7e8>
 8008eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dd0b      	ble.n	8008f08 <_dtoa_r+0x7e8>
 8008ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ef2:	0023      	movs	r3, r4
 8008ef4:	4294      	cmp	r4, r2
 8008ef6:	dd00      	ble.n	8008efa <_dtoa_r+0x7da>
 8008ef8:	0013      	movs	r3, r2
 8008efa:	9a08      	ldr	r2, [sp, #32]
 8008efc:	1ae4      	subs	r4, r4, r3
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	9208      	str	r2, [sp, #32]
 8008f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	930d      	str	r3, [sp, #52]	; 0x34
 8008f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01f      	beq.n	8008f4e <_dtoa_r+0x82e>
 8008f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d05a      	beq.n	8008fca <_dtoa_r+0x8aa>
 8008f14:	2e00      	cmp	r6, #0
 8008f16:	dd11      	ble.n	8008f3c <_dtoa_r+0x81c>
 8008f18:	0029      	movs	r1, r5
 8008f1a:	0032      	movs	r2, r6
 8008f1c:	0038      	movs	r0, r7
 8008f1e:	f000 fbf9 	bl	8009714 <__pow5mult>
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	0001      	movs	r1, r0
 8008f26:	0005      	movs	r5, r0
 8008f28:	0038      	movs	r0, r7
 8008f2a:	f000 fb43 	bl	80095b4 <__multiply>
 8008f2e:	9904      	ldr	r1, [sp, #16]
 8008f30:	9007      	str	r0, [sp, #28]
 8008f32:	0038      	movs	r0, r7
 8008f34:	f000 fa78 	bl	8009428 <_Bfree>
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f3e:	1b9a      	subs	r2, r3, r6
 8008f40:	42b3      	cmp	r3, r6
 8008f42:	d004      	beq.n	8008f4e <_dtoa_r+0x82e>
 8008f44:	0038      	movs	r0, r7
 8008f46:	9904      	ldr	r1, [sp, #16]
 8008f48:	f000 fbe4 	bl	8009714 <__pow5mult>
 8008f4c:	9004      	str	r0, [sp, #16]
 8008f4e:	2101      	movs	r1, #1
 8008f50:	0038      	movs	r0, r7
 8008f52:	f000 fb19 	bl	8009588 <__i2b>
 8008f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f58:	0006      	movs	r6, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dd37      	ble.n	8008fce <_dtoa_r+0x8ae>
 8008f5e:	001a      	movs	r2, r3
 8008f60:	0001      	movs	r1, r0
 8008f62:	0038      	movs	r0, r7
 8008f64:	f000 fbd6 	bl	8009714 <__pow5mult>
 8008f68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f6a:	0006      	movs	r6, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	dd33      	ble.n	8008fd8 <_dtoa_r+0x8b8>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9307      	str	r3, [sp, #28]
 8008f74:	6933      	ldr	r3, [r6, #16]
 8008f76:	3303      	adds	r3, #3
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	18f3      	adds	r3, r6, r3
 8008f7c:	6858      	ldr	r0, [r3, #4]
 8008f7e:	f000 fabb 	bl	80094f8 <__hi0bits>
 8008f82:	2320      	movs	r3, #32
 8008f84:	1a18      	subs	r0, r3, r0
 8008f86:	e03f      	b.n	8009008 <_dtoa_r+0x8e8>
 8008f88:	2336      	movs	r3, #54	; 0x36
 8008f8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	e79d      	b.n	8008ecc <_dtoa_r+0x7ac>
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	1e5e      	subs	r6, r3, #1
 8008f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f96:	42b3      	cmp	r3, r6
 8008f98:	db08      	blt.n	8008fac <_dtoa_r+0x88c>
 8008f9a:	1b9e      	subs	r6, r3, r6
 8008f9c:	9b06      	ldr	r3, [sp, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da0c      	bge.n	8008fbc <_dtoa_r+0x89c>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	1a9c      	subs	r4, r3, r2
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e791      	b.n	8008ed0 <_dtoa_r+0x7b0>
 8008fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fb0:	1af3      	subs	r3, r6, r3
 8008fb2:	18d3      	adds	r3, r2, r3
 8008fb4:	960e      	str	r6, [sp, #56]	; 0x38
 8008fb6:	9314      	str	r3, [sp, #80]	; 0x50
 8008fb8:	2600      	movs	r6, #0
 8008fba:	e7ef      	b.n	8008f9c <_dtoa_r+0x87c>
 8008fbc:	9c08      	ldr	r4, [sp, #32]
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	e786      	b.n	8008ed0 <_dtoa_r+0x7b0>
 8008fc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008fc4:	9c08      	ldr	r4, [sp, #32]
 8008fc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fc8:	e78d      	b.n	8008ee6 <_dtoa_r+0x7c6>
 8008fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fcc:	e7ba      	b.n	8008f44 <_dtoa_r+0x824>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9307      	str	r3, [sp, #28]
 8008fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	dc13      	bgt.n	8009000 <_dtoa_r+0x8e0>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9307      	str	r3, [sp, #28]
 8008fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10e      	bne.n	8009000 <_dtoa_r+0x8e0>
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe4:	031b      	lsls	r3, r3, #12
 8008fe6:	d10b      	bne.n	8009000 <_dtoa_r+0x8e0>
 8008fe8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fec:	4213      	tst	r3, r2
 8008fee:	d007      	beq.n	8009000 <_dtoa_r+0x8e0>
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9308      	str	r3, [sp, #32]
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009002:	2001      	movs	r0, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1b5      	bne.n	8008f74 <_dtoa_r+0x854>
 8009008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800900a:	221f      	movs	r2, #31
 800900c:	1818      	adds	r0, r3, r0
 800900e:	0003      	movs	r3, r0
 8009010:	4013      	ands	r3, r2
 8009012:	4210      	tst	r0, r2
 8009014:	d046      	beq.n	80090a4 <_dtoa_r+0x984>
 8009016:	3201      	adds	r2, #1
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	2a04      	cmp	r2, #4
 800901c:	dd3f      	ble.n	800909e <_dtoa_r+0x97e>
 800901e:	221c      	movs	r2, #28
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	9a08      	ldr	r2, [sp, #32]
 8009024:	18e4      	adds	r4, r4, r3
 8009026:	18d2      	adds	r2, r2, r3
 8009028:	9208      	str	r2, [sp, #32]
 800902a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	930d      	str	r3, [sp, #52]	; 0x34
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	dd05      	ble.n	8009042 <_dtoa_r+0x922>
 8009036:	001a      	movs	r2, r3
 8009038:	0038      	movs	r0, r7
 800903a:	9904      	ldr	r1, [sp, #16]
 800903c:	f000 fbc6 	bl	80097cc <__lshift>
 8009040:	9004      	str	r0, [sp, #16]
 8009042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd05      	ble.n	8009054 <_dtoa_r+0x934>
 8009048:	0031      	movs	r1, r6
 800904a:	001a      	movs	r2, r3
 800904c:	0038      	movs	r0, r7
 800904e:	f000 fbbd 	bl	80097cc <__lshift>
 8009052:	0006      	movs	r6, r0
 8009054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009056:	2b00      	cmp	r3, #0
 8009058:	d026      	beq.n	80090a8 <_dtoa_r+0x988>
 800905a:	0031      	movs	r1, r6
 800905c:	9804      	ldr	r0, [sp, #16]
 800905e:	f000 fc25 	bl	80098ac <__mcmp>
 8009062:	2800      	cmp	r0, #0
 8009064:	da20      	bge.n	80090a8 <_dtoa_r+0x988>
 8009066:	9b02      	ldr	r3, [sp, #8]
 8009068:	220a      	movs	r2, #10
 800906a:	3b01      	subs	r3, #1
 800906c:	9302      	str	r3, [sp, #8]
 800906e:	0038      	movs	r0, r7
 8009070:	2300      	movs	r3, #0
 8009072:	9904      	ldr	r1, [sp, #16]
 8009074:	f000 f9fc 	bl	8009470 <__multadd>
 8009078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800907a:	9004      	str	r0, [sp, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d100      	bne.n	8009082 <_dtoa_r+0x962>
 8009080:	e160      	b.n	8009344 <_dtoa_r+0xc24>
 8009082:	2300      	movs	r3, #0
 8009084:	0029      	movs	r1, r5
 8009086:	220a      	movs	r2, #10
 8009088:	0038      	movs	r0, r7
 800908a:	f000 f9f1 	bl	8009470 <__multadd>
 800908e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009090:	0005      	movs	r5, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	dc47      	bgt.n	8009126 <_dtoa_r+0xa06>
 8009096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009098:	2b02      	cmp	r3, #2
 800909a:	dc0d      	bgt.n	80090b8 <_dtoa_r+0x998>
 800909c:	e043      	b.n	8009126 <_dtoa_r+0xa06>
 800909e:	2a04      	cmp	r2, #4
 80090a0:	d0c6      	beq.n	8009030 <_dtoa_r+0x910>
 80090a2:	0013      	movs	r3, r2
 80090a4:	331c      	adds	r3, #28
 80090a6:	e7bc      	b.n	8009022 <_dtoa_r+0x902>
 80090a8:	9b06      	ldr	r3, [sp, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dc35      	bgt.n	800911a <_dtoa_r+0x9fa>
 80090ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	dd32      	ble.n	800911a <_dtoa_r+0x9fa>
 80090b4:	9b06      	ldr	r3, [sp, #24]
 80090b6:	930c      	str	r3, [sp, #48]	; 0x30
 80090b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10c      	bne.n	80090d8 <_dtoa_r+0x9b8>
 80090be:	0031      	movs	r1, r6
 80090c0:	2205      	movs	r2, #5
 80090c2:	0038      	movs	r0, r7
 80090c4:	f000 f9d4 	bl	8009470 <__multadd>
 80090c8:	0006      	movs	r6, r0
 80090ca:	0001      	movs	r1, r0
 80090cc:	9804      	ldr	r0, [sp, #16]
 80090ce:	f000 fbed 	bl	80098ac <__mcmp>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	dd00      	ble.n	80090d8 <_dtoa_r+0x9b8>
 80090d6:	e59f      	b.n	8008c18 <_dtoa_r+0x4f8>
 80090d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090da:	43db      	mvns	r3, r3
 80090dc:	9302      	str	r3, [sp, #8]
 80090de:	9b05      	ldr	r3, [sp, #20]
 80090e0:	9307      	str	r3, [sp, #28]
 80090e2:	2400      	movs	r4, #0
 80090e4:	0031      	movs	r1, r6
 80090e6:	0038      	movs	r0, r7
 80090e8:	f000 f99e 	bl	8009428 <_Bfree>
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d100      	bne.n	80090f2 <_dtoa_r+0x9d2>
 80090f0:	e6b0      	b.n	8008e54 <_dtoa_r+0x734>
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	d005      	beq.n	8009102 <_dtoa_r+0x9e2>
 80090f6:	42ac      	cmp	r4, r5
 80090f8:	d003      	beq.n	8009102 <_dtoa_r+0x9e2>
 80090fa:	0021      	movs	r1, r4
 80090fc:	0038      	movs	r0, r7
 80090fe:	f000 f993 	bl	8009428 <_Bfree>
 8009102:	0029      	movs	r1, r5
 8009104:	0038      	movs	r0, r7
 8009106:	f000 f98f 	bl	8009428 <_Bfree>
 800910a:	e6a3      	b.n	8008e54 <_dtoa_r+0x734>
 800910c:	2600      	movs	r6, #0
 800910e:	0035      	movs	r5, r6
 8009110:	e7e2      	b.n	80090d8 <_dtoa_r+0x9b8>
 8009112:	9602      	str	r6, [sp, #8]
 8009114:	9e07      	ldr	r6, [sp, #28]
 8009116:	0035      	movs	r5, r6
 8009118:	e57e      	b.n	8008c18 <_dtoa_r+0x4f8>
 800911a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d100      	bne.n	8009122 <_dtoa_r+0xa02>
 8009120:	e0c8      	b.n	80092b4 <_dtoa_r+0xb94>
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	930c      	str	r3, [sp, #48]	; 0x30
 8009126:	2c00      	cmp	r4, #0
 8009128:	dd05      	ble.n	8009136 <_dtoa_r+0xa16>
 800912a:	0029      	movs	r1, r5
 800912c:	0022      	movs	r2, r4
 800912e:	0038      	movs	r0, r7
 8009130:	f000 fb4c 	bl	80097cc <__lshift>
 8009134:	0005      	movs	r5, r0
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	0028      	movs	r0, r5
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01f      	beq.n	800917e <_dtoa_r+0xa5e>
 800913e:	0038      	movs	r0, r7
 8009140:	6869      	ldr	r1, [r5, #4]
 8009142:	f000 f92d 	bl	80093a0 <_Balloc>
 8009146:	1e04      	subs	r4, r0, #0
 8009148:	d10c      	bne.n	8009164 <_dtoa_r+0xa44>
 800914a:	0002      	movs	r2, r0
 800914c:	4b03      	ldr	r3, [pc, #12]	; (800915c <_dtoa_r+0xa3c>)
 800914e:	4904      	ldr	r1, [pc, #16]	; (8009160 <_dtoa_r+0xa40>)
 8009150:	f7ff fafb 	bl	800874a <_dtoa_r+0x2a>
 8009154:	40240000 	.word	0x40240000
 8009158:	00000433 	.word	0x00000433
 800915c:	0800adeb 	.word	0x0800adeb
 8009160:	000002ea 	.word	0x000002ea
 8009164:	0029      	movs	r1, r5
 8009166:	692b      	ldr	r3, [r5, #16]
 8009168:	310c      	adds	r1, #12
 800916a:	1c9a      	adds	r2, r3, #2
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	300c      	adds	r0, #12
 8009170:	f000 f90d 	bl	800938e <memcpy>
 8009174:	2201      	movs	r2, #1
 8009176:	0021      	movs	r1, r4
 8009178:	0038      	movs	r0, r7
 800917a:	f000 fb27 	bl	80097cc <__lshift>
 800917e:	002c      	movs	r4, r5
 8009180:	0005      	movs	r5, r0
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	9308      	str	r3, [sp, #32]
 8009186:	0031      	movs	r1, r6
 8009188:	9804      	ldr	r0, [sp, #16]
 800918a:	f7ff fa3d 	bl	8008608 <quorem>
 800918e:	0003      	movs	r3, r0
 8009190:	0021      	movs	r1, r4
 8009192:	3330      	adds	r3, #48	; 0x30
 8009194:	900e      	str	r0, [sp, #56]	; 0x38
 8009196:	9804      	ldr	r0, [sp, #16]
 8009198:	9306      	str	r3, [sp, #24]
 800919a:	f000 fb87 	bl	80098ac <__mcmp>
 800919e:	002a      	movs	r2, r5
 80091a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80091a2:	0031      	movs	r1, r6
 80091a4:	0038      	movs	r0, r7
 80091a6:	f000 fb9d 	bl	80098e4 <__mdiff>
 80091aa:	68c3      	ldr	r3, [r0, #12]
 80091ac:	9007      	str	r0, [sp, #28]
 80091ae:	9310      	str	r3, [sp, #64]	; 0x40
 80091b0:	2301      	movs	r3, #1
 80091b2:	930d      	str	r3, [sp, #52]	; 0x34
 80091b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <_dtoa_r+0xaa4>
 80091ba:	0001      	movs	r1, r0
 80091bc:	9804      	ldr	r0, [sp, #16]
 80091be:	f000 fb75 	bl	80098ac <__mcmp>
 80091c2:	900d      	str	r0, [sp, #52]	; 0x34
 80091c4:	0038      	movs	r0, r7
 80091c6:	9907      	ldr	r1, [sp, #28]
 80091c8:	f000 f92e 	bl	8009428 <_Bfree>
 80091cc:	2301      	movs	r3, #1
 80091ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091d2:	4018      	ands	r0, r3
 80091d4:	9b08      	ldr	r3, [sp, #32]
 80091d6:	3301      	adds	r3, #1
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091dc:	4313      	orrs	r3, r2
 80091de:	4303      	orrs	r3, r0
 80091e0:	d10c      	bne.n	80091fc <_dtoa_r+0xadc>
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	2b39      	cmp	r3, #57	; 0x39
 80091e6:	d025      	beq.n	8009234 <_dtoa_r+0xb14>
 80091e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dd02      	ble.n	80091f4 <_dtoa_r+0xad4>
 80091ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f0:	3331      	adds	r3, #49	; 0x31
 80091f2:	9306      	str	r3, [sp, #24]
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	9a06      	ldr	r2, [sp, #24]
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e773      	b.n	80090e4 <_dtoa_r+0x9c4>
 80091fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	db03      	blt.n	800920a <_dtoa_r+0xaea>
 8009202:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009204:	4313      	orrs	r3, r2
 8009206:	4303      	orrs	r3, r0
 8009208:	d11f      	bne.n	800924a <_dtoa_r+0xb2a>
 800920a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920c:	2b00      	cmp	r3, #0
 800920e:	ddf1      	ble.n	80091f4 <_dtoa_r+0xad4>
 8009210:	9904      	ldr	r1, [sp, #16]
 8009212:	2201      	movs	r2, #1
 8009214:	0038      	movs	r0, r7
 8009216:	f000 fad9 	bl	80097cc <__lshift>
 800921a:	0031      	movs	r1, r6
 800921c:	9004      	str	r0, [sp, #16]
 800921e:	f000 fb45 	bl	80098ac <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	dc03      	bgt.n	800922e <_dtoa_r+0xb0e>
 8009226:	d1e5      	bne.n	80091f4 <_dtoa_r+0xad4>
 8009228:	9b06      	ldr	r3, [sp, #24]
 800922a:	07db      	lsls	r3, r3, #31
 800922c:	d5e2      	bpl.n	80091f4 <_dtoa_r+0xad4>
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	2b39      	cmp	r3, #57	; 0x39
 8009232:	d1dc      	bne.n	80091ee <_dtoa_r+0xace>
 8009234:	2339      	movs	r3, #57	; 0x39
 8009236:	9a08      	ldr	r2, [sp, #32]
 8009238:	7013      	strb	r3, [r2, #0]
 800923a:	9b07      	ldr	r3, [sp, #28]
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	3b01      	subs	r3, #1
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	2a39      	cmp	r2, #57	; 0x39
 8009244:	d06c      	beq.n	8009320 <_dtoa_r+0xc00>
 8009246:	3201      	adds	r2, #1
 8009248:	e7d6      	b.n	80091f8 <_dtoa_r+0xad8>
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd07      	ble.n	8009260 <_dtoa_r+0xb40>
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	2b39      	cmp	r3, #57	; 0x39
 8009254:	d0ee      	beq.n	8009234 <_dtoa_r+0xb14>
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	9a08      	ldr	r2, [sp, #32]
 800925a:	3301      	adds	r3, #1
 800925c:	7013      	strb	r3, [r2, #0]
 800925e:	e741      	b.n	80090e4 <_dtoa_r+0x9c4>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	9a06      	ldr	r2, [sp, #24]
 8009264:	701a      	strb	r2, [r3, #0]
 8009266:	2301      	movs	r3, #1
 8009268:	9a05      	ldr	r2, [sp, #20]
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	9a08      	ldr	r2, [sp, #32]
 800926e:	189b      	adds	r3, r3, r2
 8009270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009272:	429a      	cmp	r2, r3
 8009274:	d03e      	beq.n	80092f4 <_dtoa_r+0xbd4>
 8009276:	2300      	movs	r3, #0
 8009278:	220a      	movs	r2, #10
 800927a:	9904      	ldr	r1, [sp, #16]
 800927c:	0038      	movs	r0, r7
 800927e:	f000 f8f7 	bl	8009470 <__multadd>
 8009282:	2300      	movs	r3, #0
 8009284:	9004      	str	r0, [sp, #16]
 8009286:	220a      	movs	r2, #10
 8009288:	0021      	movs	r1, r4
 800928a:	0038      	movs	r0, r7
 800928c:	42ac      	cmp	r4, r5
 800928e:	d106      	bne.n	800929e <_dtoa_r+0xb7e>
 8009290:	f000 f8ee 	bl	8009470 <__multadd>
 8009294:	0004      	movs	r4, r0
 8009296:	0005      	movs	r5, r0
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	9308      	str	r3, [sp, #32]
 800929c:	e773      	b.n	8009186 <_dtoa_r+0xa66>
 800929e:	f000 f8e7 	bl	8009470 <__multadd>
 80092a2:	0029      	movs	r1, r5
 80092a4:	0004      	movs	r4, r0
 80092a6:	2300      	movs	r3, #0
 80092a8:	220a      	movs	r2, #10
 80092aa:	0038      	movs	r0, r7
 80092ac:	f000 f8e0 	bl	8009470 <__multadd>
 80092b0:	0005      	movs	r5, r0
 80092b2:	e7f1      	b.n	8009298 <_dtoa_r+0xb78>
 80092b4:	9b06      	ldr	r3, [sp, #24]
 80092b6:	930c      	str	r3, [sp, #48]	; 0x30
 80092b8:	2400      	movs	r4, #0
 80092ba:	0031      	movs	r1, r6
 80092bc:	9804      	ldr	r0, [sp, #16]
 80092be:	f7ff f9a3 	bl	8008608 <quorem>
 80092c2:	9b05      	ldr	r3, [sp, #20]
 80092c4:	3030      	adds	r0, #48	; 0x30
 80092c6:	5518      	strb	r0, [r3, r4]
 80092c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ca:	3401      	adds	r4, #1
 80092cc:	9006      	str	r0, [sp, #24]
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	dd07      	ble.n	80092e2 <_dtoa_r+0xbc2>
 80092d2:	2300      	movs	r3, #0
 80092d4:	220a      	movs	r2, #10
 80092d6:	0038      	movs	r0, r7
 80092d8:	9904      	ldr	r1, [sp, #16]
 80092da:	f000 f8c9 	bl	8009470 <__multadd>
 80092de:	9004      	str	r0, [sp, #16]
 80092e0:	e7eb      	b.n	80092ba <_dtoa_r+0xb9a>
 80092e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e4:	2001      	movs	r0, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	dd00      	ble.n	80092ec <_dtoa_r+0xbcc>
 80092ea:	0018      	movs	r0, r3
 80092ec:	2400      	movs	r4, #0
 80092ee:	9b05      	ldr	r3, [sp, #20]
 80092f0:	181b      	adds	r3, r3, r0
 80092f2:	9307      	str	r3, [sp, #28]
 80092f4:	9904      	ldr	r1, [sp, #16]
 80092f6:	2201      	movs	r2, #1
 80092f8:	0038      	movs	r0, r7
 80092fa:	f000 fa67 	bl	80097cc <__lshift>
 80092fe:	0031      	movs	r1, r6
 8009300:	9004      	str	r0, [sp, #16]
 8009302:	f000 fad3 	bl	80098ac <__mcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	dc97      	bgt.n	800923a <_dtoa_r+0xb1a>
 800930a:	d102      	bne.n	8009312 <_dtoa_r+0xbf2>
 800930c:	9b06      	ldr	r3, [sp, #24]
 800930e:	07db      	lsls	r3, r3, #31
 8009310:	d493      	bmi.n	800923a <_dtoa_r+0xb1a>
 8009312:	9b07      	ldr	r3, [sp, #28]
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	3b01      	subs	r3, #1
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	2a30      	cmp	r2, #48	; 0x30
 800931c:	d0fa      	beq.n	8009314 <_dtoa_r+0xbf4>
 800931e:	e6e1      	b.n	80090e4 <_dtoa_r+0x9c4>
 8009320:	9a05      	ldr	r2, [sp, #20]
 8009322:	429a      	cmp	r2, r3
 8009324:	d18a      	bne.n	800923c <_dtoa_r+0xb1c>
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	3301      	adds	r3, #1
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	2331      	movs	r3, #49	; 0x31
 800932e:	e795      	b.n	800925c <_dtoa_r+0xb3c>
 8009330:	4b08      	ldr	r3, [pc, #32]	; (8009354 <_dtoa_r+0xc34>)
 8009332:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	4b08      	ldr	r3, [pc, #32]	; (8009358 <_dtoa_r+0xc38>)
 8009338:	2a00      	cmp	r2, #0
 800933a:	d001      	beq.n	8009340 <_dtoa_r+0xc20>
 800933c:	f7ff fa3b 	bl	80087b6 <_dtoa_r+0x96>
 8009340:	f7ff fa3b 	bl	80087ba <_dtoa_r+0x9a>
 8009344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009346:	2b00      	cmp	r3, #0
 8009348:	dcb6      	bgt.n	80092b8 <_dtoa_r+0xb98>
 800934a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800934c:	2b02      	cmp	r3, #2
 800934e:	dd00      	ble.n	8009352 <_dtoa_r+0xc32>
 8009350:	e6b2      	b.n	80090b8 <_dtoa_r+0x998>
 8009352:	e7b1      	b.n	80092b8 <_dtoa_r+0xb98>
 8009354:	0800ad68 	.word	0x0800ad68
 8009358:	0800ad70 	.word	0x0800ad70

0800935c <_localeconv_r>:
 800935c:	4800      	ldr	r0, [pc, #0]	; (8009360 <_localeconv_r+0x4>)
 800935e:	4770      	bx	lr
 8009360:	20000160 	.word	0x20000160

08009364 <malloc>:
 8009364:	b510      	push	{r4, lr}
 8009366:	4b03      	ldr	r3, [pc, #12]	; (8009374 <malloc+0x10>)
 8009368:	0001      	movs	r1, r0
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	f000 fc0e 	bl	8009b8c <_malloc_r>
 8009370:	bd10      	pop	{r4, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	2000000c 	.word	0x2000000c

08009378 <memchr>:
 8009378:	b2c9      	uxtb	r1, r1
 800937a:	1882      	adds	r2, r0, r2
 800937c:	4290      	cmp	r0, r2
 800937e:	d101      	bne.n	8009384 <memchr+0xc>
 8009380:	2000      	movs	r0, #0
 8009382:	4770      	bx	lr
 8009384:	7803      	ldrb	r3, [r0, #0]
 8009386:	428b      	cmp	r3, r1
 8009388:	d0fb      	beq.n	8009382 <memchr+0xa>
 800938a:	3001      	adds	r0, #1
 800938c:	e7f6      	b.n	800937c <memchr+0x4>

0800938e <memcpy>:
 800938e:	2300      	movs	r3, #0
 8009390:	b510      	push	{r4, lr}
 8009392:	429a      	cmp	r2, r3
 8009394:	d100      	bne.n	8009398 <memcpy+0xa>
 8009396:	bd10      	pop	{r4, pc}
 8009398:	5ccc      	ldrb	r4, [r1, r3]
 800939a:	54c4      	strb	r4, [r0, r3]
 800939c:	3301      	adds	r3, #1
 800939e:	e7f8      	b.n	8009392 <memcpy+0x4>

080093a0 <_Balloc>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093a4:	0006      	movs	r6, r0
 80093a6:	000c      	movs	r4, r1
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	d10e      	bne.n	80093ca <_Balloc+0x2a>
 80093ac:	2010      	movs	r0, #16
 80093ae:	f7ff ffd9 	bl	8009364 <malloc>
 80093b2:	1e02      	subs	r2, r0, #0
 80093b4:	6270      	str	r0, [r6, #36]	; 0x24
 80093b6:	d104      	bne.n	80093c2 <_Balloc+0x22>
 80093b8:	2166      	movs	r1, #102	; 0x66
 80093ba:	4b19      	ldr	r3, [pc, #100]	; (8009420 <_Balloc+0x80>)
 80093bc:	4819      	ldr	r0, [pc, #100]	; (8009424 <_Balloc+0x84>)
 80093be:	f000 fdb7 	bl	8009f30 <__assert_func>
 80093c2:	6045      	str	r5, [r0, #4]
 80093c4:	6085      	str	r5, [r0, #8]
 80093c6:	6005      	str	r5, [r0, #0]
 80093c8:	60c5      	str	r5, [r0, #12]
 80093ca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80093cc:	68eb      	ldr	r3, [r5, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d013      	beq.n	80093fa <_Balloc+0x5a>
 80093d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093d4:	00a2      	lsls	r2, r4, #2
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	189b      	adds	r3, r3, r2
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	2800      	cmp	r0, #0
 80093de:	d118      	bne.n	8009412 <_Balloc+0x72>
 80093e0:	2101      	movs	r1, #1
 80093e2:	000d      	movs	r5, r1
 80093e4:	40a5      	lsls	r5, r4
 80093e6:	1d6a      	adds	r2, r5, #5
 80093e8:	0030      	movs	r0, r6
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	f000 fb76 	bl	8009adc <_calloc_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d00c      	beq.n	800940e <_Balloc+0x6e>
 80093f4:	6044      	str	r4, [r0, #4]
 80093f6:	6085      	str	r5, [r0, #8]
 80093f8:	e00d      	b.n	8009416 <_Balloc+0x76>
 80093fa:	2221      	movs	r2, #33	; 0x21
 80093fc:	2104      	movs	r1, #4
 80093fe:	0030      	movs	r0, r6
 8009400:	f000 fb6c 	bl	8009adc <_calloc_r>
 8009404:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009406:	60e8      	str	r0, [r5, #12]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e1      	bne.n	80093d2 <_Balloc+0x32>
 800940e:	2000      	movs	r0, #0
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	6802      	ldr	r2, [r0, #0]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	2300      	movs	r3, #0
 8009418:	6103      	str	r3, [r0, #16]
 800941a:	60c3      	str	r3, [r0, #12]
 800941c:	e7f8      	b.n	8009410 <_Balloc+0x70>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	0800ad75 	.word	0x0800ad75
 8009424:	0800adfc 	.word	0x0800adfc

08009428 <_Bfree>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800942c:	0005      	movs	r5, r0
 800942e:	000c      	movs	r4, r1
 8009430:	2e00      	cmp	r6, #0
 8009432:	d10e      	bne.n	8009452 <_Bfree+0x2a>
 8009434:	2010      	movs	r0, #16
 8009436:	f7ff ff95 	bl	8009364 <malloc>
 800943a:	1e02      	subs	r2, r0, #0
 800943c:	6268      	str	r0, [r5, #36]	; 0x24
 800943e:	d104      	bne.n	800944a <_Bfree+0x22>
 8009440:	218a      	movs	r1, #138	; 0x8a
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <_Bfree+0x40>)
 8009444:	4809      	ldr	r0, [pc, #36]	; (800946c <_Bfree+0x44>)
 8009446:	f000 fd73 	bl	8009f30 <__assert_func>
 800944a:	6046      	str	r6, [r0, #4]
 800944c:	6086      	str	r6, [r0, #8]
 800944e:	6006      	str	r6, [r0, #0]
 8009450:	60c6      	str	r6, [r0, #12]
 8009452:	2c00      	cmp	r4, #0
 8009454:	d007      	beq.n	8009466 <_Bfree+0x3e>
 8009456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009458:	6862      	ldr	r2, [r4, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	0092      	lsls	r2, r2, #2
 800945e:	189b      	adds	r3, r3, r2
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	601c      	str	r4, [r3, #0]
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	0800ad75 	.word	0x0800ad75
 800946c:	0800adfc 	.word	0x0800adfc

08009470 <__multadd>:
 8009470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009472:	000e      	movs	r6, r1
 8009474:	9001      	str	r0, [sp, #4]
 8009476:	000c      	movs	r4, r1
 8009478:	001d      	movs	r5, r3
 800947a:	2000      	movs	r0, #0
 800947c:	690f      	ldr	r7, [r1, #16]
 800947e:	3614      	adds	r6, #20
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	3001      	adds	r0, #1
 8009484:	b299      	uxth	r1, r3
 8009486:	4351      	muls	r1, r2
 8009488:	0c1b      	lsrs	r3, r3, #16
 800948a:	4353      	muls	r3, r2
 800948c:	1949      	adds	r1, r1, r5
 800948e:	0c0d      	lsrs	r5, r1, #16
 8009490:	195b      	adds	r3, r3, r5
 8009492:	0c1d      	lsrs	r5, r3, #16
 8009494:	b289      	uxth	r1, r1
 8009496:	041b      	lsls	r3, r3, #16
 8009498:	185b      	adds	r3, r3, r1
 800949a:	c608      	stmia	r6!, {r3}
 800949c:	4287      	cmp	r7, r0
 800949e:	dcef      	bgt.n	8009480 <__multadd+0x10>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	d022      	beq.n	80094ea <__multadd+0x7a>
 80094a4:	68a3      	ldr	r3, [r4, #8]
 80094a6:	42bb      	cmp	r3, r7
 80094a8:	dc19      	bgt.n	80094de <__multadd+0x6e>
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	9801      	ldr	r0, [sp, #4]
 80094ae:	1c59      	adds	r1, r3, #1
 80094b0:	f7ff ff76 	bl	80093a0 <_Balloc>
 80094b4:	1e06      	subs	r6, r0, #0
 80094b6:	d105      	bne.n	80094c4 <__multadd+0x54>
 80094b8:	0002      	movs	r2, r0
 80094ba:	21b5      	movs	r1, #181	; 0xb5
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <__multadd+0x80>)
 80094be:	480d      	ldr	r0, [pc, #52]	; (80094f4 <__multadd+0x84>)
 80094c0:	f000 fd36 	bl	8009f30 <__assert_func>
 80094c4:	0021      	movs	r1, r4
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	310c      	adds	r1, #12
 80094ca:	1c9a      	adds	r2, r3, #2
 80094cc:	0092      	lsls	r2, r2, #2
 80094ce:	300c      	adds	r0, #12
 80094d0:	f7ff ff5d 	bl	800938e <memcpy>
 80094d4:	0021      	movs	r1, r4
 80094d6:	9801      	ldr	r0, [sp, #4]
 80094d8:	f7ff ffa6 	bl	8009428 <_Bfree>
 80094dc:	0034      	movs	r4, r6
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	18e3      	adds	r3, r4, r3
 80094e4:	605d      	str	r5, [r3, #4]
 80094e6:	1c7b      	adds	r3, r7, #1
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	0020      	movs	r0, r4
 80094ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	0800adeb 	.word	0x0800adeb
 80094f4:	0800adfc 	.word	0x0800adfc

080094f8 <__hi0bits>:
 80094f8:	0003      	movs	r3, r0
 80094fa:	0c02      	lsrs	r2, r0, #16
 80094fc:	2000      	movs	r0, #0
 80094fe:	4282      	cmp	r2, r0
 8009500:	d101      	bne.n	8009506 <__hi0bits+0xe>
 8009502:	041b      	lsls	r3, r3, #16
 8009504:	3010      	adds	r0, #16
 8009506:	0e1a      	lsrs	r2, r3, #24
 8009508:	d101      	bne.n	800950e <__hi0bits+0x16>
 800950a:	3008      	adds	r0, #8
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	0f1a      	lsrs	r2, r3, #28
 8009510:	d101      	bne.n	8009516 <__hi0bits+0x1e>
 8009512:	3004      	adds	r0, #4
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	0f9a      	lsrs	r2, r3, #30
 8009518:	d101      	bne.n	800951e <__hi0bits+0x26>
 800951a:	3002      	adds	r0, #2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	db03      	blt.n	800952a <__hi0bits+0x32>
 8009522:	3001      	adds	r0, #1
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	d400      	bmi.n	800952a <__hi0bits+0x32>
 8009528:	2020      	movs	r0, #32
 800952a:	4770      	bx	lr

0800952c <__lo0bits>:
 800952c:	6803      	ldr	r3, [r0, #0]
 800952e:	0002      	movs	r2, r0
 8009530:	2107      	movs	r1, #7
 8009532:	0018      	movs	r0, r3
 8009534:	4008      	ands	r0, r1
 8009536:	420b      	tst	r3, r1
 8009538:	d00d      	beq.n	8009556 <__lo0bits+0x2a>
 800953a:	3906      	subs	r1, #6
 800953c:	2000      	movs	r0, #0
 800953e:	420b      	tst	r3, r1
 8009540:	d105      	bne.n	800954e <__lo0bits+0x22>
 8009542:	3002      	adds	r0, #2
 8009544:	4203      	tst	r3, r0
 8009546:	d003      	beq.n	8009550 <__lo0bits+0x24>
 8009548:	40cb      	lsrs	r3, r1
 800954a:	0008      	movs	r0, r1
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	4770      	bx	lr
 8009550:	089b      	lsrs	r3, r3, #2
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	e7fb      	b.n	800954e <__lo0bits+0x22>
 8009556:	b299      	uxth	r1, r3
 8009558:	2900      	cmp	r1, #0
 800955a:	d101      	bne.n	8009560 <__lo0bits+0x34>
 800955c:	2010      	movs	r0, #16
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b2d9      	uxtb	r1, r3
 8009562:	2900      	cmp	r1, #0
 8009564:	d101      	bne.n	800956a <__lo0bits+0x3e>
 8009566:	3008      	adds	r0, #8
 8009568:	0a1b      	lsrs	r3, r3, #8
 800956a:	0719      	lsls	r1, r3, #28
 800956c:	d101      	bne.n	8009572 <__lo0bits+0x46>
 800956e:	3004      	adds	r0, #4
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	0799      	lsls	r1, r3, #30
 8009574:	d101      	bne.n	800957a <__lo0bits+0x4e>
 8009576:	3002      	adds	r0, #2
 8009578:	089b      	lsrs	r3, r3, #2
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d4e9      	bmi.n	8009552 <__lo0bits+0x26>
 800957e:	3001      	adds	r0, #1
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	d1e6      	bne.n	8009552 <__lo0bits+0x26>
 8009584:	2020      	movs	r0, #32
 8009586:	e7e2      	b.n	800954e <__lo0bits+0x22>

08009588 <__i2b>:
 8009588:	b510      	push	{r4, lr}
 800958a:	000c      	movs	r4, r1
 800958c:	2101      	movs	r1, #1
 800958e:	f7ff ff07 	bl	80093a0 <_Balloc>
 8009592:	2800      	cmp	r0, #0
 8009594:	d106      	bne.n	80095a4 <__i2b+0x1c>
 8009596:	21a0      	movs	r1, #160	; 0xa0
 8009598:	0002      	movs	r2, r0
 800959a:	4b04      	ldr	r3, [pc, #16]	; (80095ac <__i2b+0x24>)
 800959c:	4804      	ldr	r0, [pc, #16]	; (80095b0 <__i2b+0x28>)
 800959e:	0049      	lsls	r1, r1, #1
 80095a0:	f000 fcc6 	bl	8009f30 <__assert_func>
 80095a4:	2301      	movs	r3, #1
 80095a6:	6144      	str	r4, [r0, #20]
 80095a8:	6103      	str	r3, [r0, #16]
 80095aa:	bd10      	pop	{r4, pc}
 80095ac:	0800adeb 	.word	0x0800adeb
 80095b0:	0800adfc 	.word	0x0800adfc

080095b4 <__multiply>:
 80095b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b6:	690b      	ldr	r3, [r1, #16]
 80095b8:	0014      	movs	r4, r2
 80095ba:	6912      	ldr	r2, [r2, #16]
 80095bc:	000d      	movs	r5, r1
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	4293      	cmp	r3, r2
 80095c2:	da01      	bge.n	80095c8 <__multiply+0x14>
 80095c4:	0025      	movs	r5, r4
 80095c6:	000c      	movs	r4, r1
 80095c8:	692f      	ldr	r7, [r5, #16]
 80095ca:	6926      	ldr	r6, [r4, #16]
 80095cc:	6869      	ldr	r1, [r5, #4]
 80095ce:	19bb      	adds	r3, r7, r6
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	68ab      	ldr	r3, [r5, #8]
 80095d4:	19ba      	adds	r2, r7, r6
 80095d6:	4293      	cmp	r3, r2
 80095d8:	da00      	bge.n	80095dc <__multiply+0x28>
 80095da:	3101      	adds	r1, #1
 80095dc:	f7ff fee0 	bl	80093a0 <_Balloc>
 80095e0:	9001      	str	r0, [sp, #4]
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d106      	bne.n	80095f4 <__multiply+0x40>
 80095e6:	215e      	movs	r1, #94	; 0x5e
 80095e8:	0002      	movs	r2, r0
 80095ea:	4b48      	ldr	r3, [pc, #288]	; (800970c <__multiply+0x158>)
 80095ec:	4848      	ldr	r0, [pc, #288]	; (8009710 <__multiply+0x15c>)
 80095ee:	31ff      	adds	r1, #255	; 0xff
 80095f0:	f000 fc9e 	bl	8009f30 <__assert_func>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	3314      	adds	r3, #20
 80095fa:	469c      	mov	ip, r3
 80095fc:	19bb      	adds	r3, r7, r6
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4463      	add	r3, ip
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	4663      	mov	r3, ip
 8009606:	9903      	ldr	r1, [sp, #12]
 8009608:	428b      	cmp	r3, r1
 800960a:	d32c      	bcc.n	8009666 <__multiply+0xb2>
 800960c:	002b      	movs	r3, r5
 800960e:	0022      	movs	r2, r4
 8009610:	3314      	adds	r3, #20
 8009612:	00bf      	lsls	r7, r7, #2
 8009614:	3214      	adds	r2, #20
 8009616:	9306      	str	r3, [sp, #24]
 8009618:	00b6      	lsls	r6, r6, #2
 800961a:	19db      	adds	r3, r3, r7
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	1993      	adds	r3, r2, r6
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	2304      	movs	r3, #4
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	002b      	movs	r3, r5
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	3315      	adds	r3, #21
 800962c:	9200      	str	r2, [sp, #0]
 800962e:	4299      	cmp	r1, r3
 8009630:	d305      	bcc.n	800963e <__multiply+0x8a>
 8009632:	1b4b      	subs	r3, r1, r5
 8009634:	3b15      	subs	r3, #21
 8009636:	089b      	lsrs	r3, r3, #2
 8009638:	3301      	adds	r3, #1
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	9b07      	ldr	r3, [sp, #28]
 8009640:	9a00      	ldr	r2, [sp, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d311      	bcc.n	800966a <__multiply+0xb6>
 8009646:	9b02      	ldr	r3, [sp, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	dd06      	ble.n	800965a <__multiply+0xa6>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	3b04      	subs	r3, #4
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d054      	beq.n	8009704 <__multiply+0x150>
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	9a02      	ldr	r2, [sp, #8]
 800965e:	0018      	movs	r0, r3
 8009660:	611a      	str	r2, [r3, #16]
 8009662:	b009      	add	sp, #36	; 0x24
 8009664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009666:	c304      	stmia	r3!, {r2}
 8009668:	e7cd      	b.n	8009606 <__multiply+0x52>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	b298      	uxth	r0, r3
 8009670:	2800      	cmp	r0, #0
 8009672:	d01c      	beq.n	80096ae <__multiply+0xfa>
 8009674:	4667      	mov	r7, ip
 8009676:	2400      	movs	r4, #0
 8009678:	9e06      	ldr	r6, [sp, #24]
 800967a:	ce02      	ldmia	r6!, {r1}
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b28b      	uxth	r3, r1
 8009680:	4343      	muls	r3, r0
 8009682:	0c09      	lsrs	r1, r1, #16
 8009684:	4341      	muls	r1, r0
 8009686:	b292      	uxth	r2, r2
 8009688:	189b      	adds	r3, r3, r2
 800968a:	191b      	adds	r3, r3, r4
 800968c:	000c      	movs	r4, r1
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	0c11      	lsrs	r1, r2, #16
 8009692:	1861      	adds	r1, r4, r1
 8009694:	0c1c      	lsrs	r4, r3, #16
 8009696:	1909      	adds	r1, r1, r4
 8009698:	0c0c      	lsrs	r4, r1, #16
 800969a:	b29b      	uxth	r3, r3
 800969c:	0409      	lsls	r1, r1, #16
 800969e:	430b      	orrs	r3, r1
 80096a0:	c708      	stmia	r7!, {r3}
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	42b3      	cmp	r3, r6
 80096a6:	d8e8      	bhi.n	800967a <__multiply+0xc6>
 80096a8:	4663      	mov	r3, ip
 80096aa:	9a05      	ldr	r2, [sp, #20]
 80096ac:	509c      	str	r4, [r3, r2]
 80096ae:	9b00      	ldr	r3, [sp, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	0c1e      	lsrs	r6, r3, #16
 80096b4:	d020      	beq.n	80096f8 <__multiply+0x144>
 80096b6:	4663      	mov	r3, ip
 80096b8:	002c      	movs	r4, r5
 80096ba:	4660      	mov	r0, ip
 80096bc:	2700      	movs	r7, #0
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3414      	adds	r4, #20
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	b291      	uxth	r1, r2
 80096c8:	4371      	muls	r1, r6
 80096ca:	6802      	ldr	r2, [r0, #0]
 80096cc:	0c12      	lsrs	r2, r2, #16
 80096ce:	1889      	adds	r1, r1, r2
 80096d0:	19cf      	adds	r7, r1, r7
 80096d2:	0439      	lsls	r1, r7, #16
 80096d4:	430b      	orrs	r3, r1
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	cc02      	ldmia	r4!, {r1}
 80096da:	6843      	ldr	r3, [r0, #4]
 80096dc:	0c09      	lsrs	r1, r1, #16
 80096de:	4371      	muls	r1, r6
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	0c3f      	lsrs	r7, r7, #16
 80096e4:	18cb      	adds	r3, r1, r3
 80096e6:	9a04      	ldr	r2, [sp, #16]
 80096e8:	19db      	adds	r3, r3, r7
 80096ea:	0c1f      	lsrs	r7, r3, #16
 80096ec:	3004      	adds	r0, #4
 80096ee:	42a2      	cmp	r2, r4
 80096f0:	d8e7      	bhi.n	80096c2 <__multiply+0x10e>
 80096f2:	4662      	mov	r2, ip
 80096f4:	9905      	ldr	r1, [sp, #20]
 80096f6:	5053      	str	r3, [r2, r1]
 80096f8:	9b00      	ldr	r3, [sp, #0]
 80096fa:	3304      	adds	r3, #4
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	2304      	movs	r3, #4
 8009700:	449c      	add	ip, r3
 8009702:	e79c      	b.n	800963e <__multiply+0x8a>
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	3b01      	subs	r3, #1
 8009708:	9302      	str	r3, [sp, #8]
 800970a:	e79c      	b.n	8009646 <__multiply+0x92>
 800970c:	0800adeb 	.word	0x0800adeb
 8009710:	0800adfc 	.word	0x0800adfc

08009714 <__pow5mult>:
 8009714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009716:	2303      	movs	r3, #3
 8009718:	0015      	movs	r5, r2
 800971a:	0007      	movs	r7, r0
 800971c:	000e      	movs	r6, r1
 800971e:	401a      	ands	r2, r3
 8009720:	421d      	tst	r5, r3
 8009722:	d008      	beq.n	8009736 <__pow5mult+0x22>
 8009724:	4925      	ldr	r1, [pc, #148]	; (80097bc <__pow5mult+0xa8>)
 8009726:	3a01      	subs	r2, #1
 8009728:	0092      	lsls	r2, r2, #2
 800972a:	5852      	ldr	r2, [r2, r1]
 800972c:	2300      	movs	r3, #0
 800972e:	0031      	movs	r1, r6
 8009730:	f7ff fe9e 	bl	8009470 <__multadd>
 8009734:	0006      	movs	r6, r0
 8009736:	10ad      	asrs	r5, r5, #2
 8009738:	d03d      	beq.n	80097b6 <__pow5mult+0xa2>
 800973a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800973c:	2c00      	cmp	r4, #0
 800973e:	d10f      	bne.n	8009760 <__pow5mult+0x4c>
 8009740:	2010      	movs	r0, #16
 8009742:	f7ff fe0f 	bl	8009364 <malloc>
 8009746:	1e02      	subs	r2, r0, #0
 8009748:	6278      	str	r0, [r7, #36]	; 0x24
 800974a:	d105      	bne.n	8009758 <__pow5mult+0x44>
 800974c:	21d7      	movs	r1, #215	; 0xd7
 800974e:	4b1c      	ldr	r3, [pc, #112]	; (80097c0 <__pow5mult+0xac>)
 8009750:	481c      	ldr	r0, [pc, #112]	; (80097c4 <__pow5mult+0xb0>)
 8009752:	0049      	lsls	r1, r1, #1
 8009754:	f000 fbec 	bl	8009f30 <__assert_func>
 8009758:	6044      	str	r4, [r0, #4]
 800975a:	6084      	str	r4, [r0, #8]
 800975c:	6004      	str	r4, [r0, #0]
 800975e:	60c4      	str	r4, [r0, #12]
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	689c      	ldr	r4, [r3, #8]
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2c00      	cmp	r4, #0
 8009768:	d108      	bne.n	800977c <__pow5mult+0x68>
 800976a:	0038      	movs	r0, r7
 800976c:	4916      	ldr	r1, [pc, #88]	; (80097c8 <__pow5mult+0xb4>)
 800976e:	f7ff ff0b 	bl	8009588 <__i2b>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	0004      	movs	r4, r0
 8009776:	6098      	str	r0, [r3, #8]
 8009778:	2300      	movs	r3, #0
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	2301      	movs	r3, #1
 800977e:	421d      	tst	r5, r3
 8009780:	d00a      	beq.n	8009798 <__pow5mult+0x84>
 8009782:	0031      	movs	r1, r6
 8009784:	0022      	movs	r2, r4
 8009786:	0038      	movs	r0, r7
 8009788:	f7ff ff14 	bl	80095b4 <__multiply>
 800978c:	0031      	movs	r1, r6
 800978e:	9001      	str	r0, [sp, #4]
 8009790:	0038      	movs	r0, r7
 8009792:	f7ff fe49 	bl	8009428 <_Bfree>
 8009796:	9e01      	ldr	r6, [sp, #4]
 8009798:	106d      	asrs	r5, r5, #1
 800979a:	d00c      	beq.n	80097b6 <__pow5mult+0xa2>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	2800      	cmp	r0, #0
 80097a0:	d107      	bne.n	80097b2 <__pow5mult+0x9e>
 80097a2:	0022      	movs	r2, r4
 80097a4:	0021      	movs	r1, r4
 80097a6:	0038      	movs	r0, r7
 80097a8:	f7ff ff04 	bl	80095b4 <__multiply>
 80097ac:	2300      	movs	r3, #0
 80097ae:	6020      	str	r0, [r4, #0]
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	0004      	movs	r4, r0
 80097b4:	e7e2      	b.n	800977c <__pow5mult+0x68>
 80097b6:	0030      	movs	r0, r6
 80097b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	0800af50 	.word	0x0800af50
 80097c0:	0800ad75 	.word	0x0800ad75
 80097c4:	0800adfc 	.word	0x0800adfc
 80097c8:	00000271 	.word	0x00000271

080097cc <__lshift>:
 80097cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ce:	000c      	movs	r4, r1
 80097d0:	0017      	movs	r7, r2
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	1155      	asrs	r5, r2, #5
 80097d6:	b087      	sub	sp, #28
 80097d8:	18eb      	adds	r3, r5, r3
 80097da:	9302      	str	r3, [sp, #8]
 80097dc:	3301      	adds	r3, #1
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	6849      	ldr	r1, [r1, #4]
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	9004      	str	r0, [sp, #16]
 80097e6:	9a01      	ldr	r2, [sp, #4]
 80097e8:	4293      	cmp	r3, r2
 80097ea:	db11      	blt.n	8009810 <__lshift+0x44>
 80097ec:	9804      	ldr	r0, [sp, #16]
 80097ee:	f7ff fdd7 	bl	80093a0 <_Balloc>
 80097f2:	0002      	movs	r2, r0
 80097f4:	2300      	movs	r3, #0
 80097f6:	3214      	adds	r2, #20
 80097f8:	0006      	movs	r6, r0
 80097fa:	0011      	movs	r1, r2
 80097fc:	9203      	str	r2, [sp, #12]
 80097fe:	4298      	cmp	r0, r3
 8009800:	d10d      	bne.n	800981e <__lshift+0x52>
 8009802:	21da      	movs	r1, #218	; 0xda
 8009804:	0002      	movs	r2, r0
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <__lshift+0xd8>)
 8009808:	4827      	ldr	r0, [pc, #156]	; (80098a8 <__lshift+0xdc>)
 800980a:	31ff      	adds	r1, #255	; 0xff
 800980c:	f000 fb90 	bl	8009f30 <__assert_func>
 8009810:	3101      	adds	r1, #1
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	e7e7      	b.n	80097e6 <__lshift+0x1a>
 8009816:	2200      	movs	r2, #0
 8009818:	0098      	lsls	r0, r3, #2
 800981a:	500a      	str	r2, [r1, r0]
 800981c:	3301      	adds	r3, #1
 800981e:	42ab      	cmp	r3, r5
 8009820:	dbf9      	blt.n	8009816 <__lshift+0x4a>
 8009822:	43eb      	mvns	r3, r5
 8009824:	17db      	asrs	r3, r3, #31
 8009826:	401d      	ands	r5, r3
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	00ad      	lsls	r5, r5, #2
 800982c:	211f      	movs	r1, #31
 800982e:	0038      	movs	r0, r7
 8009830:	195d      	adds	r5, r3, r5
 8009832:	0023      	movs	r3, r4
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	3314      	adds	r3, #20
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	4008      	ands	r0, r1
 800983c:	4684      	mov	ip, r0
 800983e:	189a      	adds	r2, r3, r2
 8009840:	420f      	tst	r7, r1
 8009842:	d02a      	beq.n	800989a <__lshift+0xce>
 8009844:	3101      	adds	r1, #1
 8009846:	1a09      	subs	r1, r1, r0
 8009848:	9105      	str	r1, [sp, #20]
 800984a:	2100      	movs	r1, #0
 800984c:	9503      	str	r5, [sp, #12]
 800984e:	4667      	mov	r7, ip
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	40b8      	lsls	r0, r7
 8009854:	4301      	orrs	r1, r0
 8009856:	9803      	ldr	r0, [sp, #12]
 8009858:	c002      	stmia	r0!, {r1}
 800985a:	cb02      	ldmia	r3!, {r1}
 800985c:	9003      	str	r0, [sp, #12]
 800985e:	9805      	ldr	r0, [sp, #20]
 8009860:	40c1      	lsrs	r1, r0
 8009862:	429a      	cmp	r2, r3
 8009864:	d8f3      	bhi.n	800984e <__lshift+0x82>
 8009866:	0020      	movs	r0, r4
 8009868:	3015      	adds	r0, #21
 800986a:	2304      	movs	r3, #4
 800986c:	4282      	cmp	r2, r0
 800986e:	d304      	bcc.n	800987a <__lshift+0xae>
 8009870:	1b13      	subs	r3, r2, r4
 8009872:	3b15      	subs	r3, #21
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	3301      	adds	r3, #1
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	50e9      	str	r1, [r5, r3]
 800987c:	2900      	cmp	r1, #0
 800987e:	d002      	beq.n	8009886 <__lshift+0xba>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	3302      	adds	r3, #2
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	9804      	ldr	r0, [sp, #16]
 800988a:	3b01      	subs	r3, #1
 800988c:	0021      	movs	r1, r4
 800988e:	6133      	str	r3, [r6, #16]
 8009890:	f7ff fdca 	bl	8009428 <_Bfree>
 8009894:	0030      	movs	r0, r6
 8009896:	b007      	add	sp, #28
 8009898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989a:	cb02      	ldmia	r3!, {r1}
 800989c:	c502      	stmia	r5!, {r1}
 800989e:	429a      	cmp	r2, r3
 80098a0:	d8fb      	bhi.n	800989a <__lshift+0xce>
 80098a2:	e7f0      	b.n	8009886 <__lshift+0xba>
 80098a4:	0800adeb 	.word	0x0800adeb
 80098a8:	0800adfc 	.word	0x0800adfc

080098ac <__mcmp>:
 80098ac:	6902      	ldr	r2, [r0, #16]
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	b530      	push	{r4, r5, lr}
 80098b2:	0004      	movs	r4, r0
 80098b4:	1ad0      	subs	r0, r2, r3
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d10d      	bne.n	80098d6 <__mcmp+0x2a>
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	3414      	adds	r4, #20
 80098be:	3114      	adds	r1, #20
 80098c0:	18e2      	adds	r2, r4, r3
 80098c2:	18c9      	adds	r1, r1, r3
 80098c4:	3a04      	subs	r2, #4
 80098c6:	3904      	subs	r1, #4
 80098c8:	6815      	ldr	r5, [r2, #0]
 80098ca:	680b      	ldr	r3, [r1, #0]
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d003      	beq.n	80098d8 <__mcmp+0x2c>
 80098d0:	2001      	movs	r0, #1
 80098d2:	429d      	cmp	r5, r3
 80098d4:	d303      	bcc.n	80098de <__mcmp+0x32>
 80098d6:	bd30      	pop	{r4, r5, pc}
 80098d8:	4294      	cmp	r4, r2
 80098da:	d3f3      	bcc.n	80098c4 <__mcmp+0x18>
 80098dc:	e7fb      	b.n	80098d6 <__mcmp+0x2a>
 80098de:	4240      	negs	r0, r0
 80098e0:	e7f9      	b.n	80098d6 <__mcmp+0x2a>
	...

080098e4 <__mdiff>:
 80098e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e6:	000e      	movs	r6, r1
 80098e8:	0007      	movs	r7, r0
 80098ea:	0011      	movs	r1, r2
 80098ec:	0030      	movs	r0, r6
 80098ee:	b087      	sub	sp, #28
 80098f0:	0014      	movs	r4, r2
 80098f2:	f7ff ffdb 	bl	80098ac <__mcmp>
 80098f6:	1e05      	subs	r5, r0, #0
 80098f8:	d110      	bne.n	800991c <__mdiff+0x38>
 80098fa:	0001      	movs	r1, r0
 80098fc:	0038      	movs	r0, r7
 80098fe:	f7ff fd4f 	bl	80093a0 <_Balloc>
 8009902:	1e02      	subs	r2, r0, #0
 8009904:	d104      	bne.n	8009910 <__mdiff+0x2c>
 8009906:	4b40      	ldr	r3, [pc, #256]	; (8009a08 <__mdiff+0x124>)
 8009908:	4940      	ldr	r1, [pc, #256]	; (8009a0c <__mdiff+0x128>)
 800990a:	4841      	ldr	r0, [pc, #260]	; (8009a10 <__mdiff+0x12c>)
 800990c:	f000 fb10 	bl	8009f30 <__assert_func>
 8009910:	2301      	movs	r3, #1
 8009912:	6145      	str	r5, [r0, #20]
 8009914:	6103      	str	r3, [r0, #16]
 8009916:	0010      	movs	r0, r2
 8009918:	b007      	add	sp, #28
 800991a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991c:	2301      	movs	r3, #1
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	2800      	cmp	r0, #0
 8009922:	db04      	blt.n	800992e <__mdiff+0x4a>
 8009924:	0023      	movs	r3, r4
 8009926:	0034      	movs	r4, r6
 8009928:	001e      	movs	r6, r3
 800992a:	2300      	movs	r3, #0
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	0038      	movs	r0, r7
 8009930:	6861      	ldr	r1, [r4, #4]
 8009932:	f7ff fd35 	bl	80093a0 <_Balloc>
 8009936:	1e02      	subs	r2, r0, #0
 8009938:	d103      	bne.n	8009942 <__mdiff+0x5e>
 800993a:	2190      	movs	r1, #144	; 0x90
 800993c:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <__mdiff+0x124>)
 800993e:	0089      	lsls	r1, r1, #2
 8009940:	e7e3      	b.n	800990a <__mdiff+0x26>
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	2700      	movs	r7, #0
 8009946:	60c3      	str	r3, [r0, #12]
 8009948:	6920      	ldr	r0, [r4, #16]
 800994a:	3414      	adds	r4, #20
 800994c:	9401      	str	r4, [sp, #4]
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	0084      	lsls	r4, r0, #2
 8009952:	191b      	adds	r3, r3, r4
 8009954:	0034      	movs	r4, r6
 8009956:	9302      	str	r3, [sp, #8]
 8009958:	6933      	ldr	r3, [r6, #16]
 800995a:	3414      	adds	r4, #20
 800995c:	0099      	lsls	r1, r3, #2
 800995e:	1863      	adds	r3, r4, r1
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	0013      	movs	r3, r2
 8009964:	3314      	adds	r3, #20
 8009966:	469c      	mov	ip, r3
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	cc02      	ldmia	r4!, {r1}
 8009972:	cb20      	ldmia	r3!, {r5}
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	b2ab      	uxth	r3, r5
 8009978:	19df      	adds	r7, r3, r7
 800997a:	b28b      	uxth	r3, r1
 800997c:	1afb      	subs	r3, r7, r3
 800997e:	0c2d      	lsrs	r5, r5, #16
 8009980:	0c09      	lsrs	r1, r1, #16
 8009982:	1a69      	subs	r1, r5, r1
 8009984:	141d      	asrs	r5, r3, #16
 8009986:	1949      	adds	r1, r1, r5
 8009988:	140f      	asrs	r7, r1, #16
 800998a:	b29b      	uxth	r3, r3
 800998c:	0409      	lsls	r1, r1, #16
 800998e:	430b      	orrs	r3, r1
 8009990:	4661      	mov	r1, ip
 8009992:	c108      	stmia	r1!, {r3}
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	468c      	mov	ip, r1
 8009998:	42a3      	cmp	r3, r4
 800999a:	d8e8      	bhi.n	800996e <__mdiff+0x8a>
 800999c:	0031      	movs	r1, r6
 800999e:	9c03      	ldr	r4, [sp, #12]
 80099a0:	3115      	adds	r1, #21
 80099a2:	2304      	movs	r3, #4
 80099a4:	428c      	cmp	r4, r1
 80099a6:	d304      	bcc.n	80099b2 <__mdiff+0xce>
 80099a8:	1ba3      	subs	r3, r4, r6
 80099aa:	3b15      	subs	r3, #21
 80099ac:	089b      	lsrs	r3, r3, #2
 80099ae:	3301      	adds	r3, #1
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	9901      	ldr	r1, [sp, #4]
 80099b4:	18cc      	adds	r4, r1, r3
 80099b6:	9905      	ldr	r1, [sp, #20]
 80099b8:	0026      	movs	r6, r4
 80099ba:	18cb      	adds	r3, r1, r3
 80099bc:	469c      	mov	ip, r3
 80099be:	9902      	ldr	r1, [sp, #8]
 80099c0:	428e      	cmp	r6, r1
 80099c2:	d310      	bcc.n	80099e6 <__mdiff+0x102>
 80099c4:	9e02      	ldr	r6, [sp, #8]
 80099c6:	1ee5      	subs	r5, r4, #3
 80099c8:	2100      	movs	r1, #0
 80099ca:	42ae      	cmp	r6, r5
 80099cc:	d304      	bcc.n	80099d8 <__mdiff+0xf4>
 80099ce:	0031      	movs	r1, r6
 80099d0:	3103      	adds	r1, #3
 80099d2:	1b09      	subs	r1, r1, r4
 80099d4:	0889      	lsrs	r1, r1, #2
 80099d6:	0089      	lsls	r1, r1, #2
 80099d8:	185b      	adds	r3, r3, r1
 80099da:	3b04      	subs	r3, #4
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	2900      	cmp	r1, #0
 80099e0:	d00f      	beq.n	8009a02 <__mdiff+0x11e>
 80099e2:	6110      	str	r0, [r2, #16]
 80099e4:	e797      	b.n	8009916 <__mdiff+0x32>
 80099e6:	ce02      	ldmia	r6!, {r1}
 80099e8:	b28d      	uxth	r5, r1
 80099ea:	19ed      	adds	r5, r5, r7
 80099ec:	0c0f      	lsrs	r7, r1, #16
 80099ee:	1429      	asrs	r1, r5, #16
 80099f0:	1879      	adds	r1, r7, r1
 80099f2:	140f      	asrs	r7, r1, #16
 80099f4:	b2ad      	uxth	r5, r5
 80099f6:	0409      	lsls	r1, r1, #16
 80099f8:	430d      	orrs	r5, r1
 80099fa:	4661      	mov	r1, ip
 80099fc:	c120      	stmia	r1!, {r5}
 80099fe:	468c      	mov	ip, r1
 8009a00:	e7dd      	b.n	80099be <__mdiff+0xda>
 8009a02:	3801      	subs	r0, #1
 8009a04:	e7e9      	b.n	80099da <__mdiff+0xf6>
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	0800adeb 	.word	0x0800adeb
 8009a0c:	00000232 	.word	0x00000232
 8009a10:	0800adfc 	.word	0x0800adfc

08009a14 <__d2b>:
 8009a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a16:	2101      	movs	r1, #1
 8009a18:	0014      	movs	r4, r2
 8009a1a:	001e      	movs	r6, r3
 8009a1c:	9f08      	ldr	r7, [sp, #32]
 8009a1e:	f7ff fcbf 	bl	80093a0 <_Balloc>
 8009a22:	1e05      	subs	r5, r0, #0
 8009a24:	d105      	bne.n	8009a32 <__d2b+0x1e>
 8009a26:	0002      	movs	r2, r0
 8009a28:	4b26      	ldr	r3, [pc, #152]	; (8009ac4 <__d2b+0xb0>)
 8009a2a:	4927      	ldr	r1, [pc, #156]	; (8009ac8 <__d2b+0xb4>)
 8009a2c:	4827      	ldr	r0, [pc, #156]	; (8009acc <__d2b+0xb8>)
 8009a2e:	f000 fa7f 	bl	8009f30 <__assert_func>
 8009a32:	0333      	lsls	r3, r6, #12
 8009a34:	0076      	lsls	r6, r6, #1
 8009a36:	0b1b      	lsrs	r3, r3, #12
 8009a38:	0d76      	lsrs	r6, r6, #21
 8009a3a:	d124      	bne.n	8009a86 <__d2b+0x72>
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	2c00      	cmp	r4, #0
 8009a40:	d027      	beq.n	8009a92 <__d2b+0x7e>
 8009a42:	4668      	mov	r0, sp
 8009a44:	9400      	str	r4, [sp, #0]
 8009a46:	f7ff fd71 	bl	800952c <__lo0bits>
 8009a4a:	9c00      	ldr	r4, [sp, #0]
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d01e      	beq.n	8009a8e <__d2b+0x7a>
 8009a50:	9b01      	ldr	r3, [sp, #4]
 8009a52:	2120      	movs	r1, #32
 8009a54:	001a      	movs	r2, r3
 8009a56:	1a09      	subs	r1, r1, r0
 8009a58:	408a      	lsls	r2, r1
 8009a5a:	40c3      	lsrs	r3, r0
 8009a5c:	4322      	orrs	r2, r4
 8009a5e:	616a      	str	r2, [r5, #20]
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	9c01      	ldr	r4, [sp, #4]
 8009a64:	61ac      	str	r4, [r5, #24]
 8009a66:	1e63      	subs	r3, r4, #1
 8009a68:	419c      	sbcs	r4, r3
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	612c      	str	r4, [r5, #16]
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d018      	beq.n	8009aa4 <__d2b+0x90>
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <__d2b+0xbc>)
 8009a74:	18f6      	adds	r6, r6, r3
 8009a76:	2335      	movs	r3, #53	; 0x35
 8009a78:	1836      	adds	r6, r6, r0
 8009a7a:	1a18      	subs	r0, r3, r0
 8009a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7e:	603e      	str	r6, [r7, #0]
 8009a80:	6018      	str	r0, [r3, #0]
 8009a82:	0028      	movs	r0, r5
 8009a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a86:	2280      	movs	r2, #128	; 0x80
 8009a88:	0352      	lsls	r2, r2, #13
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	e7d6      	b.n	8009a3c <__d2b+0x28>
 8009a8e:	616c      	str	r4, [r5, #20]
 8009a90:	e7e7      	b.n	8009a62 <__d2b+0x4e>
 8009a92:	a801      	add	r0, sp, #4
 8009a94:	f7ff fd4a 	bl	800952c <__lo0bits>
 8009a98:	2401      	movs	r4, #1
 8009a9a:	9b01      	ldr	r3, [sp, #4]
 8009a9c:	612c      	str	r4, [r5, #16]
 8009a9e:	616b      	str	r3, [r5, #20]
 8009aa0:	3020      	adds	r0, #32
 8009aa2:	e7e4      	b.n	8009a6e <__d2b+0x5a>
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <__d2b+0xc0>)
 8009aa6:	18c0      	adds	r0, r0, r3
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <__d2b+0xc4>)
 8009aaa:	6038      	str	r0, [r7, #0]
 8009aac:	18e3      	adds	r3, r4, r3
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	18eb      	adds	r3, r5, r3
 8009ab2:	6958      	ldr	r0, [r3, #20]
 8009ab4:	f7ff fd20 	bl	80094f8 <__hi0bits>
 8009ab8:	0164      	lsls	r4, r4, #5
 8009aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abc:	1a24      	subs	r4, r4, r0
 8009abe:	601c      	str	r4, [r3, #0]
 8009ac0:	e7df      	b.n	8009a82 <__d2b+0x6e>
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	0800adeb 	.word	0x0800adeb
 8009ac8:	0000030a 	.word	0x0000030a
 8009acc:	0800adfc 	.word	0x0800adfc
 8009ad0:	fffffbcd 	.word	0xfffffbcd
 8009ad4:	fffffbce 	.word	0xfffffbce
 8009ad8:	3fffffff 	.word	0x3fffffff

08009adc <_calloc_r>:
 8009adc:	434a      	muls	r2, r1
 8009ade:	b570      	push	{r4, r5, r6, lr}
 8009ae0:	0011      	movs	r1, r2
 8009ae2:	0015      	movs	r5, r2
 8009ae4:	f000 f852 	bl	8009b8c <_malloc_r>
 8009ae8:	1e04      	subs	r4, r0, #0
 8009aea:	d003      	beq.n	8009af4 <_calloc_r+0x18>
 8009aec:	002a      	movs	r2, r5
 8009aee:	2100      	movs	r1, #0
 8009af0:	f7fe f8e8 	bl	8007cc4 <memset>
 8009af4:	0020      	movs	r0, r4
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <_free_r>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	0005      	movs	r5, r0
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d010      	beq.n	8009b22 <_free_r+0x2a>
 8009b00:	1f0c      	subs	r4, r1, #4
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da00      	bge.n	8009b0a <_free_r+0x12>
 8009b08:	18e4      	adds	r4, r4, r3
 8009b0a:	0028      	movs	r0, r5
 8009b0c:	f000 fa64 	bl	8009fd8 <__malloc_lock>
 8009b10:	4a1d      	ldr	r2, [pc, #116]	; (8009b88 <_free_r+0x90>)
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <_free_r+0x2c>
 8009b18:	6063      	str	r3, [r4, #4]
 8009b1a:	6014      	str	r4, [r2, #0]
 8009b1c:	0028      	movs	r0, r5
 8009b1e:	f000 fa63 	bl	8009fe8 <__malloc_unlock>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d908      	bls.n	8009b3a <_free_r+0x42>
 8009b28:	6821      	ldr	r1, [r4, #0]
 8009b2a:	1860      	adds	r0, r4, r1
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	d1f3      	bne.n	8009b18 <_free_r+0x20>
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	1841      	adds	r1, r0, r1
 8009b36:	6021      	str	r1, [r4, #0]
 8009b38:	e7ee      	b.n	8009b18 <_free_r+0x20>
 8009b3a:	001a      	movs	r2, r3
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <_free_r+0x4e>
 8009b42:	42a3      	cmp	r3, r4
 8009b44:	d9f9      	bls.n	8009b3a <_free_r+0x42>
 8009b46:	6811      	ldr	r1, [r2, #0]
 8009b48:	1850      	adds	r0, r2, r1
 8009b4a:	42a0      	cmp	r0, r4
 8009b4c:	d10b      	bne.n	8009b66 <_free_r+0x6e>
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1809      	adds	r1, r1, r0
 8009b52:	1850      	adds	r0, r2, r1
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	4283      	cmp	r3, r0
 8009b58:	d1e0      	bne.n	8009b1c <_free_r+0x24>
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	1841      	adds	r1, r0, r1
 8009b60:	6011      	str	r1, [r2, #0]
 8009b62:	6053      	str	r3, [r2, #4]
 8009b64:	e7da      	b.n	8009b1c <_free_r+0x24>
 8009b66:	42a0      	cmp	r0, r4
 8009b68:	d902      	bls.n	8009b70 <_free_r+0x78>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	e7d5      	b.n	8009b1c <_free_r+0x24>
 8009b70:	6821      	ldr	r1, [r4, #0]
 8009b72:	1860      	adds	r0, r4, r1
 8009b74:	4283      	cmp	r3, r0
 8009b76:	d103      	bne.n	8009b80 <_free_r+0x88>
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	1841      	adds	r1, r0, r1
 8009b7e:	6021      	str	r1, [r4, #0]
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	6054      	str	r4, [r2, #4]
 8009b84:	e7ca      	b.n	8009b1c <_free_r+0x24>
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	20000200 	.word	0x20000200

08009b8c <_malloc_r>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	2303      	movs	r3, #3
 8009b90:	1ccd      	adds	r5, r1, #3
 8009b92:	439d      	bics	r5, r3
 8009b94:	3508      	adds	r5, #8
 8009b96:	0006      	movs	r6, r0
 8009b98:	2d0c      	cmp	r5, #12
 8009b9a:	d21f      	bcs.n	8009bdc <_malloc_r+0x50>
 8009b9c:	250c      	movs	r5, #12
 8009b9e:	42a9      	cmp	r1, r5
 8009ba0:	d81e      	bhi.n	8009be0 <_malloc_r+0x54>
 8009ba2:	0030      	movs	r0, r6
 8009ba4:	f000 fa18 	bl	8009fd8 <__malloc_lock>
 8009ba8:	4925      	ldr	r1, [pc, #148]	; (8009c40 <_malloc_r+0xb4>)
 8009baa:	680a      	ldr	r2, [r1, #0]
 8009bac:	0014      	movs	r4, r2
 8009bae:	2c00      	cmp	r4, #0
 8009bb0:	d11a      	bne.n	8009be8 <_malloc_r+0x5c>
 8009bb2:	4f24      	ldr	r7, [pc, #144]	; (8009c44 <_malloc_r+0xb8>)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <_malloc_r+0x38>
 8009bba:	0021      	movs	r1, r4
 8009bbc:	0030      	movs	r0, r6
 8009bbe:	f000 f9a5 	bl	8009f0c <_sbrk_r>
 8009bc2:	6038      	str	r0, [r7, #0]
 8009bc4:	0029      	movs	r1, r5
 8009bc6:	0030      	movs	r0, r6
 8009bc8:	f000 f9a0 	bl	8009f0c <_sbrk_r>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d12b      	bne.n	8009c28 <_malloc_r+0x9c>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	0030      	movs	r0, r6
 8009bd4:	6033      	str	r3, [r6, #0]
 8009bd6:	f000 fa07 	bl	8009fe8 <__malloc_unlock>
 8009bda:	e003      	b.n	8009be4 <_malloc_r+0x58>
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	dade      	bge.n	8009b9e <_malloc_r+0x12>
 8009be0:	230c      	movs	r3, #12
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	2000      	movs	r0, #0
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1b5b      	subs	r3, r3, r5
 8009bec:	d419      	bmi.n	8009c22 <_malloc_r+0x96>
 8009bee:	2b0b      	cmp	r3, #11
 8009bf0:	d903      	bls.n	8009bfa <_malloc_r+0x6e>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	18e4      	adds	r4, r4, r3
 8009bf6:	6025      	str	r5, [r4, #0]
 8009bf8:	e003      	b.n	8009c02 <_malloc_r+0x76>
 8009bfa:	6863      	ldr	r3, [r4, #4]
 8009bfc:	42a2      	cmp	r2, r4
 8009bfe:	d10e      	bne.n	8009c1e <_malloc_r+0x92>
 8009c00:	600b      	str	r3, [r1, #0]
 8009c02:	0030      	movs	r0, r6
 8009c04:	f000 f9f0 	bl	8009fe8 <__malloc_unlock>
 8009c08:	0020      	movs	r0, r4
 8009c0a:	2207      	movs	r2, #7
 8009c0c:	300b      	adds	r0, #11
 8009c0e:	1d23      	adds	r3, r4, #4
 8009c10:	4390      	bics	r0, r2
 8009c12:	1ac2      	subs	r2, r0, r3
 8009c14:	4298      	cmp	r0, r3
 8009c16:	d0e6      	beq.n	8009be6 <_malloc_r+0x5a>
 8009c18:	1a1b      	subs	r3, r3, r0
 8009c1a:	50a3      	str	r3, [r4, r2]
 8009c1c:	e7e3      	b.n	8009be6 <_malloc_r+0x5a>
 8009c1e:	6053      	str	r3, [r2, #4]
 8009c20:	e7ef      	b.n	8009c02 <_malloc_r+0x76>
 8009c22:	0022      	movs	r2, r4
 8009c24:	6864      	ldr	r4, [r4, #4]
 8009c26:	e7c2      	b.n	8009bae <_malloc_r+0x22>
 8009c28:	2303      	movs	r3, #3
 8009c2a:	1cc4      	adds	r4, r0, #3
 8009c2c:	439c      	bics	r4, r3
 8009c2e:	42a0      	cmp	r0, r4
 8009c30:	d0e1      	beq.n	8009bf6 <_malloc_r+0x6a>
 8009c32:	1a21      	subs	r1, r4, r0
 8009c34:	0030      	movs	r0, r6
 8009c36:	f000 f969 	bl	8009f0c <_sbrk_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d1db      	bne.n	8009bf6 <_malloc_r+0x6a>
 8009c3e:	e7c7      	b.n	8009bd0 <_malloc_r+0x44>
 8009c40:	20000200 	.word	0x20000200
 8009c44:	20000204 	.word	0x20000204

08009c48 <__ssputs_r>:
 8009c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4a:	688e      	ldr	r6, [r1, #8]
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	0007      	movs	r7, r0
 8009c50:	000c      	movs	r4, r1
 8009c52:	9203      	str	r2, [sp, #12]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	429e      	cmp	r6, r3
 8009c58:	d83c      	bhi.n	8009cd4 <__ssputs_r+0x8c>
 8009c5a:	2390      	movs	r3, #144	; 0x90
 8009c5c:	898a      	ldrh	r2, [r1, #12]
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	421a      	tst	r2, r3
 8009c62:	d034      	beq.n	8009cce <__ssputs_r+0x86>
 8009c64:	2503      	movs	r5, #3
 8009c66:	6909      	ldr	r1, [r1, #16]
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	1a5b      	subs	r3, r3, r1
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	6963      	ldr	r3, [r4, #20]
 8009c70:	9802      	ldr	r0, [sp, #8]
 8009c72:	435d      	muls	r5, r3
 8009c74:	0feb      	lsrs	r3, r5, #31
 8009c76:	195d      	adds	r5, r3, r5
 8009c78:	9b01      	ldr	r3, [sp, #4]
 8009c7a:	106d      	asrs	r5, r5, #1
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	181b      	adds	r3, r3, r0
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	d900      	bls.n	8009c86 <__ssputs_r+0x3e>
 8009c84:	001d      	movs	r5, r3
 8009c86:	0553      	lsls	r3, r2, #21
 8009c88:	d532      	bpl.n	8009cf0 <__ssputs_r+0xa8>
 8009c8a:	0029      	movs	r1, r5
 8009c8c:	0038      	movs	r0, r7
 8009c8e:	f7ff ff7d 	bl	8009b8c <_malloc_r>
 8009c92:	1e06      	subs	r6, r0, #0
 8009c94:	d109      	bne.n	8009caa <__ssputs_r+0x62>
 8009c96:	230c      	movs	r3, #12
 8009c98:	603b      	str	r3, [r7, #0]
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	89a2      	ldrh	r2, [r4, #12]
 8009ca0:	4240      	negs	r0, r0
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	b005      	add	sp, #20
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009caa:	9a02      	ldr	r2, [sp, #8]
 8009cac:	6921      	ldr	r1, [r4, #16]
 8009cae:	f7ff fb6e 	bl	800938e <memcpy>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <__ssputs_r+0xc0>)
 8009cb6:	401a      	ands	r2, r3
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	6126      	str	r6, [r4, #16]
 8009cc2:	18f6      	adds	r6, r6, r3
 8009cc4:	6026      	str	r6, [r4, #0]
 8009cc6:	6165      	str	r5, [r4, #20]
 8009cc8:	9e01      	ldr	r6, [sp, #4]
 8009cca:	1aed      	subs	r5, r5, r3
 8009ccc:	60a5      	str	r5, [r4, #8]
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	429e      	cmp	r6, r3
 8009cd2:	d900      	bls.n	8009cd6 <__ssputs_r+0x8e>
 8009cd4:	9e01      	ldr	r6, [sp, #4]
 8009cd6:	0032      	movs	r2, r6
 8009cd8:	9903      	ldr	r1, [sp, #12]
 8009cda:	6820      	ldr	r0, [r4, #0]
 8009cdc:	f000 f968 	bl	8009fb0 <memmove>
 8009ce0:	68a3      	ldr	r3, [r4, #8]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	1b9b      	subs	r3, r3, r6
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	199e      	adds	r6, r3, r6
 8009cec:	6026      	str	r6, [r4, #0]
 8009cee:	e7da      	b.n	8009ca6 <__ssputs_r+0x5e>
 8009cf0:	002a      	movs	r2, r5
 8009cf2:	0038      	movs	r0, r7
 8009cf4:	f000 f980 	bl	8009ff8 <_realloc_r>
 8009cf8:	1e06      	subs	r6, r0, #0
 8009cfa:	d1e0      	bne.n	8009cbe <__ssputs_r+0x76>
 8009cfc:	0038      	movs	r0, r7
 8009cfe:	6921      	ldr	r1, [r4, #16]
 8009d00:	f7ff fefa 	bl	8009af8 <_free_r>
 8009d04:	e7c7      	b.n	8009c96 <__ssputs_r+0x4e>
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	fffffb7f 	.word	0xfffffb7f

08009d0c <_svfiprintf_r>:
 8009d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0e:	b0a1      	sub	sp, #132	; 0x84
 8009d10:	9003      	str	r0, [sp, #12]
 8009d12:	001d      	movs	r5, r3
 8009d14:	898b      	ldrh	r3, [r1, #12]
 8009d16:	000f      	movs	r7, r1
 8009d18:	0016      	movs	r6, r2
 8009d1a:	061b      	lsls	r3, r3, #24
 8009d1c:	d511      	bpl.n	8009d42 <_svfiprintf_r+0x36>
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10e      	bne.n	8009d42 <_svfiprintf_r+0x36>
 8009d24:	2140      	movs	r1, #64	; 0x40
 8009d26:	f7ff ff31 	bl	8009b8c <_malloc_r>
 8009d2a:	6038      	str	r0, [r7, #0]
 8009d2c:	6138      	str	r0, [r7, #16]
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d105      	bne.n	8009d3e <_svfiprintf_r+0x32>
 8009d32:	230c      	movs	r3, #12
 8009d34:	9a03      	ldr	r2, [sp, #12]
 8009d36:	3801      	subs	r0, #1
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	b021      	add	sp, #132	; 0x84
 8009d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	617b      	str	r3, [r7, #20]
 8009d42:	2300      	movs	r3, #0
 8009d44:	ac08      	add	r4, sp, #32
 8009d46:	6163      	str	r3, [r4, #20]
 8009d48:	3320      	adds	r3, #32
 8009d4a:	7663      	strb	r3, [r4, #25]
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	76a3      	strb	r3, [r4, #26]
 8009d50:	9507      	str	r5, [sp, #28]
 8009d52:	0035      	movs	r5, r6
 8009d54:	782b      	ldrb	r3, [r5, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <_svfiprintf_r+0x52>
 8009d5a:	2b25      	cmp	r3, #37	; 0x25
 8009d5c:	d147      	bne.n	8009dee <_svfiprintf_r+0xe2>
 8009d5e:	1bab      	subs	r3, r5, r6
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	42b5      	cmp	r5, r6
 8009d64:	d00c      	beq.n	8009d80 <_svfiprintf_r+0x74>
 8009d66:	0032      	movs	r2, r6
 8009d68:	0039      	movs	r1, r7
 8009d6a:	9803      	ldr	r0, [sp, #12]
 8009d6c:	f7ff ff6c 	bl	8009c48 <__ssputs_r>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d100      	bne.n	8009d76 <_svfiprintf_r+0x6a>
 8009d74:	e0ae      	b.n	8009ed4 <_svfiprintf_r+0x1c8>
 8009d76:	6962      	ldr	r2, [r4, #20]
 8009d78:	9b05      	ldr	r3, [sp, #20]
 8009d7a:	4694      	mov	ip, r2
 8009d7c:	4463      	add	r3, ip
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	782b      	ldrb	r3, [r5, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d100      	bne.n	8009d88 <_svfiprintf_r+0x7c>
 8009d86:	e0a5      	b.n	8009ed4 <_svfiprintf_r+0x1c8>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	4252      	negs	r2, r2
 8009d8e:	6062      	str	r2, [r4, #4]
 8009d90:	a904      	add	r1, sp, #16
 8009d92:	3254      	adds	r2, #84	; 0x54
 8009d94:	1852      	adds	r2, r2, r1
 8009d96:	1c6e      	adds	r6, r5, #1
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	60e3      	str	r3, [r4, #12]
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	7013      	strb	r3, [r2, #0]
 8009da0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009da2:	2205      	movs	r2, #5
 8009da4:	7831      	ldrb	r1, [r6, #0]
 8009da6:	4854      	ldr	r0, [pc, #336]	; (8009ef8 <_svfiprintf_r+0x1ec>)
 8009da8:	f7ff fae6 	bl	8009378 <memchr>
 8009dac:	1c75      	adds	r5, r6, #1
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d11f      	bne.n	8009df2 <_svfiprintf_r+0xe6>
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	06d3      	lsls	r3, r2, #27
 8009db6:	d504      	bpl.n	8009dc2 <_svfiprintf_r+0xb6>
 8009db8:	2353      	movs	r3, #83	; 0x53
 8009dba:	a904      	add	r1, sp, #16
 8009dbc:	185b      	adds	r3, r3, r1
 8009dbe:	2120      	movs	r1, #32
 8009dc0:	7019      	strb	r1, [r3, #0]
 8009dc2:	0713      	lsls	r3, r2, #28
 8009dc4:	d504      	bpl.n	8009dd0 <_svfiprintf_r+0xc4>
 8009dc6:	2353      	movs	r3, #83	; 0x53
 8009dc8:	a904      	add	r1, sp, #16
 8009dca:	185b      	adds	r3, r3, r1
 8009dcc:	212b      	movs	r1, #43	; 0x2b
 8009dce:	7019      	strb	r1, [r3, #0]
 8009dd0:	7833      	ldrb	r3, [r6, #0]
 8009dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd4:	d016      	beq.n	8009e04 <_svfiprintf_r+0xf8>
 8009dd6:	0035      	movs	r5, r6
 8009dd8:	2100      	movs	r1, #0
 8009dda:	200a      	movs	r0, #10
 8009ddc:	68e3      	ldr	r3, [r4, #12]
 8009dde:	782a      	ldrb	r2, [r5, #0]
 8009de0:	1c6e      	adds	r6, r5, #1
 8009de2:	3a30      	subs	r2, #48	; 0x30
 8009de4:	2a09      	cmp	r2, #9
 8009de6:	d94e      	bls.n	8009e86 <_svfiprintf_r+0x17a>
 8009de8:	2900      	cmp	r1, #0
 8009dea:	d111      	bne.n	8009e10 <_svfiprintf_r+0x104>
 8009dec:	e017      	b.n	8009e1e <_svfiprintf_r+0x112>
 8009dee:	3501      	adds	r5, #1
 8009df0:	e7b0      	b.n	8009d54 <_svfiprintf_r+0x48>
 8009df2:	4b41      	ldr	r3, [pc, #260]	; (8009ef8 <_svfiprintf_r+0x1ec>)
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	1ac0      	subs	r0, r0, r3
 8009df8:	2301      	movs	r3, #1
 8009dfa:	4083      	lsls	r3, r0
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	002e      	movs	r6, r5
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	e7ce      	b.n	8009da2 <_svfiprintf_r+0x96>
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	1d19      	adds	r1, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9107      	str	r1, [sp, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	db01      	blt.n	8009e14 <_svfiprintf_r+0x108>
 8009e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e12:	e004      	b.n	8009e1e <_svfiprintf_r+0x112>
 8009e14:	425b      	negs	r3, r3
 8009e16:	60e3      	str	r3, [r4, #12]
 8009e18:	2302      	movs	r3, #2
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	782b      	ldrb	r3, [r5, #0]
 8009e20:	2b2e      	cmp	r3, #46	; 0x2e
 8009e22:	d10a      	bne.n	8009e3a <_svfiprintf_r+0x12e>
 8009e24:	786b      	ldrb	r3, [r5, #1]
 8009e26:	2b2a      	cmp	r3, #42	; 0x2a
 8009e28:	d135      	bne.n	8009e96 <_svfiprintf_r+0x18a>
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	3502      	adds	r5, #2
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9207      	str	r2, [sp, #28]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	db2b      	blt.n	8009e90 <_svfiprintf_r+0x184>
 8009e38:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3a:	4e30      	ldr	r6, [pc, #192]	; (8009efc <_svfiprintf_r+0x1f0>)
 8009e3c:	2203      	movs	r2, #3
 8009e3e:	0030      	movs	r0, r6
 8009e40:	7829      	ldrb	r1, [r5, #0]
 8009e42:	f7ff fa99 	bl	8009378 <memchr>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d006      	beq.n	8009e58 <_svfiprintf_r+0x14c>
 8009e4a:	2340      	movs	r3, #64	; 0x40
 8009e4c:	1b80      	subs	r0, r0, r6
 8009e4e:	4083      	lsls	r3, r0
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	3501      	adds	r5, #1
 8009e54:	4313      	orrs	r3, r2
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	7829      	ldrb	r1, [r5, #0]
 8009e5a:	2206      	movs	r2, #6
 8009e5c:	4828      	ldr	r0, [pc, #160]	; (8009f00 <_svfiprintf_r+0x1f4>)
 8009e5e:	1c6e      	adds	r6, r5, #1
 8009e60:	7621      	strb	r1, [r4, #24]
 8009e62:	f7ff fa89 	bl	8009378 <memchr>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d03c      	beq.n	8009ee4 <_svfiprintf_r+0x1d8>
 8009e6a:	4b26      	ldr	r3, [pc, #152]	; (8009f04 <_svfiprintf_r+0x1f8>)
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d125      	bne.n	8009ebc <_svfiprintf_r+0x1b0>
 8009e70:	2207      	movs	r2, #7
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	3307      	adds	r3, #7
 8009e76:	4393      	bics	r3, r2
 8009e78:	3308      	adds	r3, #8
 8009e7a:	9307      	str	r3, [sp, #28]
 8009e7c:	6963      	ldr	r3, [r4, #20]
 8009e7e:	9a04      	ldr	r2, [sp, #16]
 8009e80:	189b      	adds	r3, r3, r2
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	e765      	b.n	8009d52 <_svfiprintf_r+0x46>
 8009e86:	4343      	muls	r3, r0
 8009e88:	0035      	movs	r5, r6
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	e7a6      	b.n	8009dde <_svfiprintf_r+0xd2>
 8009e90:	2301      	movs	r3, #1
 8009e92:	425b      	negs	r3, r3
 8009e94:	e7d0      	b.n	8009e38 <_svfiprintf_r+0x12c>
 8009e96:	2300      	movs	r3, #0
 8009e98:	200a      	movs	r0, #10
 8009e9a:	001a      	movs	r2, r3
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	7829      	ldrb	r1, [r5, #0]
 8009ea2:	1c6e      	adds	r6, r5, #1
 8009ea4:	3930      	subs	r1, #48	; 0x30
 8009ea6:	2909      	cmp	r1, #9
 8009ea8:	d903      	bls.n	8009eb2 <_svfiprintf_r+0x1a6>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0c5      	beq.n	8009e3a <_svfiprintf_r+0x12e>
 8009eae:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb0:	e7c3      	b.n	8009e3a <_svfiprintf_r+0x12e>
 8009eb2:	4342      	muls	r2, r0
 8009eb4:	0035      	movs	r5, r6
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	1852      	adds	r2, r2, r1
 8009eba:	e7f1      	b.n	8009ea0 <_svfiprintf_r+0x194>
 8009ebc:	ab07      	add	r3, sp, #28
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	003a      	movs	r2, r7
 8009ec2:	0021      	movs	r1, r4
 8009ec4:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <_svfiprintf_r+0x1fc>)
 8009ec6:	9803      	ldr	r0, [sp, #12]
 8009ec8:	f7fd ffae 	bl	8007e28 <_printf_float>
 8009ecc:	9004      	str	r0, [sp, #16]
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	d1d3      	bne.n	8009e7c <_svfiprintf_r+0x170>
 8009ed4:	89bb      	ldrh	r3, [r7, #12]
 8009ed6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ed8:	065b      	lsls	r3, r3, #25
 8009eda:	d400      	bmi.n	8009ede <_svfiprintf_r+0x1d2>
 8009edc:	e72d      	b.n	8009d3a <_svfiprintf_r+0x2e>
 8009ede:	2001      	movs	r0, #1
 8009ee0:	4240      	negs	r0, r0
 8009ee2:	e72a      	b.n	8009d3a <_svfiprintf_r+0x2e>
 8009ee4:	ab07      	add	r3, sp, #28
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	003a      	movs	r2, r7
 8009eea:	0021      	movs	r1, r4
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <_svfiprintf_r+0x1fc>)
 8009eee:	9803      	ldr	r0, [sp, #12]
 8009ef0:	f7fe fa58 	bl	80083a4 <_printf_i>
 8009ef4:	e7ea      	b.n	8009ecc <_svfiprintf_r+0x1c0>
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	0800af5c 	.word	0x0800af5c
 8009efc:	0800af62 	.word	0x0800af62
 8009f00:	0800af66 	.word	0x0800af66
 8009f04:	08007e29 	.word	0x08007e29
 8009f08:	08009c49 	.word	0x08009c49

08009f0c <_sbrk_r>:
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_sbrk_r+0x20>)
 8009f12:	0004      	movs	r4, r0
 8009f14:	0008      	movs	r0, r1
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	f7f9 fa30 	bl	800337c <_sbrk>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d103      	bne.n	8009f28 <_sbrk_r+0x1c>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d000      	beq.n	8009f28 <_sbrk_r+0x1c>
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
 8009f2a:	46c0      	nop			; (mov r8, r8)
 8009f2c:	200003ec 	.word	0x200003ec

08009f30 <__assert_func>:
 8009f30:	b530      	push	{r4, r5, lr}
 8009f32:	0014      	movs	r4, r2
 8009f34:	001a      	movs	r2, r3
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <__assert_func+0x2c>)
 8009f38:	0005      	movs	r5, r0
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	68d8      	ldr	r0, [r3, #12]
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <__assert_func+0x30>)
 8009f42:	2c00      	cmp	r4, #0
 8009f44:	d101      	bne.n	8009f4a <__assert_func+0x1a>
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <__assert_func+0x34>)
 8009f48:	001c      	movs	r4, r3
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	9100      	str	r1, [sp, #0]
 8009f4e:	002b      	movs	r3, r5
 8009f50:	4905      	ldr	r1, [pc, #20]	; (8009f68 <__assert_func+0x38>)
 8009f52:	9402      	str	r4, [sp, #8]
 8009f54:	f000 f80a 	bl	8009f6c <fiprintf>
 8009f58:	f000 fab2 	bl	800a4c0 <abort>
 8009f5c:	2000000c 	.word	0x2000000c
 8009f60:	0800af6d 	.word	0x0800af6d
 8009f64:	0800afa8 	.word	0x0800afa8
 8009f68:	0800af7a 	.word	0x0800af7a

08009f6c <fiprintf>:
 8009f6c:	b40e      	push	{r1, r2, r3}
 8009f6e:	b503      	push	{r0, r1, lr}
 8009f70:	0001      	movs	r1, r0
 8009f72:	ab03      	add	r3, sp, #12
 8009f74:	4804      	ldr	r0, [pc, #16]	; (8009f88 <fiprintf+0x1c>)
 8009f76:	cb04      	ldmia	r3!, {r2}
 8009f78:	6800      	ldr	r0, [r0, #0]
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	f000 f88a 	bl	800a094 <_vfiprintf_r>
 8009f80:	b002      	add	sp, #8
 8009f82:	bc08      	pop	{r3}
 8009f84:	b003      	add	sp, #12
 8009f86:	4718      	bx	r3
 8009f88:	2000000c 	.word	0x2000000c

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	d100      	bne.n	8009f94 <__ascii_mbtowc+0x8>
 8009f92:	a901      	add	r1, sp, #4
 8009f94:	1e10      	subs	r0, r2, #0
 8009f96:	d006      	beq.n	8009fa6 <__ascii_mbtowc+0x1a>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <__ascii_mbtowc+0x1e>
 8009f9c:	7813      	ldrb	r3, [r2, #0]
 8009f9e:	600b      	str	r3, [r1, #0]
 8009fa0:	7810      	ldrb	r0, [r2, #0]
 8009fa2:	1e43      	subs	r3, r0, #1
 8009fa4:	4198      	sbcs	r0, r3
 8009fa6:	b002      	add	sp, #8
 8009fa8:	4770      	bx	lr
 8009faa:	2002      	movs	r0, #2
 8009fac:	4240      	negs	r0, r0
 8009fae:	e7fa      	b.n	8009fa6 <__ascii_mbtowc+0x1a>

08009fb0 <memmove>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	4288      	cmp	r0, r1
 8009fb4:	d902      	bls.n	8009fbc <memmove+0xc>
 8009fb6:	188b      	adds	r3, r1, r2
 8009fb8:	4298      	cmp	r0, r3
 8009fba:	d303      	bcc.n	8009fc4 <memmove+0x14>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e007      	b.n	8009fd0 <memmove+0x20>
 8009fc0:	5c8b      	ldrb	r3, [r1, r2]
 8009fc2:	5483      	strb	r3, [r0, r2]
 8009fc4:	3a01      	subs	r2, #1
 8009fc6:	d2fb      	bcs.n	8009fc0 <memmove+0x10>
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	5ccc      	ldrb	r4, [r1, r3]
 8009fcc:	54c4      	strb	r4, [r0, r3]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d1fa      	bne.n	8009fca <memmove+0x1a>
 8009fd4:	e7f8      	b.n	8009fc8 <memmove+0x18>
	...

08009fd8 <__malloc_lock>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	4802      	ldr	r0, [pc, #8]	; (8009fe4 <__malloc_lock+0xc>)
 8009fdc:	f000 fc47 	bl	800a86e <__retarget_lock_acquire_recursive>
 8009fe0:	bd10      	pop	{r4, pc}
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	200003f4 	.word	0x200003f4

08009fe8 <__malloc_unlock>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	4802      	ldr	r0, [pc, #8]	; (8009ff4 <__malloc_unlock+0xc>)
 8009fec:	f000 fc40 	bl	800a870 <__retarget_lock_release_recursive>
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	200003f4 	.word	0x200003f4

08009ff8 <_realloc_r>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	0007      	movs	r7, r0
 8009ffc:	000d      	movs	r5, r1
 8009ffe:	0016      	movs	r6, r2
 800a000:	2900      	cmp	r1, #0
 800a002:	d105      	bne.n	800a010 <_realloc_r+0x18>
 800a004:	0011      	movs	r1, r2
 800a006:	f7ff fdc1 	bl	8009b8c <_malloc_r>
 800a00a:	0004      	movs	r4, r0
 800a00c:	0020      	movs	r0, r4
 800a00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a010:	2a00      	cmp	r2, #0
 800a012:	d103      	bne.n	800a01c <_realloc_r+0x24>
 800a014:	f7ff fd70 	bl	8009af8 <_free_r>
 800a018:	0034      	movs	r4, r6
 800a01a:	e7f7      	b.n	800a00c <_realloc_r+0x14>
 800a01c:	f000 fc96 	bl	800a94c <_malloc_usable_size_r>
 800a020:	002c      	movs	r4, r5
 800a022:	42b0      	cmp	r0, r6
 800a024:	d2f2      	bcs.n	800a00c <_realloc_r+0x14>
 800a026:	0031      	movs	r1, r6
 800a028:	0038      	movs	r0, r7
 800a02a:	f7ff fdaf 	bl	8009b8c <_malloc_r>
 800a02e:	1e04      	subs	r4, r0, #0
 800a030:	d0ec      	beq.n	800a00c <_realloc_r+0x14>
 800a032:	0029      	movs	r1, r5
 800a034:	0032      	movs	r2, r6
 800a036:	f7ff f9aa 	bl	800938e <memcpy>
 800a03a:	0029      	movs	r1, r5
 800a03c:	0038      	movs	r0, r7
 800a03e:	f7ff fd5b 	bl	8009af8 <_free_r>
 800a042:	e7e3      	b.n	800a00c <_realloc_r+0x14>

0800a044 <__sfputc_r>:
 800a044:	6893      	ldr	r3, [r2, #8]
 800a046:	b510      	push	{r4, lr}
 800a048:	3b01      	subs	r3, #1
 800a04a:	6093      	str	r3, [r2, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	da04      	bge.n	800a05a <__sfputc_r+0x16>
 800a050:	6994      	ldr	r4, [r2, #24]
 800a052:	42a3      	cmp	r3, r4
 800a054:	db07      	blt.n	800a066 <__sfputc_r+0x22>
 800a056:	290a      	cmp	r1, #10
 800a058:	d005      	beq.n	800a066 <__sfputc_r+0x22>
 800a05a:	6813      	ldr	r3, [r2, #0]
 800a05c:	1c58      	adds	r0, r3, #1
 800a05e:	6010      	str	r0, [r2, #0]
 800a060:	7019      	strb	r1, [r3, #0]
 800a062:	0008      	movs	r0, r1
 800a064:	bd10      	pop	{r4, pc}
 800a066:	f000 f94f 	bl	800a308 <__swbuf_r>
 800a06a:	0001      	movs	r1, r0
 800a06c:	e7f9      	b.n	800a062 <__sfputc_r+0x1e>

0800a06e <__sfputs_r>:
 800a06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a070:	0006      	movs	r6, r0
 800a072:	000f      	movs	r7, r1
 800a074:	0014      	movs	r4, r2
 800a076:	18d5      	adds	r5, r2, r3
 800a078:	42ac      	cmp	r4, r5
 800a07a:	d101      	bne.n	800a080 <__sfputs_r+0x12>
 800a07c:	2000      	movs	r0, #0
 800a07e:	e007      	b.n	800a090 <__sfputs_r+0x22>
 800a080:	7821      	ldrb	r1, [r4, #0]
 800a082:	003a      	movs	r2, r7
 800a084:	0030      	movs	r0, r6
 800a086:	f7ff ffdd 	bl	800a044 <__sfputc_r>
 800a08a:	3401      	adds	r4, #1
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d1f3      	bne.n	800a078 <__sfputs_r+0xa>
 800a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a094 <_vfiprintf_r>:
 800a094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a096:	b0a1      	sub	sp, #132	; 0x84
 800a098:	0006      	movs	r6, r0
 800a09a:	000c      	movs	r4, r1
 800a09c:	001f      	movs	r7, r3
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d004      	beq.n	800a0ae <_vfiprintf_r+0x1a>
 800a0a4:	6983      	ldr	r3, [r0, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <_vfiprintf_r+0x1a>
 800a0aa:	f000 fb3f 	bl	800a72c <__sinit>
 800a0ae:	4b8e      	ldr	r3, [pc, #568]	; (800a2e8 <_vfiprintf_r+0x254>)
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	d11c      	bne.n	800a0ee <_vfiprintf_r+0x5a>
 800a0b4:	6874      	ldr	r4, [r6, #4]
 800a0b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0b8:	07db      	lsls	r3, r3, #31
 800a0ba:	d405      	bmi.n	800a0c8 <_vfiprintf_r+0x34>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	059b      	lsls	r3, r3, #22
 800a0c0:	d402      	bmi.n	800a0c8 <_vfiprintf_r+0x34>
 800a0c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0c4:	f000 fbd3 	bl	800a86e <__retarget_lock_acquire_recursive>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	071b      	lsls	r3, r3, #28
 800a0cc:	d502      	bpl.n	800a0d4 <_vfiprintf_r+0x40>
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11d      	bne.n	800a110 <_vfiprintf_r+0x7c>
 800a0d4:	0021      	movs	r1, r4
 800a0d6:	0030      	movs	r0, r6
 800a0d8:	f000 f97a 	bl	800a3d0 <__swsetup_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d017      	beq.n	800a110 <_vfiprintf_r+0x7c>
 800a0e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0e2:	07db      	lsls	r3, r3, #31
 800a0e4:	d50d      	bpl.n	800a102 <_vfiprintf_r+0x6e>
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	4240      	negs	r0, r0
 800a0ea:	b021      	add	sp, #132	; 0x84
 800a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ee:	4b7f      	ldr	r3, [pc, #508]	; (800a2ec <_vfiprintf_r+0x258>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	d101      	bne.n	800a0f8 <_vfiprintf_r+0x64>
 800a0f4:	68b4      	ldr	r4, [r6, #8]
 800a0f6:	e7de      	b.n	800a0b6 <_vfiprintf_r+0x22>
 800a0f8:	4b7d      	ldr	r3, [pc, #500]	; (800a2f0 <_vfiprintf_r+0x25c>)
 800a0fa:	429c      	cmp	r4, r3
 800a0fc:	d1db      	bne.n	800a0b6 <_vfiprintf_r+0x22>
 800a0fe:	68f4      	ldr	r4, [r6, #12]
 800a100:	e7d9      	b.n	800a0b6 <_vfiprintf_r+0x22>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	059b      	lsls	r3, r3, #22
 800a106:	d4ee      	bmi.n	800a0e6 <_vfiprintf_r+0x52>
 800a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a10a:	f000 fbb1 	bl	800a870 <__retarget_lock_release_recursive>
 800a10e:	e7ea      	b.n	800a0e6 <_vfiprintf_r+0x52>
 800a110:	2300      	movs	r3, #0
 800a112:	ad08      	add	r5, sp, #32
 800a114:	616b      	str	r3, [r5, #20]
 800a116:	3320      	adds	r3, #32
 800a118:	766b      	strb	r3, [r5, #25]
 800a11a:	3310      	adds	r3, #16
 800a11c:	76ab      	strb	r3, [r5, #26]
 800a11e:	9707      	str	r7, [sp, #28]
 800a120:	9f03      	ldr	r7, [sp, #12]
 800a122:	783b      	ldrb	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <_vfiprintf_r+0x98>
 800a128:	2b25      	cmp	r3, #37	; 0x25
 800a12a:	d14e      	bne.n	800a1ca <_vfiprintf_r+0x136>
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	1afb      	subs	r3, r7, r3
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	429f      	cmp	r7, r3
 800a136:	d00d      	beq.n	800a154 <_vfiprintf_r+0xc0>
 800a138:	9b05      	ldr	r3, [sp, #20]
 800a13a:	0021      	movs	r1, r4
 800a13c:	0030      	movs	r0, r6
 800a13e:	9a03      	ldr	r2, [sp, #12]
 800a140:	f7ff ff95 	bl	800a06e <__sfputs_r>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d100      	bne.n	800a14a <_vfiprintf_r+0xb6>
 800a148:	e0b5      	b.n	800a2b6 <_vfiprintf_r+0x222>
 800a14a:	696a      	ldr	r2, [r5, #20]
 800a14c:	9b05      	ldr	r3, [sp, #20]
 800a14e:	4694      	mov	ip, r2
 800a150:	4463      	add	r3, ip
 800a152:	616b      	str	r3, [r5, #20]
 800a154:	783b      	ldrb	r3, [r7, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d100      	bne.n	800a15c <_vfiprintf_r+0xc8>
 800a15a:	e0ac      	b.n	800a2b6 <_vfiprintf_r+0x222>
 800a15c:	2201      	movs	r2, #1
 800a15e:	1c7b      	adds	r3, r7, #1
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	2300      	movs	r3, #0
 800a164:	4252      	negs	r2, r2
 800a166:	606a      	str	r2, [r5, #4]
 800a168:	a904      	add	r1, sp, #16
 800a16a:	3254      	adds	r2, #84	; 0x54
 800a16c:	1852      	adds	r2, r2, r1
 800a16e:	602b      	str	r3, [r5, #0]
 800a170:	60eb      	str	r3, [r5, #12]
 800a172:	60ab      	str	r3, [r5, #8]
 800a174:	7013      	strb	r3, [r2, #0]
 800a176:	65ab      	str	r3, [r5, #88]	; 0x58
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	2205      	movs	r2, #5
 800a17c:	7819      	ldrb	r1, [r3, #0]
 800a17e:	485d      	ldr	r0, [pc, #372]	; (800a2f4 <_vfiprintf_r+0x260>)
 800a180:	f7ff f8fa 	bl	8009378 <memchr>
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	1c5f      	adds	r7, r3, #1
 800a188:	2800      	cmp	r0, #0
 800a18a:	d120      	bne.n	800a1ce <_vfiprintf_r+0x13a>
 800a18c:	682a      	ldr	r2, [r5, #0]
 800a18e:	06d3      	lsls	r3, r2, #27
 800a190:	d504      	bpl.n	800a19c <_vfiprintf_r+0x108>
 800a192:	2353      	movs	r3, #83	; 0x53
 800a194:	a904      	add	r1, sp, #16
 800a196:	185b      	adds	r3, r3, r1
 800a198:	2120      	movs	r1, #32
 800a19a:	7019      	strb	r1, [r3, #0]
 800a19c:	0713      	lsls	r3, r2, #28
 800a19e:	d504      	bpl.n	800a1aa <_vfiprintf_r+0x116>
 800a1a0:	2353      	movs	r3, #83	; 0x53
 800a1a2:	a904      	add	r1, sp, #16
 800a1a4:	185b      	adds	r3, r3, r1
 800a1a6:	212b      	movs	r1, #43	; 0x2b
 800a1a8:	7019      	strb	r1, [r3, #0]
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b0:	d016      	beq.n	800a1e0 <_vfiprintf_r+0x14c>
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	68eb      	ldr	r3, [r5, #12]
 800a1b6:	9f03      	ldr	r7, [sp, #12]
 800a1b8:	783a      	ldrb	r2, [r7, #0]
 800a1ba:	1c78      	adds	r0, r7, #1
 800a1bc:	3a30      	subs	r2, #48	; 0x30
 800a1be:	4684      	mov	ip, r0
 800a1c0:	2a09      	cmp	r2, #9
 800a1c2:	d94f      	bls.n	800a264 <_vfiprintf_r+0x1d0>
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	d111      	bne.n	800a1ec <_vfiprintf_r+0x158>
 800a1c8:	e017      	b.n	800a1fa <_vfiprintf_r+0x166>
 800a1ca:	3701      	adds	r7, #1
 800a1cc:	e7a9      	b.n	800a122 <_vfiprintf_r+0x8e>
 800a1ce:	4b49      	ldr	r3, [pc, #292]	; (800a2f4 <_vfiprintf_r+0x260>)
 800a1d0:	682a      	ldr	r2, [r5, #0]
 800a1d2:	1ac0      	subs	r0, r0, r3
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4083      	lsls	r3, r0
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	9703      	str	r7, [sp, #12]
 800a1de:	e7cb      	b.n	800a178 <_vfiprintf_r+0xe4>
 800a1e0:	9b07      	ldr	r3, [sp, #28]
 800a1e2:	1d19      	adds	r1, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	9107      	str	r1, [sp, #28]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	db01      	blt.n	800a1f0 <_vfiprintf_r+0x15c>
 800a1ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ee:	e004      	b.n	800a1fa <_vfiprintf_r+0x166>
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	60eb      	str	r3, [r5, #12]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	783b      	ldrb	r3, [r7, #0]
 800a1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fe:	d10a      	bne.n	800a216 <_vfiprintf_r+0x182>
 800a200:	787b      	ldrb	r3, [r7, #1]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d137      	bne.n	800a276 <_vfiprintf_r+0x1e2>
 800a206:	9b07      	ldr	r3, [sp, #28]
 800a208:	3702      	adds	r7, #2
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9207      	str	r2, [sp, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	db2d      	blt.n	800a270 <_vfiprintf_r+0x1dc>
 800a214:	9309      	str	r3, [sp, #36]	; 0x24
 800a216:	2203      	movs	r2, #3
 800a218:	7839      	ldrb	r1, [r7, #0]
 800a21a:	4837      	ldr	r0, [pc, #220]	; (800a2f8 <_vfiprintf_r+0x264>)
 800a21c:	f7ff f8ac 	bl	8009378 <memchr>
 800a220:	2800      	cmp	r0, #0
 800a222:	d007      	beq.n	800a234 <_vfiprintf_r+0x1a0>
 800a224:	4b34      	ldr	r3, [pc, #208]	; (800a2f8 <_vfiprintf_r+0x264>)
 800a226:	682a      	ldr	r2, [r5, #0]
 800a228:	1ac0      	subs	r0, r0, r3
 800a22a:	2340      	movs	r3, #64	; 0x40
 800a22c:	4083      	lsls	r3, r0
 800a22e:	4313      	orrs	r3, r2
 800a230:	3701      	adds	r7, #1
 800a232:	602b      	str	r3, [r5, #0]
 800a234:	7839      	ldrb	r1, [r7, #0]
 800a236:	1c7b      	adds	r3, r7, #1
 800a238:	2206      	movs	r2, #6
 800a23a:	4830      	ldr	r0, [pc, #192]	; (800a2fc <_vfiprintf_r+0x268>)
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	7629      	strb	r1, [r5, #24]
 800a240:	f7ff f89a 	bl	8009378 <memchr>
 800a244:	2800      	cmp	r0, #0
 800a246:	d045      	beq.n	800a2d4 <_vfiprintf_r+0x240>
 800a248:	4b2d      	ldr	r3, [pc, #180]	; (800a300 <_vfiprintf_r+0x26c>)
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d127      	bne.n	800a29e <_vfiprintf_r+0x20a>
 800a24e:	2207      	movs	r2, #7
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	3307      	adds	r3, #7
 800a254:	4393      	bics	r3, r2
 800a256:	3308      	adds	r3, #8
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	696b      	ldr	r3, [r5, #20]
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	189b      	adds	r3, r3, r2
 800a260:	616b      	str	r3, [r5, #20]
 800a262:	e75d      	b.n	800a120 <_vfiprintf_r+0x8c>
 800a264:	210a      	movs	r1, #10
 800a266:	434b      	muls	r3, r1
 800a268:	4667      	mov	r7, ip
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	3909      	subs	r1, #9
 800a26e:	e7a3      	b.n	800a1b8 <_vfiprintf_r+0x124>
 800a270:	2301      	movs	r3, #1
 800a272:	425b      	negs	r3, r3
 800a274:	e7ce      	b.n	800a214 <_vfiprintf_r+0x180>
 800a276:	2300      	movs	r3, #0
 800a278:	001a      	movs	r2, r3
 800a27a:	3701      	adds	r7, #1
 800a27c:	606b      	str	r3, [r5, #4]
 800a27e:	7839      	ldrb	r1, [r7, #0]
 800a280:	1c78      	adds	r0, r7, #1
 800a282:	3930      	subs	r1, #48	; 0x30
 800a284:	4684      	mov	ip, r0
 800a286:	2909      	cmp	r1, #9
 800a288:	d903      	bls.n	800a292 <_vfiprintf_r+0x1fe>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0c3      	beq.n	800a216 <_vfiprintf_r+0x182>
 800a28e:	9209      	str	r2, [sp, #36]	; 0x24
 800a290:	e7c1      	b.n	800a216 <_vfiprintf_r+0x182>
 800a292:	230a      	movs	r3, #10
 800a294:	435a      	muls	r2, r3
 800a296:	4667      	mov	r7, ip
 800a298:	1852      	adds	r2, r2, r1
 800a29a:	3b09      	subs	r3, #9
 800a29c:	e7ef      	b.n	800a27e <_vfiprintf_r+0x1ea>
 800a29e:	ab07      	add	r3, sp, #28
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	0022      	movs	r2, r4
 800a2a4:	0029      	movs	r1, r5
 800a2a6:	0030      	movs	r0, r6
 800a2a8:	4b16      	ldr	r3, [pc, #88]	; (800a304 <_vfiprintf_r+0x270>)
 800a2aa:	f7fd fdbd 	bl	8007e28 <_printf_float>
 800a2ae:	9004      	str	r0, [sp, #16]
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	d1d1      	bne.n	800a25a <_vfiprintf_r+0x1c6>
 800a2b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2b8:	07db      	lsls	r3, r3, #31
 800a2ba:	d405      	bmi.n	800a2c8 <_vfiprintf_r+0x234>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	059b      	lsls	r3, r3, #22
 800a2c0:	d402      	bmi.n	800a2c8 <_vfiprintf_r+0x234>
 800a2c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c4:	f000 fad4 	bl	800a870 <__retarget_lock_release_recursive>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	065b      	lsls	r3, r3, #25
 800a2cc:	d500      	bpl.n	800a2d0 <_vfiprintf_r+0x23c>
 800a2ce:	e70a      	b.n	800a0e6 <_vfiprintf_r+0x52>
 800a2d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2d2:	e70a      	b.n	800a0ea <_vfiprintf_r+0x56>
 800a2d4:	ab07      	add	r3, sp, #28
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	0022      	movs	r2, r4
 800a2da:	0029      	movs	r1, r5
 800a2dc:	0030      	movs	r0, r6
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <_vfiprintf_r+0x270>)
 800a2e0:	f7fe f860 	bl	80083a4 <_printf_i>
 800a2e4:	e7e3      	b.n	800a2ae <_vfiprintf_r+0x21a>
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	0800b0d4 	.word	0x0800b0d4
 800a2ec:	0800b0f4 	.word	0x0800b0f4
 800a2f0:	0800b0b4 	.word	0x0800b0b4
 800a2f4:	0800af5c 	.word	0x0800af5c
 800a2f8:	0800af62 	.word	0x0800af62
 800a2fc:	0800af66 	.word	0x0800af66
 800a300:	08007e29 	.word	0x08007e29
 800a304:	0800a06f 	.word	0x0800a06f

0800a308 <__swbuf_r>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	0005      	movs	r5, r0
 800a30c:	000e      	movs	r6, r1
 800a30e:	0014      	movs	r4, r2
 800a310:	2800      	cmp	r0, #0
 800a312:	d004      	beq.n	800a31e <__swbuf_r+0x16>
 800a314:	6983      	ldr	r3, [r0, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <__swbuf_r+0x16>
 800a31a:	f000 fa07 	bl	800a72c <__sinit>
 800a31e:	4b22      	ldr	r3, [pc, #136]	; (800a3a8 <__swbuf_r+0xa0>)
 800a320:	429c      	cmp	r4, r3
 800a322:	d12e      	bne.n	800a382 <__swbuf_r+0x7a>
 800a324:	686c      	ldr	r4, [r5, #4]
 800a326:	69a3      	ldr	r3, [r4, #24]
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	071b      	lsls	r3, r3, #28
 800a32e:	d532      	bpl.n	800a396 <__swbuf_r+0x8e>
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d02f      	beq.n	800a396 <__swbuf_r+0x8e>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	6922      	ldr	r2, [r4, #16]
 800a33a:	b2f7      	uxtb	r7, r6
 800a33c:	1a98      	subs	r0, r3, r2
 800a33e:	6963      	ldr	r3, [r4, #20]
 800a340:	b2f6      	uxtb	r6, r6
 800a342:	4283      	cmp	r3, r0
 800a344:	dc05      	bgt.n	800a352 <__swbuf_r+0x4a>
 800a346:	0021      	movs	r1, r4
 800a348:	0028      	movs	r0, r5
 800a34a:	f000 f94d 	bl	800a5e8 <_fflush_r>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d127      	bne.n	800a3a2 <__swbuf_r+0x9a>
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	3001      	adds	r0, #1
 800a356:	3b01      	subs	r3, #1
 800a358:	60a3      	str	r3, [r4, #8]
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	701f      	strb	r7, [r3, #0]
 800a362:	6963      	ldr	r3, [r4, #20]
 800a364:	4283      	cmp	r3, r0
 800a366:	d004      	beq.n	800a372 <__swbuf_r+0x6a>
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	07db      	lsls	r3, r3, #31
 800a36c:	d507      	bpl.n	800a37e <__swbuf_r+0x76>
 800a36e:	2e0a      	cmp	r6, #10
 800a370:	d105      	bne.n	800a37e <__swbuf_r+0x76>
 800a372:	0021      	movs	r1, r4
 800a374:	0028      	movs	r0, r5
 800a376:	f000 f937 	bl	800a5e8 <_fflush_r>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d111      	bne.n	800a3a2 <__swbuf_r+0x9a>
 800a37e:	0030      	movs	r0, r6
 800a380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a382:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <__swbuf_r+0xa4>)
 800a384:	429c      	cmp	r4, r3
 800a386:	d101      	bne.n	800a38c <__swbuf_r+0x84>
 800a388:	68ac      	ldr	r4, [r5, #8]
 800a38a:	e7cc      	b.n	800a326 <__swbuf_r+0x1e>
 800a38c:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <__swbuf_r+0xa8>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	d1c9      	bne.n	800a326 <__swbuf_r+0x1e>
 800a392:	68ec      	ldr	r4, [r5, #12]
 800a394:	e7c7      	b.n	800a326 <__swbuf_r+0x1e>
 800a396:	0021      	movs	r1, r4
 800a398:	0028      	movs	r0, r5
 800a39a:	f000 f819 	bl	800a3d0 <__swsetup_r>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0c9      	beq.n	800a336 <__swbuf_r+0x2e>
 800a3a2:	2601      	movs	r6, #1
 800a3a4:	4276      	negs	r6, r6
 800a3a6:	e7ea      	b.n	800a37e <__swbuf_r+0x76>
 800a3a8:	0800b0d4 	.word	0x0800b0d4
 800a3ac:	0800b0f4 	.word	0x0800b0f4
 800a3b0:	0800b0b4 	.word	0x0800b0b4

0800a3b4 <__ascii_wctomb>:
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	1e08      	subs	r0, r1, #0
 800a3b8:	d005      	beq.n	800a3c6 <__ascii_wctomb+0x12>
 800a3ba:	2aff      	cmp	r2, #255	; 0xff
 800a3bc:	d904      	bls.n	800a3c8 <__ascii_wctomb+0x14>
 800a3be:	228a      	movs	r2, #138	; 0x8a
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	4240      	negs	r0, r0
 800a3c6:	4770      	bx	lr
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	700a      	strb	r2, [r1, #0]
 800a3cc:	e7fb      	b.n	800a3c6 <__ascii_wctomb+0x12>
	...

0800a3d0 <__swsetup_r>:
 800a3d0:	4b37      	ldr	r3, [pc, #220]	; (800a4b0 <__swsetup_r+0xe0>)
 800a3d2:	b570      	push	{r4, r5, r6, lr}
 800a3d4:	681d      	ldr	r5, [r3, #0]
 800a3d6:	0006      	movs	r6, r0
 800a3d8:	000c      	movs	r4, r1
 800a3da:	2d00      	cmp	r5, #0
 800a3dc:	d005      	beq.n	800a3ea <__swsetup_r+0x1a>
 800a3de:	69ab      	ldr	r3, [r5, #24]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <__swsetup_r+0x1a>
 800a3e4:	0028      	movs	r0, r5
 800a3e6:	f000 f9a1 	bl	800a72c <__sinit>
 800a3ea:	4b32      	ldr	r3, [pc, #200]	; (800a4b4 <__swsetup_r+0xe4>)
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	d10f      	bne.n	800a410 <__swsetup_r+0x40>
 800a3f0:	686c      	ldr	r4, [r5, #4]
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	5ee2      	ldrsh	r2, [r4, r3]
 800a3f6:	b293      	uxth	r3, r2
 800a3f8:	0711      	lsls	r1, r2, #28
 800a3fa:	d42d      	bmi.n	800a458 <__swsetup_r+0x88>
 800a3fc:	06d9      	lsls	r1, r3, #27
 800a3fe:	d411      	bmi.n	800a424 <__swsetup_r+0x54>
 800a400:	2309      	movs	r3, #9
 800a402:	2001      	movs	r0, #1
 800a404:	6033      	str	r3, [r6, #0]
 800a406:	3337      	adds	r3, #55	; 0x37
 800a408:	4313      	orrs	r3, r2
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	4240      	negs	r0, r0
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	4b29      	ldr	r3, [pc, #164]	; (800a4b8 <__swsetup_r+0xe8>)
 800a412:	429c      	cmp	r4, r3
 800a414:	d101      	bne.n	800a41a <__swsetup_r+0x4a>
 800a416:	68ac      	ldr	r4, [r5, #8]
 800a418:	e7eb      	b.n	800a3f2 <__swsetup_r+0x22>
 800a41a:	4b28      	ldr	r3, [pc, #160]	; (800a4bc <__swsetup_r+0xec>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d1e8      	bne.n	800a3f2 <__swsetup_r+0x22>
 800a420:	68ec      	ldr	r4, [r5, #12]
 800a422:	e7e6      	b.n	800a3f2 <__swsetup_r+0x22>
 800a424:	075b      	lsls	r3, r3, #29
 800a426:	d513      	bpl.n	800a450 <__swsetup_r+0x80>
 800a428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42a:	2900      	cmp	r1, #0
 800a42c:	d008      	beq.n	800a440 <__swsetup_r+0x70>
 800a42e:	0023      	movs	r3, r4
 800a430:	3344      	adds	r3, #68	; 0x44
 800a432:	4299      	cmp	r1, r3
 800a434:	d002      	beq.n	800a43c <__swsetup_r+0x6c>
 800a436:	0030      	movs	r0, r6
 800a438:	f7ff fb5e 	bl	8009af8 <_free_r>
 800a43c:	2300      	movs	r3, #0
 800a43e:	6363      	str	r3, [r4, #52]	; 0x34
 800a440:	2224      	movs	r2, #36	; 0x24
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	4393      	bics	r3, r2
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	2300      	movs	r3, #0
 800a44a:	6063      	str	r3, [r4, #4]
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	2308      	movs	r3, #8
 800a452:	89a2      	ldrh	r2, [r4, #12]
 800a454:	4313      	orrs	r3, r2
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10b      	bne.n	800a476 <__swsetup_r+0xa6>
 800a45e:	21a0      	movs	r1, #160	; 0xa0
 800a460:	2280      	movs	r2, #128	; 0x80
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	0089      	lsls	r1, r1, #2
 800a466:	0092      	lsls	r2, r2, #2
 800a468:	400b      	ands	r3, r1
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d003      	beq.n	800a476 <__swsetup_r+0xa6>
 800a46e:	0021      	movs	r1, r4
 800a470:	0030      	movs	r0, r6
 800a472:	f000 fa27 	bl	800a8c4 <__smakebuf_r>
 800a476:	220c      	movs	r2, #12
 800a478:	5ea3      	ldrsh	r3, [r4, r2]
 800a47a:	2001      	movs	r0, #1
 800a47c:	001a      	movs	r2, r3
 800a47e:	b299      	uxth	r1, r3
 800a480:	4002      	ands	r2, r0
 800a482:	4203      	tst	r3, r0
 800a484:	d00f      	beq.n	800a4a6 <__swsetup_r+0xd6>
 800a486:	2200      	movs	r2, #0
 800a488:	60a2      	str	r2, [r4, #8]
 800a48a:	6962      	ldr	r2, [r4, #20]
 800a48c:	4252      	negs	r2, r2
 800a48e:	61a2      	str	r2, [r4, #24]
 800a490:	2000      	movs	r0, #0
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	4282      	cmp	r2, r0
 800a496:	d1ba      	bne.n	800a40e <__swsetup_r+0x3e>
 800a498:	060a      	lsls	r2, r1, #24
 800a49a:	d5b8      	bpl.n	800a40e <__swsetup_r+0x3e>
 800a49c:	2240      	movs	r2, #64	; 0x40
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	3801      	subs	r0, #1
 800a4a4:	e7b3      	b.n	800a40e <__swsetup_r+0x3e>
 800a4a6:	0788      	lsls	r0, r1, #30
 800a4a8:	d400      	bmi.n	800a4ac <__swsetup_r+0xdc>
 800a4aa:	6962      	ldr	r2, [r4, #20]
 800a4ac:	60a2      	str	r2, [r4, #8]
 800a4ae:	e7ef      	b.n	800a490 <__swsetup_r+0xc0>
 800a4b0:	2000000c 	.word	0x2000000c
 800a4b4:	0800b0d4 	.word	0x0800b0d4
 800a4b8:	0800b0f4 	.word	0x0800b0f4
 800a4bc:	0800b0b4 	.word	0x0800b0b4

0800a4c0 <abort>:
 800a4c0:	2006      	movs	r0, #6
 800a4c2:	b510      	push	{r4, lr}
 800a4c4:	f000 fa74 	bl	800a9b0 <raise>
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	f7f8 fee5 	bl	8003298 <_exit>
	...

0800a4d0 <__sflush_r>:
 800a4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d2:	898b      	ldrh	r3, [r1, #12]
 800a4d4:	0005      	movs	r5, r0
 800a4d6:	000c      	movs	r4, r1
 800a4d8:	071a      	lsls	r2, r3, #28
 800a4da:	d45f      	bmi.n	800a59c <__sflush_r+0xcc>
 800a4dc:	684a      	ldr	r2, [r1, #4]
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	dc04      	bgt.n	800a4ec <__sflush_r+0x1c>
 800a4e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	dc01      	bgt.n	800a4ec <__sflush_r+0x1c>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	d0fa      	beq.n	800a4e8 <__sflush_r+0x18>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2180      	movs	r1, #128	; 0x80
 800a4f6:	682e      	ldr	r6, [r5, #0]
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	001a      	movs	r2, r3
 800a4fc:	0149      	lsls	r1, r1, #5
 800a4fe:	400a      	ands	r2, r1
 800a500:	420b      	tst	r3, r1
 800a502:	d034      	beq.n	800a56e <__sflush_r+0x9e>
 800a504:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	075b      	lsls	r3, r3, #29
 800a50a:	d506      	bpl.n	800a51a <__sflush_r+0x4a>
 800a50c:	6863      	ldr	r3, [r4, #4]
 800a50e:	1ac0      	subs	r0, r0, r3
 800a510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <__sflush_r+0x4a>
 800a516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a518:	1ac0      	subs	r0, r0, r3
 800a51a:	0002      	movs	r2, r0
 800a51c:	6a21      	ldr	r1, [r4, #32]
 800a51e:	2300      	movs	r3, #0
 800a520:	0028      	movs	r0, r5
 800a522:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a524:	47b8      	blx	r7
 800a526:	89a1      	ldrh	r1, [r4, #12]
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d106      	bne.n	800a53a <__sflush_r+0x6a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	2b1d      	cmp	r3, #29
 800a530:	d831      	bhi.n	800a596 <__sflush_r+0xc6>
 800a532:	4a2c      	ldr	r2, [pc, #176]	; (800a5e4 <__sflush_r+0x114>)
 800a534:	40da      	lsrs	r2, r3
 800a536:	07d3      	lsls	r3, r2, #31
 800a538:	d52d      	bpl.n	800a596 <__sflush_r+0xc6>
 800a53a:	2300      	movs	r3, #0
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	04cb      	lsls	r3, r1, #19
 800a544:	d505      	bpl.n	800a552 <__sflush_r+0x82>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d102      	bne.n	800a550 <__sflush_r+0x80>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d100      	bne.n	800a552 <__sflush_r+0x82>
 800a550:	6560      	str	r0, [r4, #84]	; 0x54
 800a552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a554:	602e      	str	r6, [r5, #0]
 800a556:	2900      	cmp	r1, #0
 800a558:	d0c6      	beq.n	800a4e8 <__sflush_r+0x18>
 800a55a:	0023      	movs	r3, r4
 800a55c:	3344      	adds	r3, #68	; 0x44
 800a55e:	4299      	cmp	r1, r3
 800a560:	d002      	beq.n	800a568 <__sflush_r+0x98>
 800a562:	0028      	movs	r0, r5
 800a564:	f7ff fac8 	bl	8009af8 <_free_r>
 800a568:	2000      	movs	r0, #0
 800a56a:	6360      	str	r0, [r4, #52]	; 0x34
 800a56c:	e7bd      	b.n	800a4ea <__sflush_r+0x1a>
 800a56e:	2301      	movs	r3, #1
 800a570:	0028      	movs	r0, r5
 800a572:	6a21      	ldr	r1, [r4, #32]
 800a574:	47b8      	blx	r7
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d1c5      	bne.n	800a506 <__sflush_r+0x36>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0c2      	beq.n	800a506 <__sflush_r+0x36>
 800a580:	2b1d      	cmp	r3, #29
 800a582:	d001      	beq.n	800a588 <__sflush_r+0xb8>
 800a584:	2b16      	cmp	r3, #22
 800a586:	d101      	bne.n	800a58c <__sflush_r+0xbc>
 800a588:	602e      	str	r6, [r5, #0]
 800a58a:	e7ad      	b.n	800a4e8 <__sflush_r+0x18>
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	89a2      	ldrh	r2, [r4, #12]
 800a590:	4313      	orrs	r3, r2
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	e7a9      	b.n	800a4ea <__sflush_r+0x1a>
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	430b      	orrs	r3, r1
 800a59a:	e7fa      	b.n	800a592 <__sflush_r+0xc2>
 800a59c:	690f      	ldr	r7, [r1, #16]
 800a59e:	2f00      	cmp	r7, #0
 800a5a0:	d0a2      	beq.n	800a4e8 <__sflush_r+0x18>
 800a5a2:	680a      	ldr	r2, [r1, #0]
 800a5a4:	600f      	str	r7, [r1, #0]
 800a5a6:	1bd2      	subs	r2, r2, r7
 800a5a8:	9201      	str	r2, [sp, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	079b      	lsls	r3, r3, #30
 800a5ae:	d100      	bne.n	800a5b2 <__sflush_r+0xe2>
 800a5b0:	694a      	ldr	r2, [r1, #20]
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dc00      	bgt.n	800a5bc <__sflush_r+0xec>
 800a5ba:	e795      	b.n	800a4e8 <__sflush_r+0x18>
 800a5bc:	003a      	movs	r2, r7
 800a5be:	0028      	movs	r0, r5
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	6a21      	ldr	r1, [r4, #32]
 800a5c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5c6:	47b0      	blx	r6
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	dc06      	bgt.n	800a5da <__sflush_r+0x10a>
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	89a2      	ldrh	r2, [r4, #12]
 800a5d2:	4240      	negs	r0, r0
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	e787      	b.n	800a4ea <__sflush_r+0x1a>
 800a5da:	9b01      	ldr	r3, [sp, #4]
 800a5dc:	183f      	adds	r7, r7, r0
 800a5de:	1a1b      	subs	r3, r3, r0
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	e7e7      	b.n	800a5b4 <__sflush_r+0xe4>
 800a5e4:	20400001 	.word	0x20400001

0800a5e8 <_fflush_r>:
 800a5e8:	690b      	ldr	r3, [r1, #16]
 800a5ea:	b570      	push	{r4, r5, r6, lr}
 800a5ec:	0005      	movs	r5, r0
 800a5ee:	000c      	movs	r4, r1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <_fflush_r+0x12>
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	0028      	movs	r0, r5
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d004      	beq.n	800a608 <_fflush_r+0x20>
 800a5fe:	6983      	ldr	r3, [r0, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <_fflush_r+0x20>
 800a604:	f000 f892 	bl	800a72c <__sinit>
 800a608:	4b14      	ldr	r3, [pc, #80]	; (800a65c <_fflush_r+0x74>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d11b      	bne.n	800a646 <_fflush_r+0x5e>
 800a60e:	686c      	ldr	r4, [r5, #4]
 800a610:	220c      	movs	r2, #12
 800a612:	5ea3      	ldrsh	r3, [r4, r2]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0ed      	beq.n	800a5f4 <_fflush_r+0xc>
 800a618:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a61a:	07d2      	lsls	r2, r2, #31
 800a61c:	d404      	bmi.n	800a628 <_fflush_r+0x40>
 800a61e:	059b      	lsls	r3, r3, #22
 800a620:	d402      	bmi.n	800a628 <_fflush_r+0x40>
 800a622:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a624:	f000 f923 	bl	800a86e <__retarget_lock_acquire_recursive>
 800a628:	0028      	movs	r0, r5
 800a62a:	0021      	movs	r1, r4
 800a62c:	f7ff ff50 	bl	800a4d0 <__sflush_r>
 800a630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a632:	0005      	movs	r5, r0
 800a634:	07db      	lsls	r3, r3, #31
 800a636:	d4de      	bmi.n	800a5f6 <_fflush_r+0xe>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	059b      	lsls	r3, r3, #22
 800a63c:	d4db      	bmi.n	800a5f6 <_fflush_r+0xe>
 800a63e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a640:	f000 f916 	bl	800a870 <__retarget_lock_release_recursive>
 800a644:	e7d7      	b.n	800a5f6 <_fflush_r+0xe>
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <_fflush_r+0x78>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	d101      	bne.n	800a650 <_fflush_r+0x68>
 800a64c:	68ac      	ldr	r4, [r5, #8]
 800a64e:	e7df      	b.n	800a610 <_fflush_r+0x28>
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <_fflush_r+0x7c>)
 800a652:	429c      	cmp	r4, r3
 800a654:	d1dc      	bne.n	800a610 <_fflush_r+0x28>
 800a656:	68ec      	ldr	r4, [r5, #12]
 800a658:	e7da      	b.n	800a610 <_fflush_r+0x28>
 800a65a:	46c0      	nop			; (mov r8, r8)
 800a65c:	0800b0d4 	.word	0x0800b0d4
 800a660:	0800b0f4 	.word	0x0800b0f4
 800a664:	0800b0b4 	.word	0x0800b0b4

0800a668 <std>:
 800a668:	2300      	movs	r3, #0
 800a66a:	b510      	push	{r4, lr}
 800a66c:	0004      	movs	r4, r0
 800a66e:	6003      	str	r3, [r0, #0]
 800a670:	6043      	str	r3, [r0, #4]
 800a672:	6083      	str	r3, [r0, #8]
 800a674:	8181      	strh	r1, [r0, #12]
 800a676:	6643      	str	r3, [r0, #100]	; 0x64
 800a678:	0019      	movs	r1, r3
 800a67a:	81c2      	strh	r2, [r0, #14]
 800a67c:	6103      	str	r3, [r0, #16]
 800a67e:	6143      	str	r3, [r0, #20]
 800a680:	6183      	str	r3, [r0, #24]
 800a682:	2208      	movs	r2, #8
 800a684:	305c      	adds	r0, #92	; 0x5c
 800a686:	f7fd fb1d 	bl	8007cc4 <memset>
 800a68a:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <std+0x38>)
 800a68c:	6263      	str	r3, [r4, #36]	; 0x24
 800a68e:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <std+0x3c>)
 800a690:	6224      	str	r4, [r4, #32]
 800a692:	62a3      	str	r3, [r4, #40]	; 0x28
 800a694:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <std+0x40>)
 800a696:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <std+0x44>)
 800a69a:	6323      	str	r3, [r4, #48]	; 0x30
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	46c0      	nop			; (mov r8, r8)
 800a6a0:	0800a9f1 	.word	0x0800a9f1
 800a6a4:	0800aa19 	.word	0x0800aa19
 800a6a8:	0800aa51 	.word	0x0800aa51
 800a6ac:	0800aa7d 	.word	0x0800aa7d

0800a6b0 <_cleanup_r>:
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	4902      	ldr	r1, [pc, #8]	; (800a6bc <_cleanup_r+0xc>)
 800a6b4:	f000 f8ba 	bl	800a82c <_fwalk_reent>
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	0800a5e9 	.word	0x0800a5e9

0800a6c0 <__sfmoreglue>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	2568      	movs	r5, #104	; 0x68
 800a6c4:	1e4a      	subs	r2, r1, #1
 800a6c6:	4355      	muls	r5, r2
 800a6c8:	000e      	movs	r6, r1
 800a6ca:	0029      	movs	r1, r5
 800a6cc:	3174      	adds	r1, #116	; 0x74
 800a6ce:	f7ff fa5d 	bl	8009b8c <_malloc_r>
 800a6d2:	1e04      	subs	r4, r0, #0
 800a6d4:	d008      	beq.n	800a6e8 <__sfmoreglue+0x28>
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	002a      	movs	r2, r5
 800a6da:	6001      	str	r1, [r0, #0]
 800a6dc:	6046      	str	r6, [r0, #4]
 800a6de:	300c      	adds	r0, #12
 800a6e0:	60a0      	str	r0, [r4, #8]
 800a6e2:	3268      	adds	r2, #104	; 0x68
 800a6e4:	f7fd faee 	bl	8007cc4 <memset>
 800a6e8:	0020      	movs	r0, r4
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}

0800a6ec <__sfp_lock_acquire>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4802      	ldr	r0, [pc, #8]	; (800a6f8 <__sfp_lock_acquire+0xc>)
 800a6f0:	f000 f8bd 	bl	800a86e <__retarget_lock_acquire_recursive>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	46c0      	nop			; (mov r8, r8)
 800a6f8:	200003f8 	.word	0x200003f8

0800a6fc <__sfp_lock_release>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	4802      	ldr	r0, [pc, #8]	; (800a708 <__sfp_lock_release+0xc>)
 800a700:	f000 f8b6 	bl	800a870 <__retarget_lock_release_recursive>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	46c0      	nop			; (mov r8, r8)
 800a708:	200003f8 	.word	0x200003f8

0800a70c <__sinit_lock_acquire>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4802      	ldr	r0, [pc, #8]	; (800a718 <__sinit_lock_acquire+0xc>)
 800a710:	f000 f8ad 	bl	800a86e <__retarget_lock_acquire_recursive>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	46c0      	nop			; (mov r8, r8)
 800a718:	200003f3 	.word	0x200003f3

0800a71c <__sinit_lock_release>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4802      	ldr	r0, [pc, #8]	; (800a728 <__sinit_lock_release+0xc>)
 800a720:	f000 f8a6 	bl	800a870 <__retarget_lock_release_recursive>
 800a724:	bd10      	pop	{r4, pc}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	200003f3 	.word	0x200003f3

0800a72c <__sinit>:
 800a72c:	b513      	push	{r0, r1, r4, lr}
 800a72e:	0004      	movs	r4, r0
 800a730:	f7ff ffec 	bl	800a70c <__sinit_lock_acquire>
 800a734:	69a3      	ldr	r3, [r4, #24]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <__sinit+0x14>
 800a73a:	f7ff ffef 	bl	800a71c <__sinit_lock_release>
 800a73e:	bd13      	pop	{r0, r1, r4, pc}
 800a740:	64a3      	str	r3, [r4, #72]	; 0x48
 800a742:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a744:	6523      	str	r3, [r4, #80]	; 0x50
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <__sinit+0x68>)
 800a748:	4a13      	ldr	r2, [pc, #76]	; (800a798 <__sinit+0x6c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	42a3      	cmp	r3, r4
 800a752:	d101      	bne.n	800a758 <__sinit+0x2c>
 800a754:	2301      	movs	r3, #1
 800a756:	61a3      	str	r3, [r4, #24]
 800a758:	0020      	movs	r0, r4
 800a75a:	f000 f81f 	bl	800a79c <__sfp>
 800a75e:	6060      	str	r0, [r4, #4]
 800a760:	0020      	movs	r0, r4
 800a762:	f000 f81b 	bl	800a79c <__sfp>
 800a766:	60a0      	str	r0, [r4, #8]
 800a768:	0020      	movs	r0, r4
 800a76a:	f000 f817 	bl	800a79c <__sfp>
 800a76e:	2200      	movs	r2, #0
 800a770:	2104      	movs	r1, #4
 800a772:	60e0      	str	r0, [r4, #12]
 800a774:	6860      	ldr	r0, [r4, #4]
 800a776:	f7ff ff77 	bl	800a668 <std>
 800a77a:	2201      	movs	r2, #1
 800a77c:	2109      	movs	r1, #9
 800a77e:	68a0      	ldr	r0, [r4, #8]
 800a780:	f7ff ff72 	bl	800a668 <std>
 800a784:	2202      	movs	r2, #2
 800a786:	2112      	movs	r1, #18
 800a788:	68e0      	ldr	r0, [r4, #12]
 800a78a:	f7ff ff6d 	bl	800a668 <std>
 800a78e:	2301      	movs	r3, #1
 800a790:	61a3      	str	r3, [r4, #24]
 800a792:	e7d2      	b.n	800a73a <__sinit+0xe>
 800a794:	0800ad30 	.word	0x0800ad30
 800a798:	0800a6b1 	.word	0x0800a6b1

0800a79c <__sfp>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	0007      	movs	r7, r0
 800a7a0:	f7ff ffa4 	bl	800a6ec <__sfp_lock_acquire>
 800a7a4:	4b1f      	ldr	r3, [pc, #124]	; (800a824 <__sfp+0x88>)
 800a7a6:	681e      	ldr	r6, [r3, #0]
 800a7a8:	69b3      	ldr	r3, [r6, #24]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d102      	bne.n	800a7b4 <__sfp+0x18>
 800a7ae:	0030      	movs	r0, r6
 800a7b0:	f7ff ffbc 	bl	800a72c <__sinit>
 800a7b4:	3648      	adds	r6, #72	; 0x48
 800a7b6:	68b4      	ldr	r4, [r6, #8]
 800a7b8:	6873      	ldr	r3, [r6, #4]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	d504      	bpl.n	800a7c8 <__sfp+0x2c>
 800a7be:	6833      	ldr	r3, [r6, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d022      	beq.n	800a80a <__sfp+0x6e>
 800a7c4:	6836      	ldr	r6, [r6, #0]
 800a7c6:	e7f6      	b.n	800a7b6 <__sfp+0x1a>
 800a7c8:	220c      	movs	r2, #12
 800a7ca:	5ea5      	ldrsh	r5, [r4, r2]
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d11a      	bne.n	800a806 <__sfp+0x6a>
 800a7d0:	0020      	movs	r0, r4
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <__sfp+0x8c>)
 800a7d4:	3058      	adds	r0, #88	; 0x58
 800a7d6:	60e3      	str	r3, [r4, #12]
 800a7d8:	6665      	str	r5, [r4, #100]	; 0x64
 800a7da:	f000 f847 	bl	800a86c <__retarget_lock_init_recursive>
 800a7de:	f7ff ff8d 	bl	800a6fc <__sfp_lock_release>
 800a7e2:	0020      	movs	r0, r4
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	0029      	movs	r1, r5
 800a7e8:	6025      	str	r5, [r4, #0]
 800a7ea:	60a5      	str	r5, [r4, #8]
 800a7ec:	6065      	str	r5, [r4, #4]
 800a7ee:	6125      	str	r5, [r4, #16]
 800a7f0:	6165      	str	r5, [r4, #20]
 800a7f2:	61a5      	str	r5, [r4, #24]
 800a7f4:	305c      	adds	r0, #92	; 0x5c
 800a7f6:	f7fd fa65 	bl	8007cc4 <memset>
 800a7fa:	6365      	str	r5, [r4, #52]	; 0x34
 800a7fc:	63a5      	str	r5, [r4, #56]	; 0x38
 800a7fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800a800:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a802:	0020      	movs	r0, r4
 800a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a806:	3468      	adds	r4, #104	; 0x68
 800a808:	e7d7      	b.n	800a7ba <__sfp+0x1e>
 800a80a:	2104      	movs	r1, #4
 800a80c:	0038      	movs	r0, r7
 800a80e:	f7ff ff57 	bl	800a6c0 <__sfmoreglue>
 800a812:	1e04      	subs	r4, r0, #0
 800a814:	6030      	str	r0, [r6, #0]
 800a816:	d1d5      	bne.n	800a7c4 <__sfp+0x28>
 800a818:	f7ff ff70 	bl	800a6fc <__sfp_lock_release>
 800a81c:	230c      	movs	r3, #12
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	e7ef      	b.n	800a802 <__sfp+0x66>
 800a822:	46c0      	nop			; (mov r8, r8)
 800a824:	0800ad30 	.word	0x0800ad30
 800a828:	ffff0001 	.word	0xffff0001

0800a82c <_fwalk_reent>:
 800a82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a82e:	0004      	movs	r4, r0
 800a830:	0006      	movs	r6, r0
 800a832:	2700      	movs	r7, #0
 800a834:	9101      	str	r1, [sp, #4]
 800a836:	3448      	adds	r4, #72	; 0x48
 800a838:	6863      	ldr	r3, [r4, #4]
 800a83a:	68a5      	ldr	r5, [r4, #8]
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	d504      	bpl.n	800a850 <_fwalk_reent+0x24>
 800a846:	6824      	ldr	r4, [r4, #0]
 800a848:	2c00      	cmp	r4, #0
 800a84a:	d1f5      	bne.n	800a838 <_fwalk_reent+0xc>
 800a84c:	0038      	movs	r0, r7
 800a84e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a850:	89ab      	ldrh	r3, [r5, #12]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d908      	bls.n	800a868 <_fwalk_reent+0x3c>
 800a856:	220e      	movs	r2, #14
 800a858:	5eab      	ldrsh	r3, [r5, r2]
 800a85a:	3301      	adds	r3, #1
 800a85c:	d004      	beq.n	800a868 <_fwalk_reent+0x3c>
 800a85e:	0029      	movs	r1, r5
 800a860:	0030      	movs	r0, r6
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	4798      	blx	r3
 800a866:	4307      	orrs	r7, r0
 800a868:	3568      	adds	r5, #104	; 0x68
 800a86a:	e7e8      	b.n	800a83e <_fwalk_reent+0x12>

0800a86c <__retarget_lock_init_recursive>:
 800a86c:	4770      	bx	lr

0800a86e <__retarget_lock_acquire_recursive>:
 800a86e:	4770      	bx	lr

0800a870 <__retarget_lock_release_recursive>:
 800a870:	4770      	bx	lr
	...

0800a874 <__swhatbuf_r>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	000e      	movs	r6, r1
 800a878:	001d      	movs	r5, r3
 800a87a:	230e      	movs	r3, #14
 800a87c:	5ec9      	ldrsh	r1, [r1, r3]
 800a87e:	0014      	movs	r4, r2
 800a880:	b096      	sub	sp, #88	; 0x58
 800a882:	2900      	cmp	r1, #0
 800a884:	da07      	bge.n	800a896 <__swhatbuf_r+0x22>
 800a886:	2300      	movs	r3, #0
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	89b3      	ldrh	r3, [r6, #12]
 800a88c:	061b      	lsls	r3, r3, #24
 800a88e:	d411      	bmi.n	800a8b4 <__swhatbuf_r+0x40>
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	e00f      	b.n	800a8b6 <__swhatbuf_r+0x42>
 800a896:	466a      	mov	r2, sp
 800a898:	f000 f91c 	bl	800aad4 <_fstat_r>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dbf2      	blt.n	800a886 <__swhatbuf_r+0x12>
 800a8a0:	23f0      	movs	r3, #240	; 0xf0
 800a8a2:	9901      	ldr	r1, [sp, #4]
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	4019      	ands	r1, r3
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <__swhatbuf_r+0x4c>)
 800a8aa:	18c9      	adds	r1, r1, r3
 800a8ac:	424b      	negs	r3, r1
 800a8ae:	4159      	adcs	r1, r3
 800a8b0:	6029      	str	r1, [r5, #0]
 800a8b2:	e7ed      	b.n	800a890 <__swhatbuf_r+0x1c>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	b016      	add	sp, #88	; 0x58
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	ffffe000 	.word	0xffffe000

0800a8c4 <__smakebuf_r>:
 800a8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c6:	2602      	movs	r6, #2
 800a8c8:	898b      	ldrh	r3, [r1, #12]
 800a8ca:	0005      	movs	r5, r0
 800a8cc:	000c      	movs	r4, r1
 800a8ce:	4233      	tst	r3, r6
 800a8d0:	d006      	beq.n	800a8e0 <__smakebuf_r+0x1c>
 800a8d2:	0023      	movs	r3, r4
 800a8d4:	3347      	adds	r3, #71	; 0x47
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	2301      	movs	r3, #1
 800a8dc:	6163      	str	r3, [r4, #20]
 800a8de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a8e0:	466a      	mov	r2, sp
 800a8e2:	ab01      	add	r3, sp, #4
 800a8e4:	f7ff ffc6 	bl	800a874 <__swhatbuf_r>
 800a8e8:	9900      	ldr	r1, [sp, #0]
 800a8ea:	0007      	movs	r7, r0
 800a8ec:	0028      	movs	r0, r5
 800a8ee:	f7ff f94d 	bl	8009b8c <_malloc_r>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d108      	bne.n	800a908 <__smakebuf_r+0x44>
 800a8f6:	220c      	movs	r2, #12
 800a8f8:	5ea3      	ldrsh	r3, [r4, r2]
 800a8fa:	059a      	lsls	r2, r3, #22
 800a8fc:	d4ef      	bmi.n	800a8de <__smakebuf_r+0x1a>
 800a8fe:	2203      	movs	r2, #3
 800a900:	4393      	bics	r3, r2
 800a902:	431e      	orrs	r6, r3
 800a904:	81a6      	strh	r6, [r4, #12]
 800a906:	e7e4      	b.n	800a8d2 <__smakebuf_r+0xe>
 800a908:	4b0f      	ldr	r3, [pc, #60]	; (800a948 <__smakebuf_r+0x84>)
 800a90a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	89a2      	ldrh	r2, [r4, #12]
 800a910:	6020      	str	r0, [r4, #0]
 800a912:	4313      	orrs	r3, r2
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	9b00      	ldr	r3, [sp, #0]
 800a918:	6120      	str	r0, [r4, #16]
 800a91a:	6163      	str	r3, [r4, #20]
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <__smakebuf_r+0x7a>
 800a922:	0028      	movs	r0, r5
 800a924:	230e      	movs	r3, #14
 800a926:	5ee1      	ldrsh	r1, [r4, r3]
 800a928:	f000 f8e6 	bl	800aaf8 <_isatty_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d006      	beq.n	800a93e <__smakebuf_r+0x7a>
 800a930:	2203      	movs	r2, #3
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	4393      	bics	r3, r2
 800a936:	001a      	movs	r2, r3
 800a938:	2301      	movs	r3, #1
 800a93a:	4313      	orrs	r3, r2
 800a93c:	81a3      	strh	r3, [r4, #12]
 800a93e:	89a0      	ldrh	r0, [r4, #12]
 800a940:	4307      	orrs	r7, r0
 800a942:	81a7      	strh	r7, [r4, #12]
 800a944:	e7cb      	b.n	800a8de <__smakebuf_r+0x1a>
 800a946:	46c0      	nop			; (mov r8, r8)
 800a948:	0800a6b1 	.word	0x0800a6b1

0800a94c <_malloc_usable_size_r>:
 800a94c:	1f0b      	subs	r3, r1, #4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	1f18      	subs	r0, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	da01      	bge.n	800a95a <_malloc_usable_size_r+0xe>
 800a956:	580b      	ldr	r3, [r1, r0]
 800a958:	18c0      	adds	r0, r0, r3
 800a95a:	4770      	bx	lr

0800a95c <_raise_r>:
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	0004      	movs	r4, r0
 800a960:	000d      	movs	r5, r1
 800a962:	291f      	cmp	r1, #31
 800a964:	d904      	bls.n	800a970 <_raise_r+0x14>
 800a966:	2316      	movs	r3, #22
 800a968:	6003      	str	r3, [r0, #0]
 800a96a:	2001      	movs	r0, #1
 800a96c:	4240      	negs	r0, r0
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <_raise_r+0x24>
 800a976:	008a      	lsls	r2, r1, #2
 800a978:	189b      	adds	r3, r3, r2
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	d108      	bne.n	800a992 <_raise_r+0x36>
 800a980:	0020      	movs	r0, r4
 800a982:	f000 f831 	bl	800a9e8 <_getpid_r>
 800a986:	002a      	movs	r2, r5
 800a988:	0001      	movs	r1, r0
 800a98a:	0020      	movs	r0, r4
 800a98c:	f000 f81a 	bl	800a9c4 <_kill_r>
 800a990:	e7ed      	b.n	800a96e <_raise_r+0x12>
 800a992:	2000      	movs	r0, #0
 800a994:	2a01      	cmp	r2, #1
 800a996:	d0ea      	beq.n	800a96e <_raise_r+0x12>
 800a998:	1c51      	adds	r1, r2, #1
 800a99a:	d103      	bne.n	800a9a4 <_raise_r+0x48>
 800a99c:	2316      	movs	r3, #22
 800a99e:	3001      	adds	r0, #1
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	e7e4      	b.n	800a96e <_raise_r+0x12>
 800a9a4:	2400      	movs	r4, #0
 800a9a6:	0028      	movs	r0, r5
 800a9a8:	601c      	str	r4, [r3, #0]
 800a9aa:	4790      	blx	r2
 800a9ac:	0020      	movs	r0, r4
 800a9ae:	e7de      	b.n	800a96e <_raise_r+0x12>

0800a9b0 <raise>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	4b03      	ldr	r3, [pc, #12]	; (800a9c0 <raise+0x10>)
 800a9b4:	0001      	movs	r1, r0
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	f7ff ffd0 	bl	800a95c <_raise_r>
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	2000000c 	.word	0x2000000c

0800a9c4 <_kill_r>:
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	b570      	push	{r4, r5, r6, lr}
 800a9c8:	4d06      	ldr	r5, [pc, #24]	; (800a9e4 <_kill_r+0x20>)
 800a9ca:	0004      	movs	r4, r0
 800a9cc:	0008      	movs	r0, r1
 800a9ce:	0011      	movs	r1, r2
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f7f8 fc51 	bl	8003278 <_kill>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d103      	bne.n	800a9e2 <_kill_r+0x1e>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d000      	beq.n	800a9e2 <_kill_r+0x1e>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	200003ec 	.word	0x200003ec

0800a9e8 <_getpid_r>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	f7f8 fc3f 	bl	800326c <_getpid>
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <__sread>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	000c      	movs	r4, r1
 800a9f4:	250e      	movs	r5, #14
 800a9f6:	5f49      	ldrsh	r1, [r1, r5]
 800a9f8:	f000 f8a4 	bl	800ab44 <_read_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	db03      	blt.n	800aa08 <__sread+0x18>
 800aa00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aa02:	181b      	adds	r3, r3, r0
 800aa04:	6563      	str	r3, [r4, #84]	; 0x54
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	4a02      	ldr	r2, [pc, #8]	; (800aa14 <__sread+0x24>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	e7f9      	b.n	800aa06 <__sread+0x16>
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	ffffefff 	.word	0xffffefff

0800aa18 <__swrite>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	001f      	movs	r7, r3
 800aa1c:	898b      	ldrh	r3, [r1, #12]
 800aa1e:	0005      	movs	r5, r0
 800aa20:	000c      	movs	r4, r1
 800aa22:	0016      	movs	r6, r2
 800aa24:	05db      	lsls	r3, r3, #23
 800aa26:	d505      	bpl.n	800aa34 <__swrite+0x1c>
 800aa28:	230e      	movs	r3, #14
 800aa2a:	5ec9      	ldrsh	r1, [r1, r3]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2302      	movs	r3, #2
 800aa30:	f000 f874 	bl	800ab1c <_lseek_r>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	4a05      	ldr	r2, [pc, #20]	; (800aa4c <__swrite+0x34>)
 800aa38:	0028      	movs	r0, r5
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	81a3      	strh	r3, [r4, #12]
 800aa3e:	0032      	movs	r2, r6
 800aa40:	230e      	movs	r3, #14
 800aa42:	5ee1      	ldrsh	r1, [r4, r3]
 800aa44:	003b      	movs	r3, r7
 800aa46:	f000 f81f 	bl	800aa88 <_write_r>
 800aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4c:	ffffefff 	.word	0xffffefff

0800aa50 <__sseek>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	000c      	movs	r4, r1
 800aa54:	250e      	movs	r5, #14
 800aa56:	5f49      	ldrsh	r1, [r1, r5]
 800aa58:	f000 f860 	bl	800ab1c <_lseek_r>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	1c42      	adds	r2, r0, #1
 800aa60:	d103      	bne.n	800aa6a <__sseek+0x1a>
 800aa62:	4a05      	ldr	r2, [pc, #20]	; (800aa78 <__sseek+0x28>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	2280      	movs	r2, #128	; 0x80
 800aa6c:	0152      	lsls	r2, r2, #5
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	6560      	str	r0, [r4, #84]	; 0x54
 800aa74:	e7f8      	b.n	800aa68 <__sseek+0x18>
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	ffffefff 	.word	0xffffefff

0800aa7c <__sclose>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	230e      	movs	r3, #14
 800aa80:	5ec9      	ldrsh	r1, [r1, r3]
 800aa82:	f000 f815 	bl	800aab0 <_close_r>
 800aa86:	bd10      	pop	{r4, pc}

0800aa88 <_write_r>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	0004      	movs	r4, r0
 800aa8c:	0008      	movs	r0, r1
 800aa8e:	0011      	movs	r1, r2
 800aa90:	001a      	movs	r2, r3
 800aa92:	2300      	movs	r3, #0
 800aa94:	4d05      	ldr	r5, [pc, #20]	; (800aaac <_write_r+0x24>)
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f8 fc27 	bl	80032ea <_write>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d103      	bne.n	800aaa8 <_write_r+0x20>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d000      	beq.n	800aaa8 <_write_r+0x20>
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	200003ec 	.word	0x200003ec

0800aab0 <_close_r>:
 800aab0:	2300      	movs	r3, #0
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	4d06      	ldr	r5, [pc, #24]	; (800aad0 <_close_r+0x20>)
 800aab6:	0004      	movs	r4, r0
 800aab8:	0008      	movs	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f8 fc31 	bl	8003322 <_close>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d103      	bne.n	800aacc <_close_r+0x1c>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d000      	beq.n	800aacc <_close_r+0x1c>
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	200003ec 	.word	0x200003ec

0800aad4 <_fstat_r>:
 800aad4:	2300      	movs	r3, #0
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	4d06      	ldr	r5, [pc, #24]	; (800aaf4 <_fstat_r+0x20>)
 800aada:	0004      	movs	r4, r0
 800aadc:	0008      	movs	r0, r1
 800aade:	0011      	movs	r1, r2
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f7f8 fc28 	bl	8003336 <_fstat>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d103      	bne.n	800aaf2 <_fstat_r+0x1e>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d000      	beq.n	800aaf2 <_fstat_r+0x1e>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	200003ec 	.word	0x200003ec

0800aaf8 <_isatty_r>:
 800aaf8:	2300      	movs	r3, #0
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_isatty_r+0x20>)
 800aafe:	0004      	movs	r4, r0
 800ab00:	0008      	movs	r0, r1
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	f7f8 fc25 	bl	8003352 <_isatty>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d103      	bne.n	800ab14 <_isatty_r+0x1c>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d000      	beq.n	800ab14 <_isatty_r+0x1c>
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	200003ec 	.word	0x200003ec

0800ab1c <_lseek_r>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	0004      	movs	r4, r0
 800ab20:	0008      	movs	r0, r1
 800ab22:	0011      	movs	r1, r2
 800ab24:	001a      	movs	r2, r3
 800ab26:	2300      	movs	r3, #0
 800ab28:	4d05      	ldr	r5, [pc, #20]	; (800ab40 <_lseek_r+0x24>)
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f8 fc1a 	bl	8003364 <_lseek>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d103      	bne.n	800ab3c <_lseek_r+0x20>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d000      	beq.n	800ab3c <_lseek_r+0x20>
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	200003ec 	.word	0x200003ec

0800ab44 <_read_r>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	0004      	movs	r4, r0
 800ab48:	0008      	movs	r0, r1
 800ab4a:	0011      	movs	r1, r2
 800ab4c:	001a      	movs	r2, r3
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4d05      	ldr	r5, [pc, #20]	; (800ab68 <_read_r+0x24>)
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f8 fbac 	bl	80032b0 <_read>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d103      	bne.n	800ab64 <_read_r+0x20>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d000      	beq.n	800ab64 <_read_r+0x20>
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	200003ec 	.word	0x200003ec

0800ab6c <_init>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr

0800ab78 <_fini>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr
