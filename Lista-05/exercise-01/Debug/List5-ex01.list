
List5-ex01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004758  08004758  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800476c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800476c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d154  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c25  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5df  00000000  00000000  0002ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba24  00000000  00000000  0004a567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abc72  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101bfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  00101c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080046b0 	.word	0x080046b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080046b0 	.word	0x080046b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	flagRx = 1;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_UART_RxCpltCallback+0x38>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t));
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <HAL_UART_RxCpltCallback+0x3c>)
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_UART_RxCpltCallback+0x40>)
 800062e:	2201      	movs	r2, #1
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fe45 	bl	80022c0 <HAL_UART_Receive_IT>
	data = temp;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_UART_RxCpltCallback+0x3c>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_UART_RxCpltCallback+0x44>)
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, &data, 1); //sizeof(uint8_t) = 1
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <HAL_UART_RxCpltCallback+0x44>)
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_UART_RxCpltCallback+0x40>)
 8000642:	2201      	movs	r2, #1
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fd7f 	bl	8002148 <HAL_UART_Transmit_IT>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	20000029 	.word	0x20000029
 8000658:	20000028 	.word	0x20000028
 800065c:	2000002c 	.word	0x2000002c
 8000660:	2000002a 	.word	0x2000002a

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 f9d2 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f814 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8be 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f86e 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  flagRx = 0;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <main+0x28>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t));
 800067e:	4904      	ldr	r1, [pc, #16]	; (8000690 <main+0x2c>)
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <main+0x30>)
 8000682:	2201      	movs	r2, #1
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fe1b 	bl	80022c0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x26>
 800068c:	20000029 	.word	0x20000029
 8000690:	20000028 	.word	0x20000028
 8000694:	2000002c 	.word	0x2000002c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b095      	sub	sp, #84	; 0x54
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	233c      	movs	r3, #60	; 0x3c
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f003 fff9 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f003 fff2 	bl	80046a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fd53 	bl	800116c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	0021      	movs	r1, r4
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2202      	movs	r2, #2
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2208      	movs	r2, #8
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0292      	lsls	r2, r2, #10
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0492      	lsls	r2, r2, #18
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0592      	lsls	r2, r2, #22
 8000710:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	187b      	adds	r3, r7, r1
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fd75 	bl	8001204 <HAL_RCC_OscConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800071e:	f000 f88d 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2202      	movs	r2, #2
 800072c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2102      	movs	r1, #2
 800073e:	0018      	movs	r0, r3
 8000740:	f001 f8c6 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000748:	f000 f878 	bl	800083c <Error_Handler>
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b015      	add	sp, #84	; 0x54
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <MX_USART2_UART_Init+0x98>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000760:	22e1      	movs	r2, #225	; 0xe1
 8000762:	0252      	lsls	r2, r2, #9
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fc7c 	bl	800209c <HAL_UART_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f848 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 fe71 	bl	8004498 <HAL_UARTEx_SetTxFifoThreshold>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 f83f 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f003 fea8 	bl	8004518 <HAL_UARTEx_SetRxFifoThreshold>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f836 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 fe26 	bl	8004424 <HAL_UARTEx_DisableFifoMode>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f82e 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	0018      	movs	r0, r3
 80007fa:	2314      	movs	r3, #20
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f003 ff4e 	bl	80046a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_GPIO_Init+0x48>)
 8000806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_GPIO_Init+0x48>)
 800080a:	2101      	movs	r1, #1
 800080c:	430a      	orrs	r2, r1
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0x48>)
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	2201      	movs	r2, #1
 8000816:	4013      	ands	r3, r2
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */


  /*Configure GPIO pin : LD4_Pin */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]


}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b006      	add	sp, #24
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40021000 	.word	0x40021000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	430a      	orrs	r2, r1
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_MspInit+0x4c>)
 8000876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	055b      	lsls	r3, r3, #21
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000882:	23c0      	movs	r3, #192	; 0xc0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f948 	bl	8000b1c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b09d      	sub	sp, #116	; 0x74
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	235c      	movs	r3, #92	; 0x5c
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f003 fef8 	bl	80046a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	2410      	movs	r4, #16
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	234c      	movs	r3, #76	; 0x4c
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f003 fef0 	bl	80046a0 <memset>
  if(huart->Instance==USART2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a26      	ldr	r2, [pc, #152]	; (8000960 <HAL_UART_MspInit+0xc8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d146      	bne.n	8000958 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2202      	movs	r2, #2
 80008ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 f9a3 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008e2:	f7ff ffab 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_UART_MspInit+0xcc>)
 80008e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_UART_MspInit+0xcc>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_UART_MspInit+0xcc>)
 80008f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_UART_MspInit+0xcc>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_UART_MspInit+0xcc>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_UART_MspInit+0xcc>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091a:	215c      	movs	r1, #92	; 0x5c
 800091c:	187b      	adds	r3, r7, r1
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2202      	movs	r2, #2
 8000926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	187a      	adds	r2, r7, r1
 800093c:	23a0      	movs	r3, #160	; 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 faa6 	bl	8000e94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	201c      	movs	r0, #28
 800094e:	f000 f9a7 	bl	8000ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000952:	201c      	movs	r0, #28
 8000954:	f000 f9b9 	bl	8000cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b01d      	add	sp, #116	; 0x74
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8aa 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <USART2_LPUART2_IRQHandler+0x14>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fcfe 	bl	80023a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	2000002c 	.word	0x2000002c

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c0:	f7ff fff6 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ea:	f003 fe35 	bl	8004658 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ee:	f7ff fe39 	bl	8000664 <main>

080009f2 <LoopForever>:

LoopForever:
  b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	200000c0 	.word	0x200000c0

08000a0c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_COMP_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x3c>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Init+0x3c>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0049      	lsls	r1, r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 f810 	bl	8000a50 <HAL_InitTick>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d003      	beq.n	8000a3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff ff04 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_InitTick+0x88>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d02b      	beq.n	8000ac0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0x8c>)
 8000a6a:	681c      	ldr	r4, [r3, #0]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_InitTick+0x88>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	0019      	movs	r1, r3
 8000a72:	23fa      	movs	r3, #250	; 0xfa
 8000a74:	0098      	lsls	r0, r3, #2
 8000a76:	f7ff fb45 	bl	8000104 <__udivsi3>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0020      	movs	r0, r4
 8000a80:	f7ff fb40 	bl	8000104 <__udivsi3>
 8000a84:	0003      	movs	r3, r0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f92f 	bl	8000cea <HAL_SYSTICK_Config>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d112      	bne.n	8000ab6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d80a      	bhi.n	8000aac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f8fe 	bl	8000ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_InitTick+0x90>)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e00d      	b.n	8000ac8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e008      	b.n	8000ac8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e003      	b.n	8000ac8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b005      	add	sp, #20
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200000bc 	.word	0x200000bc

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	200000bc 	.word	0x200000bc

08000b1c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40010000 	.word	0x40010000
 8000b44:	fffff9ff 	.word	0xfffff9ff

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5a:	d809      	bhi.n	8000b70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	001a      	movs	r2, r3
 8000b62:	231f      	movs	r3, #31
 8000b64:	401a      	ands	r2, r3
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_EnableIRQ+0x30>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	000a      	movs	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	0002      	movs	r2, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b90:	d828      	bhi.n	8000be4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b92:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <__NVIC_SetPriority+0xd4>)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	33c0      	adds	r3, #192	; 0xc0
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	589b      	ldr	r3, [r3, r2]
 8000ba2:	1dfa      	adds	r2, r7, #7
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	2203      	movs	r2, #3
 8000baa:	400a      	ands	r2, r1
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2303      	movs	r3, #3
 8000bca:	4003      	ands	r3, r0
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <__NVIC_SetPriority+0xd4>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000be2:	e031      	b.n	8000c48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <__NVIC_SetPriority+0xd8>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0019      	movs	r1, r3
 8000bec:	230f      	movs	r3, #15
 8000bee:	400b      	ands	r3, r1
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3306      	adds	r3, #6
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	1dfa      	adds	r2, r7, #7
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	0011      	movs	r1, r2
 8000c04:	2203      	movs	r2, #3
 8000c06:	400a      	ands	r2, r1
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	21ff      	movs	r1, #255	; 0xff
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	2303      	movs	r3, #3
 8000c26:	4003      	ands	r3, r0
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <__NVIC_SetPriority+0xd8>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	001c      	movs	r4, r3
 8000c34:	230f      	movs	r3, #15
 8000c36:	4023      	ands	r3, r4
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	3306      	adds	r3, #6
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	18c3      	adds	r3, r0, r3
 8000c44:	3304      	adds	r3, #4
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b003      	add	sp, #12
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	045b      	lsls	r3, r3, #17
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d301      	bcc.n	8000c70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e010      	b.n	8000c92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SysTick_Config+0x44>)
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	3a01      	subs	r2, #1
 8000c76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff ff7c 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_Config+0x44>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SysTick_Config+0x44>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	210f      	movs	r1, #15
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	1c02      	adds	r2, r0, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff5d 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff33 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ffaf 	bl	8000c58 <SysTick_Config>
 8000cfa:	0003      	movs	r3, r0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e04f      	b.n	8000db6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2225      	movs	r2, #37	; 0x25
 8000d1a:	5c9b      	ldrb	r3, [r3, r2]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d008      	beq.n	8000d34 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2204      	movs	r2, #4
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e040      	b.n	8000db6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	210e      	movs	r1, #14
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	491c      	ldr	r1, [pc, #112]	; (8000dc0 <HAL_DMA_Abort+0xbc>)
 8000d50:	400a      	ands	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	438a      	bics	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	221c      	movs	r2, #28
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	2101      	movs	r1, #1
 8000d72:	4091      	lsls	r1, r2
 8000d74:	000a      	movs	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00c      	beq.n	8000da4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <HAL_DMA_Abort+0xbc>)
 8000d96:	400a      	ands	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000da2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2225      	movs	r2, #37	; 0x25
 8000da8:	2101      	movs	r1, #1
 8000daa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	2100      	movs	r1, #0
 8000db2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	fffffeff 	.word	0xfffffeff

08000dc4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	210f      	movs	r1, #15
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d006      	beq.n	8000dee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e048      	b.n	8000e80 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	210e      	movs	r1, #14
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	438a      	bics	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e18:	491d      	ldr	r1, [pc, #116]	; (8000e90 <HAL_DMA_Abort_IT+0xcc>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	221c      	movs	r2, #28
 8000e24:	401a      	ands	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00c      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4e:	4910      	ldr	r1, [pc, #64]	; (8000e90 <HAL_DMA_Abort_IT+0xcc>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2225      	movs	r2, #37	; 0x25
 8000e62:	2101      	movs	r1, #1
 8000e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2224      	movs	r2, #36	; 0x24
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	4798      	blx	r3
    }
  }
  return status;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	fffffeff 	.word	0xfffffeff

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e14d      	b.n	8001140 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <HAL_GPIO_Init+0x28>
 8000eba:	e13e      	b.n	800113a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <HAL_GPIO_Init+0x40>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d017      	beq.n	8000f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d123      	bne.n	8000fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	58d3      	ldr	r3, [r2, r3]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2207      	movs	r2, #7
 8000f90:	4013      	ands	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2107      	movs	r1, #7
 8000faa:	400b      	ands	r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	6939      	ldr	r1, [r7, #16]
 8000fc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	23c0      	movs	r3, #192	; 0xc0
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	4013      	ands	r3, r2
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x174>
 8001006:	e098      	b.n	800113a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3318      	adds	r3, #24
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	589b      	ldr	r3, [r3, r2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	220f      	movs	r2, #15
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	429a      	cmp	r2, r3
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x1d6>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2c8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1d2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2cc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1ce>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1ca>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_GPIO_Init+0x2d4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1c6>
 8001056:	2304      	movs	r3, #4
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x1d8>
 800105a:	2305      	movs	r3, #5
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1d8>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1d8>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1d8>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1d8>
 800106a:	2300      	movs	r3, #0
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	2103      	movs	r1, #3
 8001070:	400a      	ands	r2, r1
 8001072:	00d2      	lsls	r2, r2, #3
 8001074:	4093      	lsls	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800107c:	4936      	ldr	r1, [pc, #216]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3318      	adds	r3, #24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800108a:	4a33      	ldr	r2, [pc, #204]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	58d3      	ldr	r3, [r2, r3]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43da      	mvns	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	025b      	lsls	r3, r3, #9
 80010a4:	4013      	ands	r3, r2
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b0:	4929      	ldr	r1, [pc, #164]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 80010ba:	2384      	movs	r3, #132	; 0x84
 80010bc:	58d3      	ldr	r3, [r2, r3]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	029b      	lsls	r3, r3, #10
 80010d2:	4013      	ands	r3, r2
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010de:	491e      	ldr	r1, [pc, #120]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 80010e0:	2284      	movs	r2, #132	; 0x84
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	035b      	lsls	r3, r3, #13
 80010fe:	4013      	ands	r3, r2
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	039b      	lsls	r3, r3, #14
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	40da      	lsrs	r2, r3
 8001148:	1e13      	subs	r3, r2, #0
 800114a:	d000      	beq.n	800114e <HAL_GPIO_Init+0x2ba>
 800114c:	e6aa      	b.n	8000ea4 <HAL_GPIO_Init+0x10>
  }
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021800 	.word	0x40021800
 800115c:	50000400 	.word	0x50000400
 8001160:	50000800 	.word	0x50000800
 8001164:	50000c00 	.word	0x50000c00
 8001168:	50001000 	.word	0x50001000

0800116c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800117a:	4013      	ands	r3, r2
 800117c:	0019      	movs	r1, r3
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	430a      	orrs	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	429a      	cmp	r2, r3
 800118e:	d11f      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	0013      	movs	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	189b      	adds	r3, r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4912      	ldr	r1, [pc, #72]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f7fe ffb0 	bl	8000104 <__udivsi3>
 80011a4:	0003      	movs	r3, r0
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011aa:	e008      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e001      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e009      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	401a      	ands	r2, r3
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d0ed      	beq.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40007000 	.word	0x40007000
 80011e0:	fffff9ff 	.word	0xfffff9ff
 80011e4:	20000000 	.word	0x20000000
 80011e8:	000f4240 	.word	0x000f4240

080011ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <LL_RCC_GetAPB1Prescaler+0x14>)
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	23e0      	movs	r3, #224	; 0xe0
 80011f6:	01db      	lsls	r3, r3, #7
 80011f8:	4013      	ands	r3, r2
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	f000 fb56 	bl	80018c4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	4013      	ands	r3, r2
 8001220:	d100      	bne.n	8001224 <HAL_RCC_OscConfig+0x20>
 8001222:	e07d      	b.n	8001320 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001224:	4bc3      	ldr	r3, [pc, #780]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2238      	movs	r2, #56	; 0x38
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800122e:	4bc1      	ldr	r3, [pc, #772]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x40>
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d002      	beq.n	800124a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4bba      	ldr	r3, [pc, #744]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	029b      	lsls	r3, r3, #10
 8001252:	4013      	ands	r3, r2
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x11a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d15f      	bne.n	800131e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	f000 fb30 	bl	80018c4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	429a      	cmp	r2, r3
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001270:	4bb0      	ldr	r3, [pc, #704]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4baf      	ldr	r3, [pc, #700]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0249      	lsls	r1, r1, #9
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e020      	b.n	80012c2 <HAL_RCC_OscConfig+0xbe>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	02db      	lsls	r3, r3, #11
 8001288:	429a      	cmp	r2, r3
 800128a:	d10e      	bne.n	80012aa <HAL_RCC_OscConfig+0xa6>
 800128c:	4ba9      	ldr	r3, [pc, #676]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4ba8      	ldr	r3, [pc, #672]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	02c9      	lsls	r1, r1, #11
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	4ba6      	ldr	r3, [pc, #664]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4ba5      	ldr	r3, [pc, #660]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0249      	lsls	r1, r1, #9
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0xbe>
 80012aa:	4ba2      	ldr	r3, [pc, #648]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4ba1      	ldr	r3, [pc, #644]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012b0:	49a1      	ldr	r1, [pc, #644]	; (8001538 <HAL_RCC_OscConfig+0x334>)
 80012b2:	400a      	ands	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	4b9f      	ldr	r3, [pc, #636]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012bc:	499f      	ldr	r1, [pc, #636]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80012be:	400a      	ands	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d014      	beq.n	80012f4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff fc1d 	bl	8000b08 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc18 	bl	8000b08 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e2ee      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	4b93      	ldr	r3, [pc, #588]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xd0>
 80012f2:	e015      	b.n	8001320 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc08 	bl	8000b08 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fe:	f7ff fc03 	bl	8000b08 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b64      	cmp	r3, #100	; 0x64
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e2d9      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0xfa>
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2202      	movs	r2, #2
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x128>
 800132a:	e099      	b.n	8001460 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132c:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2238      	movs	r2, #56	; 0x38
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001336:	4b7f      	ldr	r3, [pc, #508]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2203      	movs	r2, #3
 800133c:	4013      	ands	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x148>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d002      	beq.n	8001352 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d135      	bne.n	80013be <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001352:	4b78      	ldr	r3, [pc, #480]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4013      	ands	r3, r2
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x166>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e2ac      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b72      	ldr	r3, [pc, #456]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a74      	ldr	r2, [pc, #464]	; (8001540 <HAL_RCC_OscConfig+0x33c>)
 8001370:	4013      	ands	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	021a      	lsls	r2, r3, #8
 800137a:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d112      	bne.n	80013ac <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001386:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x340>)
 800138c:	4013      	ands	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800139a:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0adb      	lsrs	r3, r3, #11
 80013a0:	2207      	movs	r2, #7
 80013a2:	4013      	ands	r3, r2
 80013a4:	4a68      	ldr	r2, [pc, #416]	; (8001548 <HAL_RCC_OscConfig+0x344>)
 80013a6:	40da      	lsrs	r2, r3
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x348>)
 80013aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x34c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff fb4d 	bl	8000a50 <HAL_InitTick>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d051      	beq.n	800145e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e282      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5e      	ldr	r2, [pc, #376]	; (8001544 <HAL_RCC_OscConfig+0x340>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0049      	lsls	r1, r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb8e 	bl	8000b08 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fb89 	bl	8000b08 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e25f      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001404:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_RCC_OscConfig+0x33c>)
 8001416:	4013      	ands	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	021a      	lsls	r2, r3, #8
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	e01b      	b.n	8001460 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800142e:	4949      	ldr	r1, [pc, #292]	; (8001554 <HAL_RCC_OscConfig+0x350>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb68 	bl	8000b08 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fb63 	bl	8000b08 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e239      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4013      	ands	r3, r2
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x23a>
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2208      	movs	r2, #8
 8001466:	4013      	ands	r3, r2
 8001468:	d047      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2238      	movs	r2, #56	; 0x38
 8001470:	4013      	ands	r3, r2
 8001472:	2b18      	cmp	r3, #24
 8001474:	d10a      	bne.n	800148c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	2202      	movs	r2, #2
 800147c:	4013      	ands	r3, r2
 800147e:	d03c      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d138      	bne.n	80014fa <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e21b      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d019      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001496:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb32 	bl	8000b08 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fb2d 	bl	8000b08 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e203      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80014be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d0f1      	beq.n	80014aa <HAL_RCC_OscConfig+0x2a6>
 80014c6:	e018      	b.n	80014fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80014ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	438a      	bics	r2, r1
 80014d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb18 	bl	8000b08 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014de:	f7ff fb13 	bl	8000b08 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1e9      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f1      	bne.n	80014de <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2204      	movs	r2, #4
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x302>
 8001504:	e0c6      	b.n	8001694 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	231f      	movs	r3, #31
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2238      	movs	r2, #56	; 0x38
 8001514:	4013      	ands	r3, r2
 8001516:	2b20      	cmp	r3, #32
 8001518:	d11e      	bne.n	8001558 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x322>
 8001524:	e0b6      	b.n	8001694 <HAL_RCC_OscConfig+0x490>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d000      	beq.n	8001530 <HAL_RCC_OscConfig+0x32c>
 800152e:	e0b1      	b.n	8001694 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e1c7      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
 8001534:	40021000 	.word	0x40021000
 8001538:	fffeffff 	.word	0xfffeffff
 800153c:	fffbffff 	.word	0xfffbffff
 8001540:	ffff80ff 	.word	0xffff80ff
 8001544:	ffffc7ff 	.word	0xffffc7ff
 8001548:	00f42400 	.word	0x00f42400
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004
 8001554:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001558:	4bb8      	ldr	r3, [pc, #736]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800155a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4013      	ands	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x364>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x366>
 8001568:	2300      	movs	r3, #0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d011      	beq.n	8001592 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4bb3      	ldr	r3, [pc, #716]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001572:	4bb2      	ldr	r3, [pc, #712]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0549      	lsls	r1, r1, #21
 8001578:	430a      	orrs	r2, r1
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
 800157c:	4baf      	ldr	r3, [pc, #700]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800157e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	055b      	lsls	r3, r3, #21
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800158a:	231f      	movs	r3, #31
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	4bab      	ldr	r3, [pc, #684]	; (8001840 <HAL_RCC_OscConfig+0x63c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4013      	ands	r3, r2
 800159c:	d11a      	bne.n	80015d4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800159e:	4ba8      	ldr	r3, [pc, #672]	; (8001840 <HAL_RCC_OscConfig+0x63c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4ba7      	ldr	r3, [pc, #668]	; (8001840 <HAL_RCC_OscConfig+0x63c>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0049      	lsls	r1, r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015ac:	f7ff faac 	bl	8000b08 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff faa7 	bl	8000b08 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e17d      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c8:	4b9d      	ldr	r3, [pc, #628]	; (8001840 <HAL_RCC_OscConfig+0x63c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x3e6>
 80015dc:	4b97      	ldr	r3, [pc, #604]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80015de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x420>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x408>
 80015f2:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80015f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f6:	4b91      	ldr	r3, [pc, #580]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80015f8:	2104      	movs	r1, #4
 80015fa:	430a      	orrs	r2, r1
 80015fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fe:	4b8f      	ldr	r3, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001600:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001602:	4b8e      	ldr	r3, [pc, #568]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001604:	2101      	movs	r1, #1
 8001606:	430a      	orrs	r2, r1
 8001608:	65da      	str	r2, [r3, #92]	; 0x5c
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x420>
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800160e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001610:	4b8a      	ldr	r3, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001612:	2101      	movs	r1, #1
 8001614:	438a      	bics	r2, r1
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800161a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800161c:	4b87      	ldr	r3, [pc, #540]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800161e:	2104      	movs	r1, #4
 8001620:	438a      	bics	r2, r1
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d014      	beq.n	8001656 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fa6c 	bl	8000b08 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001634:	e009      	b.n	800164a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fa67 	bl	8000b08 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x640>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e13c      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164a:	4b7c      	ldr	r3, [pc, #496]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x432>
 8001654:	e013      	b.n	800167e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fa57 	bl	8000b08 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800165e:	e009      	b.n	8001674 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fa52 	bl	8000b08 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a76      	ldr	r2, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x640>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e127      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800167e:	231f      	movs	r3, #31
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001688:	4b6c      	ldr	r3, [pc, #432]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800168a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800168e:	496e      	ldr	r1, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x644>)
 8001690:	400a      	ands	r2, r1
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2220      	movs	r2, #32
 800169a:	4013      	ands	r3, r2
 800169c:	d039      	beq.n	8001712 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01b      	beq.n	80016de <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	03c9      	lsls	r1, r1, #15
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fa28 	bl	8000b08 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016be:	f7ff fa23 	bl	8000b08 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0f9      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016d0:	4b5a      	ldr	r3, [pc, #360]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x4ba>
 80016dc:	e019      	b.n	8001712 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016de:	4b57      	ldr	r3, [pc, #348]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80016e4:	4959      	ldr	r1, [pc, #356]	; (800184c <HAL_RCC_OscConfig+0x648>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fa0d 	bl	8000b08 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f4:	f7ff fa08 	bl	8000b08 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0de      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x518>
 800171a:	e0d2      	b.n	80018c2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2238      	movs	r2, #56	; 0x38
 8001722:	4013      	ands	r3, r2
 8001724:	2b10      	cmp	r3, #16
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x526>
 8001728:	e081      	b.n	800182e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d156      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001738:	4945      	ldr	r1, [pc, #276]	; (8001850 <HAL_RCC_OscConfig+0x64c>)
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff f9e3 	bl	8000b08 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff f9de 	bl	8000b08 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0b4      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	049b      	lsls	r3, r3, #18
 8001762:	4013      	ands	r3, r2
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001766:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_RCC_OscConfig+0x650>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	431a      	orrs	r2, r3
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001796:	430a      	orrs	r2, r1
 8001798:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <HAL_RCC_OscConfig+0x638>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0449      	lsls	r1, r1, #17
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	430a      	orrs	r2, r1
 80017b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff f9a7 	bl	8000b08 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff f9a2 	bl	8000b08 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e078      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x5bc>
 80017de:	e070      	b.n	80018c2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017e6:	491a      	ldr	r1, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x64c>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017f2:	2103      	movs	r1, #3
 80017f4:	438a      	bics	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x638>)
 80017fe:	4916      	ldr	r1, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x654>)
 8001800:	400a      	ands	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f980 	bl	8000b08 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f97b 	bl	8000b08 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e051      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x638>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	049b      	lsls	r3, r3, #18
 8001828:	4013      	ands	r3, r2
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x60a>
 800182c:	e049      	b.n	80018c2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e044      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
 8001844:	00001388 	.word	0x00001388
 8001848:	efffffff 	.word	0xefffffff
 800184c:	ffbfffff 	.word	0xffbfffff
 8001850:	feffffff 	.word	0xfeffffff
 8001854:	11c1808c 	.word	0x11c1808c
 8001858:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x6c8>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2203      	movs	r2, #3
 8001866:	401a      	ands	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	429a      	cmp	r2, r3
 800186e:	d126      	bne.n	80018be <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2270      	movs	r2, #112	; 0x70
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11f      	bne.n	80018be <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	23fe      	movs	r3, #254	; 0xfe
 8001882:	01db      	lsls	r3, r3, #7
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d116      	bne.n	80018be <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	23f8      	movs	r3, #248	; 0xf8
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d10e      	bne.n	80018be <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	23e0      	movs	r3, #224	; 0xe0
 80018a4:	051b      	lsls	r3, r3, #20
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	0f5b      	lsrs	r3, r3, #29
 80018b4:	075a      	lsls	r2, r3, #29
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b008      	add	sp, #32
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0e9      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2207      	movs	r2, #7
 80018ea:	4013      	ands	r3, r2
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d91e      	bls.n	8001930 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2207      	movs	r2, #7
 80018f8:	4393      	bics	r3, r2
 80018fa:	0019      	movs	r1, r3
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001904:	f7ff f900 	bl	8000b08 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f8fb 	bl	8000b08 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0ca      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2207      	movs	r2, #7
 8001928:	4013      	ands	r3, r2
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2202      	movs	r2, #2
 8001936:	4013      	ands	r3, r2
 8001938:	d015      	beq.n	8001966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d006      	beq.n	8001952 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001944:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	21e0      	movs	r1, #224	; 0xe0
 800194c:	01c9      	lsls	r1, r1, #7
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_RCC_ClockConfig+0x1fc>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	4013      	ands	r3, r2
 800196e:	d057      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	4013      	ands	r3, r2
 8001982:	d12b      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e097      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	049b      	lsls	r3, r3, #18
 8001998:	4013      	ands	r3, r2
 800199a:	d11f      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e08b      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d113      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e07f      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d106      	bne.n	80019ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e074      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e06d      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2207      	movs	r2, #7
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f88a 	bl	8000b08 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7ff f885 	bl	8000b08 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1ec      	bne.n	80019fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d21e      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f862 	bl	8000b08 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff f85d 	bl	8000b08 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e02c      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	4013      	ands	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_RCC_ClockConfig+0x200>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a8a:	f000 f829 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	0001      	movs	r1, r0
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	220f      	movs	r2, #15
 8001a98:	401a      	ands	r2, r3
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x204>)
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	58d3      	ldr	r3, [r2, r3]
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x208>)
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x20c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7fe ffcd 	bl	8000a50 <HAL_InitTick>
 8001ab6:	0003      	movs	r3, r0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	00001388 	.word	0x00001388
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffff0ff 	.word	0xfffff0ff
 8001ad0:	ffff8fff 	.word	0xffff8fff
 8001ad4:	080046c8 	.word	0x080046c8
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	4013      	ands	r3, r2
 8001aee:	d10f      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0adb      	lsrs	r3, r3, #11
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	2201      	movs	r2, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	4835      	ldr	r0, [pc, #212]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b06:	f7fe fafd 	bl	8000104 <__udivsi3>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e05d      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2238      	movs	r2, #56	; 0x38
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e054      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	; 0x38
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d138      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2203      	movs	r2, #3
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	2207      	movs	r2, #7
 8001b40:	4013      	ands	r3, r2
 8001b42:	3301      	adds	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d10d      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4824      	ldr	r0, [pc, #144]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b50:	f7fe fad8 	bl	8000104 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	227f      	movs	r2, #127	; 0x7f
 8001b60:	4013      	ands	r3, r2
 8001b62:	434b      	muls	r3, r1
 8001b64:	617b      	str	r3, [r7, #20]
        break;
 8001b66:	e00d      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b6c:	f7fe faca 	bl	8000104 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	227f      	movs	r2, #127	; 0x7f
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	434b      	muls	r3, r1
 8001b80:	617b      	str	r3, [r7, #20]
        break;
 8001b82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0f5b      	lsrs	r3, r3, #29
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	6978      	ldr	r0, [r7, #20]
 8001b96:	f7fe fab5 	bl	8000104 <__udivsi3>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2238      	movs	r2, #56	; 0x38
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d103      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2238      	movs	r2, #56	; 0x38
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b18      	cmp	r3, #24
 8001bbe:	d103      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bc0:	23fa      	movs	r3, #250	; 0xfa
 8001bc2:	01db      	lsls	r3, r3, #7
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e001      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bcc:	693b      	ldr	r3, [r7, #16]
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bfc:	f7ff fff2 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c00:	0004      	movs	r4, r0
 8001c02:	f7ff faf3 	bl	80011ec <LL_RCC_GetAPB1Prescaler>
 8001c06:	0003      	movs	r3, r0
 8001c08:	0b1a      	lsrs	r2, r3, #12
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	58d3      	ldr	r3, [r2, r3]
 8001c10:	221f      	movs	r2, #31
 8001c12:	4013      	ands	r3, r2
 8001c14:	40dc      	lsrs	r4, r3
 8001c16:	0023      	movs	r3, r4
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	08004708 	.word	0x08004708

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c2c:	2313      	movs	r3, #19
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c34:	2312      	movs	r3, #18
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c48:	e0ad      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2011      	movs	r0, #17
 8001c4c:	183b      	adds	r3, r7, r0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d110      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0049      	lsls	r1, r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe ff3b 	bl	8000b08 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7fe ff36 	bl	8000b08 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d904      	bls.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ca6:	2313      	movs	r3, #19
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2203      	movs	r2, #3
 8001cac:	701a      	strb	r2, [r3, #0]
        break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0ed      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cbc:	2313      	movs	r3, #19
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d15e      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d019      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d014      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d00:	491e      	ldr	r1, [pc, #120]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d016      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe fef8 	bl	8000b08 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1c:	e00c      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe fef3 	bl	8000b08 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d904      	bls.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d2e:	2313      	movs	r3, #19
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2203      	movs	r2, #3
 8001d34:	701a      	strb	r2, [r3, #0]
            break;
 8001d36:	e004      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d0ed      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d42:	2313      	movs	r3, #19
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d60:	e016      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d62:	2312      	movs	r3, #18
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2213      	movs	r2, #19
 8001d68:	18ba      	adds	r2, r7, r2
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
 8001d78:	fffffcff 	.word	0xfffffcff
 8001d7c:	fffeffff 	.word	0xfffeffff
 8001d80:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d84:	2312      	movs	r3, #18
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2213      	movs	r2, #19
 8001d8a:	18ba      	adds	r2, r7, r2
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d90:	2311      	movs	r3, #17
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4bb6      	ldr	r3, [pc, #728]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9e:	4bb5      	ldr	r3, [pc, #724]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da0:	49b5      	ldr	r1, [pc, #724]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db0:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	2203      	movs	r2, #3
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4bad      	ldr	r3, [pc, #692]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dce:	4ba9      	ldr	r3, [pc, #676]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4ba5      	ldr	r3, [pc, #660]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2204      	movs	r2, #4
 8001de8:	4013      	ands	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dec:	4ba1      	ldr	r3, [pc, #644]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	2230      	movs	r2, #48	; 0x30
 8001df2:	4393      	bics	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2210      	movs	r2, #16
 8001e06:	4013      	ands	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	4a9b      	ldr	r2, [pc, #620]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	4b96      	ldr	r3, [pc, #600]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	4013      	ands	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	4a94      	ldr	r2, [pc, #592]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e4a:	4b8a      	ldr	r3, [pc, #552]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	4a8d      	ldr	r2, [pc, #564]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e58:	4b86      	ldr	r3, [pc, #536]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e6a:	4b82      	ldr	r3, [pc, #520]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4a86      	ldr	r2, [pc, #536]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e78:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2220      	movs	r2, #32
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea6:	4b73      	ldr	r3, [pc, #460]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	4a79      	ldr	r2, [pc, #484]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	01db      	lsls	r3, r3, #7
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec6:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	0899      	lsrs	r1, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed2:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	05db      	lsls	r3, r3, #23
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0249      	lsls	r1, r1, #9
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	031b      	lsls	r3, r3, #12
 8001efa:	4013      	ands	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	4393      	bics	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	039b      	lsls	r3, r3, #14
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f1e:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	03db      	lsls	r3, r3, #15
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0449      	lsls	r1, r1, #17
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	03db      	lsls	r3, r3, #15
 8001f54:	4013      	ands	r3, r2
 8001f56:	d016      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	045b      	lsls	r3, r3, #17
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	0449      	lsls	r1, r1, #17
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d014      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	2203      	movs	r2, #3
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	0249      	lsls	r1, r1, #9
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d014      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	220c      	movs	r2, #12
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	0249      	lsls	r1, r1, #9
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	045b      	lsls	r3, r3, #17
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d016      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200e:	430a      	orrs	r2, r1
 8002010:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	429a      	cmp	r2, r3
 800201c:	d106      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0449      	lsls	r1, r1, #17
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	049b      	lsls	r3, r3, #18
 8002034:	4013      	ands	r3, r2
 8002036:	d016      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800203e:	4013      	ands	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002048:	430a      	orrs	r2, r1
 800204a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0449      	lsls	r1, r1, #17
 8002062:	430a      	orrs	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002066:	2312      	movs	r3, #18
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b006      	add	sp, #24
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	efffffff 	.word	0xefffffff
 800207c:	fffff3ff 	.word	0xfffff3ff
 8002080:	fffffcff 	.word	0xfffffcff
 8002084:	fff3ffff 	.word	0xfff3ffff
 8002088:	ffcfffff 	.word	0xffcfffff
 800208c:	ffffcfff 	.word	0xffffcfff
 8002090:	ffff3fff 	.word	0xffff3fff
 8002094:	ffbfffff 	.word	0xffbfffff
 8002098:	feffffff 	.word	0xfeffffff

0800209c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e046      	b.n	800213c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2284      	movs	r2, #132	; 0x84
 80020b2:	589b      	ldr	r3, [r3, r2]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7fe fbe8 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2284      	movs	r2, #132	; 0x84
 80020cc:	2124      	movs	r1, #36	; 0x24
 80020ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 fc92 	bl	8002a0c <UART_SetConfig>
 80020e8:	0003      	movs	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e024      	b.n	800213c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f001 f805 	bl	800310c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	490d      	ldr	r1, [pc, #52]	; (8002144 <HAL_UART_Init+0xa8>)
 800210e:	400a      	ands	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	212a      	movs	r1, #42	; 0x2a
 800211e:	438a      	bics	r2, r1
 8002120:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f001 f89d 	bl	8003274 <UART_CheckIdleState>
 800213a:	0003      	movs	r3, r0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	ffffb7ff 	.word	0xffffb7ff

08002148 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2284      	movs	r2, #132	; 0x84
 800215a:	589b      	ldr	r3, [r3, r2]
 800215c:	2b20      	cmp	r3, #32
 800215e:	d000      	beq.n	8002162 <HAL_UART_Transmit_IT+0x1a>
 8002160:	e0a0      	b.n	80022a4 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_UART_Transmit_IT+0x28>
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e098      	b.n	80022a6 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	429a      	cmp	r2, r3
 800217e:	d109      	bne.n	8002194 <HAL_UART_Transmit_IT+0x4c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2201      	movs	r2, #1
 800218c:	4013      	ands	r3, r2
 800218e:	d001      	beq.n	8002194 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e088      	b.n	80022a6 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_UART_Transmit_IT+0x5a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e081      	b.n	80022a6 <HAL_UART_Transmit_IT+0x15e>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1dba      	adds	r2, r7, #6
 80021b4:	2154      	movs	r1, #84	; 0x54
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1dba      	adds	r2, r7, #6
 80021be:	2156      	movs	r1, #86	; 0x56
 80021c0:	8812      	ldrh	r2, [r2, #0]
 80021c2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	228c      	movs	r2, #140	; 0x8c
 80021ce:	2100      	movs	r1, #0
 80021d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2284      	movs	r2, #132	; 0x84
 80021d6:	2121      	movs	r1, #33	; 0x21
 80021d8:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	059b      	lsls	r3, r3, #22
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d12e      	bne.n	8002244 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d107      	bne.n	8002202 <HAL_UART_Transmit_IT+0xba>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_UART_Transmit_IT+0x168>)
 80021fe:	675a      	str	r2, [r3, #116]	; 0x74
 8002200:	e002      	b.n	8002208 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <HAL_UART_Transmit_IT+0x16c>)
 8002206:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002210:	f3ef 8310 	mrs	r3, PRIMASK
 8002214:	61fb      	str	r3, [r7, #28]
  return(result);
 8002216:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	2301      	movs	r3, #1
 800221c:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f383 8810 	msr	PRIMASK, r3
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0409      	lsls	r1, r1, #16
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f383 8810 	msr	PRIMASK, r3
}
 8002242:	e02d      	b.n	80022a0 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_UART_Transmit_IT+0x118>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_UART_Transmit_IT+0x170>)
 800225c:	675a      	str	r2, [r3, #116]	; 0x74
 800225e:	e002      	b.n	8002266 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_UART_Transmit_IT+0x174>)
 8002264:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226e:	f3ef 8310 	mrs	r3, PRIMASK
 8002272:	613b      	str	r3, [r7, #16]
  return(result);
 8002274:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f383 8810 	msr	PRIMASK, r3
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b00c      	add	sp, #48	; 0x30
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	08003a09 	.word	0x08003a09
 80022b4:	0800391d 	.word	0x0800391d
 80022b8:	0800385f 	.word	0x0800385f
 80022bc:	080037ab 	.word	0x080037ab

080022c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2288      	movs	r2, #136	; 0x88
 80022d2:	589b      	ldr	r3, [r3, r2]
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d15a      	bne.n	800238e <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_Receive_IT+0x26>
 80022de:	1dbb      	adds	r3, r7, #6
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e052      	b.n	8002390 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	015b      	lsls	r3, r3, #5
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d109      	bne.n	800230a <HAL_UART_Receive_IT+0x4a>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d001      	beq.n	800230a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e042      	b.n	8002390 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_UART_Receive_IT+0x58>
 8002314:	2302      	movs	r3, #2
 8002316:	e03b      	b.n	8002390 <HAL_UART_Receive_IT+0xd0>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	2101      	movs	r1, #1
 800231e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_UART_Receive_IT+0xd8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d025      	beq.n	800237c <HAL_UART_Receive_IT+0xbc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_UART_Receive_IT+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d020      	beq.n	800237c <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	4013      	ands	r3, r2
 8002346:	d019      	beq.n	800237c <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002348:	f3ef 8310 	mrs	r3, PRIMASK
 800234c:	613b      	str	r3, [r7, #16]
  return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2301      	movs	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f383 8810 	msr	PRIMASK, r3
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	04c9      	lsls	r1, r1, #19
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f383 8810 	msr	PRIMASK, r3
}
 800237a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0018      	movs	r0, r3
 8002386:	f001 f887 	bl	8003498 <UART_Start_Receive_IT>
 800238a:	0003      	movs	r3, r0
 800238c:	e000      	b.n	8002390 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b008      	add	sp, #32
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40008000 	.word	0x40008000
 800239c:	40008400 	.word	0x40008400

080023a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b0aa      	sub	sp, #168	; 0xa8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	22a4      	movs	r2, #164	; 0xa4
 80023b0:	18b9      	adds	r1, r7, r2
 80023b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	20a0      	movs	r0, #160	; 0xa0
 80023bc:	1839      	adds	r1, r7, r0
 80023be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	249c      	movs	r4, #156	; 0x9c
 80023c8:	1939      	adds	r1, r7, r4
 80023ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023cc:	0011      	movs	r1, r2
 80023ce:	18bb      	adds	r3, r7, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4aa0      	ldr	r2, [pc, #640]	; (8002654 <HAL_UART_IRQHandler+0x2b4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	2298      	movs	r2, #152	; 0x98
 80023d8:	18bd      	adds	r5, r7, r2
 80023da:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80023dc:	18bb      	adds	r3, r7, r2
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d11a      	bne.n	800241a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	4013      	ands	r3, r2
 80023ec:	d015      	beq.n	800241a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2220      	movs	r2, #32
 80023f4:	4013      	ands	r3, r2
 80023f6:	d105      	bne.n	8002404 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	d00a      	beq.n	800241a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	2b00      	cmp	r3, #0
 800240a:	d100      	bne.n	800240e <HAL_UART_IRQHandler+0x6e>
 800240c:	e2cf      	b.n	80029ae <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	0010      	movs	r0, r2
 8002416:	4798      	blx	r3
      }
      return;
 8002418:	e2c9      	b.n	80029ae <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800241a:	2398      	movs	r3, #152	; 0x98
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d100      	bne.n	8002426 <HAL_UART_IRQHandler+0x86>
 8002424:	e11e      	b.n	8002664 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002426:	239c      	movs	r3, #156	; 0x9c
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a8a      	ldr	r2, [pc, #552]	; (8002658 <HAL_UART_IRQHandler+0x2b8>)
 800242e:	4013      	ands	r3, r2
 8002430:	d106      	bne.n	8002440 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002432:	23a0      	movs	r3, #160	; 0xa0
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a88      	ldr	r2, [pc, #544]	; (800265c <HAL_UART_IRQHandler+0x2bc>)
 800243a:	4013      	ands	r3, r2
 800243c:	d100      	bne.n	8002440 <HAL_UART_IRQHandler+0xa0>
 800243e:	e111      	b.n	8002664 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002440:	23a4      	movs	r3, #164	; 0xa4
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d012      	beq.n	8002472 <HAL_UART_IRQHandler+0xd2>
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d00b      	beq.n	8002472 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	228c      	movs	r2, #140	; 0x8c
 8002466:	589b      	ldr	r3, [r3, r2]
 8002468:	2201      	movs	r2, #1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	218c      	movs	r1, #140	; 0x8c
 8002470:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002472:	23a4      	movs	r3, #164	; 0xa4
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d011      	beq.n	80024a2 <HAL_UART_IRQHandler+0x102>
 800247e:	239c      	movs	r3, #156	; 0x9c
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d00b      	beq.n	80024a2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2202      	movs	r2, #2
 8002490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	228c      	movs	r2, #140	; 0x8c
 8002496:	589b      	ldr	r3, [r3, r2]
 8002498:	2204      	movs	r2, #4
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	218c      	movs	r1, #140	; 0x8c
 80024a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a2:	23a4      	movs	r3, #164	; 0xa4
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2204      	movs	r2, #4
 80024aa:	4013      	ands	r3, r2
 80024ac:	d011      	beq.n	80024d2 <HAL_UART_IRQHandler+0x132>
 80024ae:	239c      	movs	r3, #156	; 0x9c
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2204      	movs	r2, #4
 80024c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	228c      	movs	r2, #140	; 0x8c
 80024c6:	589b      	ldr	r3, [r3, r2]
 80024c8:	2202      	movs	r2, #2
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	218c      	movs	r1, #140	; 0x8c
 80024d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024d2:	23a4      	movs	r3, #164	; 0xa4
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2208      	movs	r2, #8
 80024da:	4013      	ands	r3, r2
 80024dc:	d017      	beq.n	800250e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024de:	23a0      	movs	r3, #160	; 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2220      	movs	r2, #32
 80024e6:	4013      	ands	r3, r2
 80024e8:	d105      	bne.n	80024f6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80024ea:	239c      	movs	r3, #156	; 0x9c
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a59      	ldr	r2, [pc, #356]	; (8002658 <HAL_UART_IRQHandler+0x2b8>)
 80024f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	228c      	movs	r2, #140	; 0x8c
 8002502:	589b      	ldr	r3, [r3, r2]
 8002504:	2208      	movs	r2, #8
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	218c      	movs	r1, #140	; 0x8c
 800250c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800250e:	23a4      	movs	r3, #164	; 0xa4
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_UART_IRQHandler+0x1a4>
 800251c:	23a0      	movs	r3, #160	; 0xa0
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	04db      	lsls	r3, r3, #19
 8002526:	4013      	ands	r3, r2
 8002528:	d00c      	beq.n	8002544 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	228c      	movs	r2, #140	; 0x8c
 8002538:	589b      	ldr	r3, [r3, r2]
 800253a:	2220      	movs	r2, #32
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	218c      	movs	r1, #140	; 0x8c
 8002542:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	228c      	movs	r2, #140	; 0x8c
 8002548:	589b      	ldr	r3, [r3, r2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <HAL_UART_IRQHandler+0x1b0>
 800254e:	e230      	b.n	80029b2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002550:	23a4      	movs	r3, #164	; 0xa4
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	d015      	beq.n	8002588 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800255c:	23a0      	movs	r3, #160	; 0xa0
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2220      	movs	r2, #32
 8002564:	4013      	ands	r3, r2
 8002566:	d106      	bne.n	8002576 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002568:	239c      	movs	r3, #156	; 0x9c
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	055b      	lsls	r3, r3, #21
 8002572:	4013      	ands	r3, r2
 8002574:	d008      	beq.n	8002588 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	0010      	movs	r0, r2
 8002586:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	228c      	movs	r2, #140	; 0x8c
 800258c:	589b      	ldr	r3, [r3, r2]
 800258e:	2194      	movs	r1, #148	; 0x94
 8002590:	187a      	adds	r2, r7, r1
 8002592:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	4013      	ands	r3, r2
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d004      	beq.n	80025ac <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2228      	movs	r2, #40	; 0x28
 80025a8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025aa:	d047      	beq.n	800263c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f001 f87e 	bl	80036b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	4013      	ands	r3, r2
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d137      	bne.n	8002632 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c2:	f3ef 8310 	mrs	r3, PRIMASK
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	2090      	movs	r0, #144	; 0x90
 80025cc:	183a      	adds	r2, r7, r0
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d6:	f383 8810 	msr	PRIMASK, r3
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	438a      	bics	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f4:	f383 8810 	msr	PRIMASK, r3
}
 80025f8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <HAL_UART_IRQHandler+0x2c0>)
 8002608:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800260e:	0018      	movs	r0, r3
 8002610:	f7fe fbd8 	bl	8000dc4 <HAL_DMA_Abort_IT>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d01a      	beq.n	800264e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002622:	0018      	movs	r0, r3
 8002624:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002626:	e012      	b.n	800264e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f9da 	bl	80029e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	e00d      	b.n	800264e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f9d5 	bl	80029e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263a:	e008      	b.n	800264e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f9d0 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	228c      	movs	r2, #140	; 0x8c
 8002648:	2100      	movs	r1, #0
 800264a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800264c:	e1b1      	b.n	80029b2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264e:	46c0      	nop			; (mov r8, r8)
    return;
 8002650:	e1af      	b.n	80029b2 <HAL_UART_IRQHandler+0x612>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	0000080f 	.word	0x0000080f
 8002658:	10000001 	.word	0x10000001
 800265c:	04000120 	.word	0x04000120
 8002660:	0800377d 	.word	0x0800377d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d000      	beq.n	800266e <HAL_UART_IRQHandler+0x2ce>
 800266c:	e135      	b.n	80028da <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800266e:	23a4      	movs	r3, #164	; 0xa4
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	4013      	ands	r3, r2
 8002678:	d100      	bne.n	800267c <HAL_UART_IRQHandler+0x2dc>
 800267a:	e12e      	b.n	80028da <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	4013      	ands	r3, r2
 8002686:	d100      	bne.n	800268a <HAL_UART_IRQHandler+0x2ea>
 8002688:	e127      	b.n	80028da <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	4013      	ands	r3, r2
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d000      	beq.n	80026a2 <HAL_UART_IRQHandler+0x302>
 80026a0:	e09e      	b.n	80027e0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	217e      	movs	r1, #126	; 0x7e
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d100      	bne.n	80026ba <HAL_UART_IRQHandler+0x31a>
 80026b8:	e17d      	b.n	80029b6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	225c      	movs	r2, #92	; 0x5c
 80026be:	5a9b      	ldrh	r3, [r3, r2]
 80026c0:	187a      	adds	r2, r7, r1
 80026c2:	8812      	ldrh	r2, [r2, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d300      	bcc.n	80026ca <HAL_UART_IRQHandler+0x32a>
 80026c8:	e175      	b.n	80029b6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	187a      	adds	r2, r7, r1
 80026ce:	215e      	movs	r1, #94	; 0x5e
 80026d0:	8812      	ldrh	r2, [r2, #0]
 80026d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2220      	movs	r2, #32
 80026de:	4013      	ands	r3, r2
 80026e0:	d16f      	bne.n	80027c2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e2:	f3ef 8310 	mrs	r3, PRIMASK
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ec:	2301      	movs	r3, #1
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	49b1      	ldr	r1, [pc, #708]	; (80029c8 <HAL_UART_IRQHandler+0x628>)
 8002704:	400a      	ands	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	f383 8810 	msr	PRIMASK, r3
}
 8002712:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002714:	f3ef 8310 	mrs	r3, PRIMASK
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271c:	677b      	str	r3, [r7, #116]	; 0x74
 800271e:	2301      	movs	r3, #1
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	438a      	bics	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	f383 8810 	msr	PRIMASK, r3
}
 8002744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8310 	mrs	r3, PRIMASK
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800274c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274e:	673b      	str	r3, [r7, #112]	; 0x70
 8002750:	2301      	movs	r3, #1
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002756:	f383 8810 	msr	PRIMASK, r3
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	438a      	bics	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	f383 8810 	msr	PRIMASK, r3
}
 8002776:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2288      	movs	r2, #136	; 0x88
 800277c:	2120      	movs	r1, #32
 800277e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800278c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002790:	2301      	movs	r3, #1
 8002792:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2110      	movs	r1, #16
 80027a8:	438a      	bics	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe faa1 	bl	8000d04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	225c      	movs	r2, #92	; 0x5c
 80027c6:	5a9a      	ldrh	r2, [r3, r2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	215e      	movs	r1, #94	; 0x5e
 80027cc:	5a5b      	ldrh	r3, [r3, r1]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f90b 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027de:	e0ea      	b.n	80029b6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	225c      	movs	r2, #92	; 0x5c
 80027e4:	5a99      	ldrh	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	225e      	movs	r2, #94	; 0x5e
 80027ea:	5a9b      	ldrh	r3, [r3, r2]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	208e      	movs	r0, #142	; 0x8e
 80027f0:	183b      	adds	r3, r7, r0
 80027f2:	1a8a      	subs	r2, r1, r2
 80027f4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	225e      	movs	r2, #94	; 0x5e
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d100      	bne.n	8002804 <HAL_UART_IRQHandler+0x464>
 8002802:	e0da      	b.n	80029ba <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002804:	183b      	adds	r3, r7, r0
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <HAL_UART_IRQHandler+0x46e>
 800280c:	e0d5      	b.n	80029ba <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280e:	f3ef 8310 	mrs	r3, PRIMASK
 8002812:	60fb      	str	r3, [r7, #12]
  return(result);
 8002814:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002816:	2488      	movs	r4, #136	; 0x88
 8002818:	193a      	adds	r2, r7, r4
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4966      	ldr	r1, [pc, #408]	; (80029cc <HAL_UART_IRQHandler+0x62c>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	193b      	adds	r3, r7, r4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002846:	f3ef 8310 	mrs	r3, PRIMASK
 800284a:	61bb      	str	r3, [r7, #24]
  return(result);
 800284c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800284e:	2484      	movs	r4, #132	; 0x84
 8002850:	193a      	adds	r2, r7, r4
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f383 8810 	msr	PRIMASK, r3
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4959      	ldr	r1, [pc, #356]	; (80029d0 <HAL_UART_IRQHandler+0x630>)
 800286c:	400a      	ands	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	193b      	adds	r3, r7, r4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f383 8810 	msr	PRIMASK, r3
}
 800287c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2288      	movs	r2, #136	; 0x88
 8002882:	2120      	movs	r1, #32
 8002884:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289a:	2480      	movs	r4, #128	; 0x80
 800289c:	193a      	adds	r2, r7, r4
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2110      	movs	r1, #16
 80028b8:	438a      	bics	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f88e 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028d8:	e06f      	b.n	80029ba <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028da:	23a4      	movs	r3, #164	; 0xa4
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	035b      	lsls	r3, r3, #13
 80028e4:	4013      	ands	r3, r2
 80028e6:	d010      	beq.n	800290a <HAL_UART_IRQHandler+0x56a>
 80028e8:	239c      	movs	r3, #156	; 0x9c
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	03db      	lsls	r3, r3, #15
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	0352      	lsls	r2, r2, #13
 80028fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f001 fd76 	bl	80043f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002908:	e05a      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800290a:	23a4      	movs	r3, #164	; 0xa4
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	4013      	ands	r3, r2
 8002914:	d016      	beq.n	8002944 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	4013      	ands	r3, r2
 8002920:	d106      	bne.n	8002930 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002922:	239c      	movs	r3, #156	; 0x9c
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	4013      	ands	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	2b00      	cmp	r3, #0
 8002936:	d042      	beq.n	80029be <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	0010      	movs	r0, r2
 8002940:	4798      	blx	r3
    }
    return;
 8002942:	e03c      	b.n	80029be <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002944:	23a4      	movs	r3, #164	; 0xa4
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	4013      	ands	r3, r2
 800294e:	d00a      	beq.n	8002966 <HAL_UART_IRQHandler+0x5c6>
 8002950:	23a0      	movs	r3, #160	; 0xa0
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	4013      	ands	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f001 f8cc 	bl	8003afc <UART_EndTransmit_IT>
    return;
 8002964:	e02c      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002966:	23a4      	movs	r3, #164	; 0xa4
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	4013      	ands	r3, r2
 8002972:	d00b      	beq.n	800298c <HAL_UART_IRQHandler+0x5ec>
 8002974:	23a0      	movs	r3, #160	; 0xa0
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	4013      	ands	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f001 fd45 	bl	8004414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800298a:	e019      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800298c:	23a4      	movs	r3, #164	; 0xa4
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	045b      	lsls	r3, r3, #17
 8002996:	4013      	ands	r3, r2
 8002998:	d012      	beq.n	80029c0 <HAL_UART_IRQHandler+0x620>
 800299a:	23a0      	movs	r3, #160	; 0xa0
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da0d      	bge.n	80029c0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f001 fd2c 	bl	8004404 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029ac:	e008      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
      return;
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	e006      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
    return;
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	e004      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
      return;
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	e002      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
      return;
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	e000      	b.n	80029c0 <HAL_UART_IRQHandler+0x620>
    return;
 80029be:	46c0      	nop			; (mov r8, r8)
  }
}
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b02a      	add	sp, #168	; 0xa8
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	fffffeff 	.word	0xfffffeff
 80029cc:	fffffedf 	.word	0xfffffedf
 80029d0:	effffffe 	.word	0xeffffffe

080029d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	000a      	movs	r2, r1
 80029fe:	1cbb      	adds	r3, r7, #2
 8002a00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a14:	231a      	movs	r3, #26
 8002a16:	2220      	movs	r2, #32
 8002a18:	4694      	mov	ip, r2
 8002a1a:	44bc      	add	ip, r7
 8002a1c:	4463      	add	r3, ip
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4ac1      	ldr	r2, [pc, #772]	; (8002d48 <UART_SetConfig+0x33c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4abd      	ldr	r2, [pc, #756]	; (8002d4c <UART_SetConfig+0x340>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	68d9      	ldr	r1, [r3, #12]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	0003      	movs	r3, r0
 8002a66:	430b      	orrs	r3, r1
 8002a68:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4ab6      	ldr	r2, [pc, #728]	; (8002d50 <UART_SetConfig+0x344>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <UART_SetConfig+0x82>
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4ab5      	ldr	r2, [pc, #724]	; (8002d54 <UART_SetConfig+0x348>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4ab0      	ldr	r2, [pc, #704]	; (8002d58 <UART_SetConfig+0x34c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	220f      	movs	r2, #15
 8002aac:	4393      	bics	r3, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	0003      	movs	r3, r0
 8002aba:	430b      	orrs	r3, r1
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4aa6      	ldr	r2, [pc, #664]	; (8002d5c <UART_SetConfig+0x350>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d136      	bne.n	8002b36 <UART_SetConfig+0x12a>
 8002ac8:	4ba5      	ldr	r3, [pc, #660]	; (8002d60 <UART_SetConfig+0x354>)
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	2203      	movs	r2, #3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d020      	beq.n	8002b16 <UART_SetConfig+0x10a>
 8002ad4:	d827      	bhi.n	8002b26 <UART_SetConfig+0x11a>
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d00d      	beq.n	8002af6 <UART_SetConfig+0xea>
 8002ada:	d824      	bhi.n	8002b26 <UART_SetConfig+0x11a>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <UART_SetConfig+0xda>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d010      	beq.n	8002b06 <UART_SetConfig+0xfa>
 8002ae4:	e01f      	b.n	8002b26 <UART_SetConfig+0x11a>
 8002ae6:	231b      	movs	r3, #27
 8002ae8:	2220      	movs	r2, #32
 8002aea:	4694      	mov	ip, r2
 8002aec:	44bc      	add	ip, r7
 8002aee:	4463      	add	r3, ip
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e16f      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002af6:	231b      	movs	r3, #27
 8002af8:	2220      	movs	r2, #32
 8002afa:	4694      	mov	ip, r2
 8002afc:	44bc      	add	ip, r7
 8002afe:	4463      	add	r3, ip
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e167      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b06:	231b      	movs	r3, #27
 8002b08:	2220      	movs	r2, #32
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	2204      	movs	r2, #4
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e15f      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2220      	movs	r2, #32
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	44bc      	add	ip, r7
 8002b1e:	4463      	add	r3, ip
 8002b20:	2208      	movs	r2, #8
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e157      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2220      	movs	r2, #32
 8002b2a:	4694      	mov	ip, r2
 8002b2c:	44bc      	add	ip, r7
 8002b2e:	4463      	add	r3, ip
 8002b30:	2210      	movs	r2, #16
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e14f      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a8a      	ldr	r2, [pc, #552]	; (8002d64 <UART_SetConfig+0x358>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d136      	bne.n	8002bae <UART_SetConfig+0x1a2>
 8002b40:	4b87      	ldr	r3, [pc, #540]	; (8002d60 <UART_SetConfig+0x354>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	220c      	movs	r2, #12
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d020      	beq.n	8002b8e <UART_SetConfig+0x182>
 8002b4c:	d827      	bhi.n	8002b9e <UART_SetConfig+0x192>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d00d      	beq.n	8002b6e <UART_SetConfig+0x162>
 8002b52:	d824      	bhi.n	8002b9e <UART_SetConfig+0x192>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <UART_SetConfig+0x152>
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d010      	beq.n	8002b7e <UART_SetConfig+0x172>
 8002b5c:	e01f      	b.n	8002b9e <UART_SetConfig+0x192>
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2220      	movs	r2, #32
 8002b62:	4694      	mov	ip, r2
 8002b64:	44bc      	add	ip, r7
 8002b66:	4463      	add	r3, ip
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e133      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b6e:	231b      	movs	r3, #27
 8002b70:	2220      	movs	r2, #32
 8002b72:	4694      	mov	ip, r2
 8002b74:	44bc      	add	ip, r7
 8002b76:	4463      	add	r3, ip
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e12b      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b7e:	231b      	movs	r3, #27
 8002b80:	2220      	movs	r2, #32
 8002b82:	4694      	mov	ip, r2
 8002b84:	44bc      	add	ip, r7
 8002b86:	4463      	add	r3, ip
 8002b88:	2204      	movs	r2, #4
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e123      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b8e:	231b      	movs	r3, #27
 8002b90:	2220      	movs	r2, #32
 8002b92:	4694      	mov	ip, r2
 8002b94:	44bc      	add	ip, r7
 8002b96:	4463      	add	r3, ip
 8002b98:	2208      	movs	r2, #8
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e11b      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	4694      	mov	ip, r2
 8002ba4:	44bc      	add	ip, r7
 8002ba6:	4463      	add	r3, ip
 8002ba8:	2210      	movs	r2, #16
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e113      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6d      	ldr	r2, [pc, #436]	; (8002d68 <UART_SetConfig+0x35c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d136      	bne.n	8002c26 <UART_SetConfig+0x21a>
 8002bb8:	4b69      	ldr	r3, [pc, #420]	; (8002d60 <UART_SetConfig+0x354>)
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2230      	movs	r2, #48	; 0x30
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d020      	beq.n	8002c06 <UART_SetConfig+0x1fa>
 8002bc4:	d827      	bhi.n	8002c16 <UART_SetConfig+0x20a>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d00d      	beq.n	8002be6 <UART_SetConfig+0x1da>
 8002bca:	d824      	bhi.n	8002c16 <UART_SetConfig+0x20a>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <UART_SetConfig+0x1ca>
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d010      	beq.n	8002bf6 <UART_SetConfig+0x1ea>
 8002bd4:	e01f      	b.n	8002c16 <UART_SetConfig+0x20a>
 8002bd6:	231b      	movs	r3, #27
 8002bd8:	2220      	movs	r2, #32
 8002bda:	4694      	mov	ip, r2
 8002bdc:	44bc      	add	ip, r7
 8002bde:	4463      	add	r3, ip
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e0f7      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002be6:	231b      	movs	r3, #27
 8002be8:	2220      	movs	r2, #32
 8002bea:	4694      	mov	ip, r2
 8002bec:	44bc      	add	ip, r7
 8002bee:	4463      	add	r3, ip
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e0ef      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002bf6:	231b      	movs	r3, #27
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4694      	mov	ip, r2
 8002bfc:	44bc      	add	ip, r7
 8002bfe:	4463      	add	r3, ip
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e0e7      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2220      	movs	r2, #32
 8002c0a:	4694      	mov	ip, r2
 8002c0c:	44bc      	add	ip, r7
 8002c0e:	4463      	add	r3, ip
 8002c10:	2208      	movs	r2, #8
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e0df      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c16:	231b      	movs	r3, #27
 8002c18:	2220      	movs	r2, #32
 8002c1a:	4694      	mov	ip, r2
 8002c1c:	44bc      	add	ip, r7
 8002c1e:	4463      	add	r3, ip
 8002c20:	2210      	movs	r2, #16
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e0d7      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <UART_SetConfig+0x360>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d107      	bne.n	8002c40 <UART_SetConfig+0x234>
 8002c30:	231b      	movs	r3, #27
 8002c32:	2220      	movs	r2, #32
 8002c34:	4694      	mov	ip, r2
 8002c36:	44bc      	add	ip, r7
 8002c38:	4463      	add	r3, ip
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e0ca      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <UART_SetConfig+0x364>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d107      	bne.n	8002c5a <UART_SetConfig+0x24e>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4694      	mov	ip, r2
 8002c50:	44bc      	add	ip, r7
 8002c52:	4463      	add	r3, ip
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e0bd      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a45      	ldr	r2, [pc, #276]	; (8002d74 <UART_SetConfig+0x368>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d107      	bne.n	8002c74 <UART_SetConfig+0x268>
 8002c64:	231b      	movs	r3, #27
 8002c66:	2220      	movs	r2, #32
 8002c68:	4694      	mov	ip, r2
 8002c6a:	44bc      	add	ip, r7
 8002c6c:	4463      	add	r3, ip
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e0b0      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <UART_SetConfig+0x344>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d143      	bne.n	8002d06 <UART_SetConfig+0x2fa>
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <UART_SetConfig+0x354>)
 8002c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c82:	23c0      	movs	r3, #192	; 0xc0
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4013      	ands	r3, r2
 8002c88:	22c0      	movs	r2, #192	; 0xc0
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02a      	beq.n	8002ce6 <UART_SetConfig+0x2da>
 8002c90:	22c0      	movs	r2, #192	; 0xc0
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d82e      	bhi.n	8002cf6 <UART_SetConfig+0x2ea>
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d012      	beq.n	8002cc6 <UART_SetConfig+0x2ba>
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d826      	bhi.n	8002cf6 <UART_SetConfig+0x2ea>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <UART_SetConfig+0x2aa>
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d010      	beq.n	8002cd6 <UART_SetConfig+0x2ca>
 8002cb4:	e01f      	b.n	8002cf6 <UART_SetConfig+0x2ea>
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	2220      	movs	r2, #32
 8002cba:	4694      	mov	ip, r2
 8002cbc:	44bc      	add	ip, r7
 8002cbe:	4463      	add	r3, ip
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e087      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4694      	mov	ip, r2
 8002ccc:	44bc      	add	ip, r7
 8002cce:	4463      	add	r3, ip
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e07f      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2220      	movs	r2, #32
 8002cda:	4694      	mov	ip, r2
 8002cdc:	44bc      	add	ip, r7
 8002cde:	4463      	add	r3, ip
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e077      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002ce6:	231b      	movs	r3, #27
 8002ce8:	2220      	movs	r2, #32
 8002cea:	4694      	mov	ip, r2
 8002cec:	44bc      	add	ip, r7
 8002cee:	4463      	add	r3, ip
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e06f      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002cf6:	231b      	movs	r3, #27
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4694      	mov	ip, r2
 8002cfc:	44bc      	add	ip, r7
 8002cfe:	4463      	add	r3, ip
 8002d00:	2210      	movs	r2, #16
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e067      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <UART_SetConfig+0x348>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d15b      	bne.n	8002dc8 <UART_SetConfig+0x3bc>
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <UART_SetConfig+0x354>)
 8002d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d14:	23c0      	movs	r3, #192	; 0xc0
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	22c0      	movs	r2, #192	; 0xc0
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d042      	beq.n	8002da8 <UART_SetConfig+0x39c>
 8002d22:	22c0      	movs	r2, #192	; 0xc0
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d846      	bhi.n	8002db8 <UART_SetConfig+0x3ac>
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02a      	beq.n	8002d88 <UART_SetConfig+0x37c>
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d83e      	bhi.n	8002db8 <UART_SetConfig+0x3ac>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <UART_SetConfig+0x36c>
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	0052      	lsls	r2, r2, #1
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d028      	beq.n	8002d98 <UART_SetConfig+0x38c>
 8002d46:	e037      	b.n	8002db8 <UART_SetConfig+0x3ac>
 8002d48:	cfff69f3 	.word	0xcfff69f3
 8002d4c:	ffffcfff 	.word	0xffffcfff
 8002d50:	40008000 	.word	0x40008000
 8002d54:	40008400 	.word	0x40008400
 8002d58:	11fff4ff 	.word	0x11fff4ff
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40004400 	.word	0x40004400
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40004c00 	.word	0x40004c00
 8002d70:	40005000 	.word	0x40005000
 8002d74:	40013c00 	.word	0x40013c00
 8002d78:	231b      	movs	r3, #27
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	4694      	mov	ip, r2
 8002d7e:	44bc      	add	ip, r7
 8002d80:	4463      	add	r3, ip
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e026      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002d88:	231b      	movs	r3, #27
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	44bc      	add	ip, r7
 8002d90:	4463      	add	r3, ip
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e01e      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4694      	mov	ip, r2
 8002d9e:	44bc      	add	ip, r7
 8002da0:	4463      	add	r3, ip
 8002da2:	2204      	movs	r2, #4
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e016      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2220      	movs	r2, #32
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2208      	movs	r2, #8
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e00e      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002db8:	231b      	movs	r3, #27
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4694      	mov	ip, r2
 8002dbe:	44bc      	add	ip, r7
 8002dc0:	4463      	add	r3, ip
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e006      	b.n	8002dd6 <UART_SetConfig+0x3ca>
 8002dc8:	231b      	movs	r3, #27
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4694      	mov	ip, r2
 8002dce:	44bc      	add	ip, r7
 8002dd0:	4463      	add	r3, ip
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4ab8      	ldr	r2, [pc, #736]	; (80030bc <UART_SetConfig+0x6b0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0x3e0>
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4ab6      	ldr	r2, [pc, #728]	; (80030c0 <UART_SetConfig+0x6b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d000      	beq.n	8002dec <UART_SetConfig+0x3e0>
 8002dea:	e097      	b.n	8002f1c <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dec:	231b      	movs	r3, #27
 8002dee:	2220      	movs	r2, #32
 8002df0:	4694      	mov	ip, r2
 8002df2:	44bc      	add	ip, r7
 8002df4:	4463      	add	r3, ip
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d015      	beq.n	8002e28 <UART_SetConfig+0x41c>
 8002dfc:	dc18      	bgt.n	8002e30 <UART_SetConfig+0x424>
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d00d      	beq.n	8002e1e <UART_SetConfig+0x412>
 8002e02:	dc15      	bgt.n	8002e30 <UART_SetConfig+0x424>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <UART_SetConfig+0x402>
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d005      	beq.n	8002e18 <UART_SetConfig+0x40c>
 8002e0c:	e010      	b.n	8002e30 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f7fe fef3 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002e12:	0003      	movs	r3, r0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e16:	e015      	b.n	8002e44 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e18:	4baa      	ldr	r3, [pc, #680]	; (80030c4 <UART_SetConfig+0x6b8>)
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e1c:	e012      	b.n	8002e44 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1e:	f7fe fe5f 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8002e22:	0003      	movs	r3, r0
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e26:	e00d      	b.n	8002e44 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e2e:	e009      	b.n	8002e44 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e34:	231a      	movs	r3, #26
 8002e36:	2220      	movs	r2, #32
 8002e38:	4694      	mov	ip, r2
 8002e3a:	44bc      	add	ip, r7
 8002e3c:	4463      	add	r3, ip
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
        break;
 8002e42:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d100      	bne.n	8002e4c <UART_SetConfig+0x440>
 8002e4a:	e146      	b.n	80030da <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e50:	4b9d      	ldr	r3, [pc, #628]	; (80030c8 <UART_SetConfig+0x6bc>)
 8002e52:	0052      	lsls	r2, r2, #1
 8002e54:	5ad3      	ldrh	r3, [r2, r3]
 8002e56:	0019      	movs	r1, r3
 8002e58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e5a:	f7fd f953 	bl	8000104 <__udivsi3>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	0013      	movs	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d305      	bcc.n	8002e7e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d907      	bls.n	8002e8e <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8002e7e:	231a      	movs	r3, #26
 8002e80:	2220      	movs	r2, #32
 8002e82:	4694      	mov	ip, r2
 8002e84:	44bc      	add	ip, r7
 8002e86:	4463      	add	r3, ip
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e045      	b.n	8002f1a <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <UART_SetConfig+0x6bc>)
 8002e9c:	0052      	lsls	r2, r2, #1
 8002e9e:	5ad3      	ldrh	r3, [r2, r3]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	f7fd fa9f 	bl	80003f0 <__aeabi_uldivmod>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0e11      	lsrs	r1, r2, #24
 8002eb8:	021d      	lsls	r5, r3, #8
 8002eba:	430d      	orrs	r5, r1
 8002ebc:	0214      	lsls	r4, r2, #8
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	1900      	adds	r0, r0, r4
 8002ed0:	4169      	adcs	r1, r5
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f7fd fa86 	bl	80003f0 <__aeabi_uldivmod>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	0013      	movs	r3, r2
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	23c0      	movs	r3, #192	; 0xc0
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d309      	bcc.n	8002f0a <UART_SetConfig+0x4fe>
 8002ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	035b      	lsls	r3, r3, #13
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d204      	bcs.n	8002f0a <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	e007      	b.n	8002f1a <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8002f0a:	231a      	movs	r3, #26
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	4694      	mov	ip, r2
 8002f10:	44bc      	add	ip, r7
 8002f12:	4463      	add	r3, ip
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002f18:	e0df      	b.n	80030da <UART_SetConfig+0x6ce>
 8002f1a:	e0de      	b.n	80030da <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d000      	beq.n	8002f2a <UART_SetConfig+0x51e>
 8002f28:	e074      	b.n	8003014 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8002f2a:	231b      	movs	r3, #27
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	4694      	mov	ip, r2
 8002f30:	44bc      	add	ip, r7
 8002f32:	4463      	add	r3, ip
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d015      	beq.n	8002f66 <UART_SetConfig+0x55a>
 8002f3a:	dc18      	bgt.n	8002f6e <UART_SetConfig+0x562>
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00d      	beq.n	8002f5c <UART_SetConfig+0x550>
 8002f40:	dc15      	bgt.n	8002f6e <UART_SetConfig+0x562>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <UART_SetConfig+0x540>
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d005      	beq.n	8002f56 <UART_SetConfig+0x54a>
 8002f4a:	e010      	b.n	8002f6e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7fe fe54 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002f50:	0003      	movs	r3, r0
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f54:	e015      	b.n	8002f82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <UART_SetConfig+0x6b8>)
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f5a:	e012      	b.n	8002f82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5c:	f7fe fdc0 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8002f60:	0003      	movs	r3, r0
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f64:	e00d      	b.n	8002f82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f6c:	e009      	b.n	8002f82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f72:	231a      	movs	r3, #26
 8002f74:	2220      	movs	r2, #32
 8002f76:	4694      	mov	ip, r2
 8002f78:	44bc      	add	ip, r7
 8002f7a:	4463      	add	r3, ip
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
        break;
 8002f80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d100      	bne.n	8002f8a <UART_SetConfig+0x57e>
 8002f88:	e0a7      	b.n	80030da <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <UART_SetConfig+0x6bc>)
 8002f90:	0052      	lsls	r2, r2, #1
 8002f92:	5ad3      	ldrh	r3, [r2, r3]
 8002f94:	0019      	movs	r1, r3
 8002f96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f98:	f7fd f8b4 	bl	8000104 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	005a      	lsls	r2, r3, #1
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	18d2      	adds	r2, r2, r3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	0019      	movs	r1, r3
 8002fae:	0010      	movs	r0, r2
 8002fb0:	f7fd f8a8 	bl	8000104 <__udivsi3>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d921      	bls.n	8003004 <UART_SetConfig+0x5f8>
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d21c      	bcs.n	8003004 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	200e      	movs	r0, #14
 8002fd0:	2420      	movs	r4, #32
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	181b      	adds	r3, r3, r0
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	438a      	bics	r2, r1
 8002fda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b299      	uxth	r1, r3
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	181b      	adds	r3, r3, r0
 8002fec:	193a      	adds	r2, r7, r4
 8002fee:	1812      	adds	r2, r2, r0
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	193a      	adds	r2, r7, r4
 8002ffc:	1812      	adds	r2, r2, r0
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e06a      	b.n	80030da <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	231a      	movs	r3, #26
 8003006:	2220      	movs	r2, #32
 8003008:	4694      	mov	ip, r2
 800300a:	44bc      	add	ip, r7
 800300c:	4463      	add	r3, ip
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e062      	b.n	80030da <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003014:	231b      	movs	r3, #27
 8003016:	2220      	movs	r2, #32
 8003018:	4694      	mov	ip, r2
 800301a:	44bc      	add	ip, r7
 800301c:	4463      	add	r3, ip
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d015      	beq.n	8003050 <UART_SetConfig+0x644>
 8003024:	dc18      	bgt.n	8003058 <UART_SetConfig+0x64c>
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00d      	beq.n	8003046 <UART_SetConfig+0x63a>
 800302a:	dc15      	bgt.n	8003058 <UART_SetConfig+0x64c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0x62a>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <UART_SetConfig+0x634>
 8003034:	e010      	b.n	8003058 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7fe fddf 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 800303a:	0003      	movs	r3, r0
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800303e:	e015      	b.n	800306c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <UART_SetConfig+0x6b8>)
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe fd4b 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800304e:	e00d      	b.n	800306c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003056:	e009      	b.n	800306c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800305c:	231a      	movs	r3, #26
 800305e:	2220      	movs	r2, #32
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
        break;
 800306a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	2b00      	cmp	r3, #0
 8003070:	d033      	beq.n	80030da <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <UART_SetConfig+0x6bc>)
 8003078:	0052      	lsls	r2, r2, #1
 800307a:	5ad3      	ldrh	r3, [r2, r3]
 800307c:	0019      	movs	r1, r3
 800307e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003080:	f7fd f840 	bl	8000104 <__udivsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	001a      	movs	r2, r3
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	18d2      	adds	r2, r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0019      	movs	r1, r3
 8003096:	0010      	movs	r0, r2
 8003098:	f7fd f834 	bl	8000104 <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	b29b      	uxth	r3, r3
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d911      	bls.n	80030cc <UART_SetConfig+0x6c0>
 80030a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	025b      	lsls	r3, r3, #9
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	e00e      	b.n	80030da <UART_SetConfig+0x6ce>
 80030bc:	40008000 	.word	0x40008000
 80030c0:	40008400 	.word	0x40008400
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	08004728 	.word	0x08004728
      }
      else
      {
        ret = HAL_ERROR;
 80030cc:	231a      	movs	r3, #26
 80030ce:	2220      	movs	r2, #32
 80030d0:	4694      	mov	ip, r2
 80030d2:	44bc      	add	ip, r7
 80030d4:	4463      	add	r3, ip
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	226a      	movs	r2, #106	; 0x6a
 80030de:	2101      	movs	r1, #1
 80030e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	2268      	movs	r2, #104	; 0x68
 80030e6:	2101      	movs	r1, #1
 80030e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	2200      	movs	r2, #0
 80030ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80030f6:	231a      	movs	r3, #26
 80030f8:	2220      	movs	r2, #32
 80030fa:	4694      	mov	ip, r2
 80030fc:	44bc      	add	ip, r7
 80030fe:	4463      	add	r3, ip
 8003100:	781b      	ldrb	r3, [r3, #0]
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b010      	add	sp, #64	; 0x40
 8003108:	bdb0      	pop	{r4, r5, r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)

0800310c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d00b      	beq.n	8003136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <UART_AdvFeatureConfig+0x144>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d00b      	beq.n	8003158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a43      	ldr	r2, [pc, #268]	; (8003254 <UART_AdvFeatureConfig+0x148>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	2204      	movs	r2, #4
 800315e:	4013      	ands	r3, r2
 8003160:	d00b      	beq.n	800317a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <UART_AdvFeatureConfig+0x14c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	d00b      	beq.n	800319c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a34      	ldr	r2, [pc, #208]	; (800325c <UART_AdvFeatureConfig+0x150>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2210      	movs	r2, #16
 80031a2:	4013      	ands	r3, r2
 80031a4:	d00b      	beq.n	80031be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <UART_AdvFeatureConfig+0x154>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	2220      	movs	r2, #32
 80031c4:	4013      	ands	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a25      	ldr	r2, [pc, #148]	; (8003264 <UART_AdvFeatureConfig+0x158>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	4013      	ands	r3, r2
 80031e8:	d01d      	beq.n	8003226 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <UART_AdvFeatureConfig+0x15c>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	035b      	lsls	r3, r3, #13
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <UART_AdvFeatureConfig+0x160>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <UART_AdvFeatureConfig+0x164>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	fffdffff 	.word	0xfffdffff
 8003254:	fffeffff 	.word	0xfffeffff
 8003258:	fffbffff 	.word	0xfffbffff
 800325c:	ffff7fff 	.word	0xffff7fff
 8003260:	ffffefff 	.word	0xffffefff
 8003264:	ffffdfff 	.word	0xffffdfff
 8003268:	ffefffff 	.word	0xffefffff
 800326c:	ff9fffff 	.word	0xff9fffff
 8003270:	fff7ffff 	.word	0xfff7ffff

08003274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	228c      	movs	r2, #140	; 0x8c
 8003280:	2100      	movs	r1, #0
 8003282:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003284:	f7fd fc40 	bl	8000b08 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	2b08      	cmp	r3, #8
 8003298:	d10c      	bne.n	80032b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	0391      	lsls	r1, r2, #14
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <UART_CheckIdleState+0x90>)
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f82e 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d001      	beq.n	80032b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e023      	b.n	80032fc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2204      	movs	r2, #4
 80032bc:	4013      	ands	r3, r2
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d10c      	bne.n	80032dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	03d1      	lsls	r1, r2, #15
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <UART_CheckIdleState+0x90>)
 80032cc:	9200      	str	r2, [sp, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f000 f81a 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e00f      	b.n	80032fc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2284      	movs	r2, #132	; 0x84
 80032e0:	2120      	movs	r1, #32
 80032e2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2288      	movs	r2, #136	; 0x88
 80032e8:	2120      	movs	r1, #32
 80032ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bd80      	pop	{r7, pc}
 8003304:	01ffffff 	.word	0x01ffffff

08003308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b094      	sub	sp, #80	; 0x50
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003318:	e0a7      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331c:	3301      	adds	r3, #1
 800331e:	d100      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003320:	e0a3      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fd fbf1 	bl	8000b08 <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <UART_WaitOnFlagUntilTimeout+0x30>
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	2b00      	cmp	r3, #0
 8003336:	d13f      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003338:	f3ef 8310 	mrs	r3, PRIMASK
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003340:	647b      	str	r3, [r7, #68]	; 0x44
 8003342:	2301      	movs	r3, #1
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	f383 8810 	msr	PRIMASK, r3
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	494e      	ldr	r1, [pc, #312]	; (8003494 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800335a:	400a      	ands	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
 8003374:	2301      	movs	r3, #1
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	438a      	bics	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2284      	movs	r2, #132	; 0x84
 80033a0:	2120      	movs	r1, #32
 80033a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2288      	movs	r2, #136	; 0x88
 80033a8:	2120      	movs	r1, #32
 80033aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e069      	b.n	800348c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d052      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	401a      	ands	r2, r3
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d148      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e2:	f3ef 8310 	mrs	r3, PRIMASK
 80033e6:	613b      	str	r3, [r7, #16]
  return(result);
 80033e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	2301      	movs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f383 8810 	msr	PRIMASK, r3
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4924      	ldr	r1, [pc, #144]	; (8003494 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003404:	400a      	ands	r2, r1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003414:	f3ef 8310 	mrs	r3, PRIMASK
 8003418:	61fb      	str	r3, [r7, #28]
  return(result);
 800341a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
 800341e:	2301      	movs	r3, #1
 8003420:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	438a      	bics	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2284      	movs	r2, #132	; 0x84
 800344a:	2120      	movs	r1, #32
 800344c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2288      	movs	r2, #136	; 0x88
 8003452:	2120      	movs	r1, #32
 8003454:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	228c      	movs	r2, #140	; 0x8c
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e010      	b.n	800348c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	425a      	negs	r2, r3
 800347a:	4153      	adcs	r3, r2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	001a      	movs	r2, r3
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d100      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0x182>
 8003488:	e747      	b.n	800331a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b014      	add	sp, #80	; 0x50
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffffe5f 	.word	0xfffffe5f

08003498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b094      	sub	sp, #80	; 0x50
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	1dbb      	adds	r3, r7, #6
 80034a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1dba      	adds	r2, r7, #6
 80034b0:	215c      	movs	r1, #92	; 0x5c
 80034b2:	8812      	ldrh	r2, [r2, #0]
 80034b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1dba      	adds	r2, r7, #6
 80034ba:	215e      	movs	r1, #94	; 0x5e
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	015b      	lsls	r3, r3, #5
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d10d      	bne.n	80034ee <UART_Start_Receive_IT+0x56>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <UART_Start_Receive_IT+0x4c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2260      	movs	r2, #96	; 0x60
 80034de:	496f      	ldr	r1, [pc, #444]	; (800369c <UART_Start_Receive_IT+0x204>)
 80034e0:	5299      	strh	r1, [r3, r2]
 80034e2:	e02e      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2260      	movs	r2, #96	; 0x60
 80034e8:	21ff      	movs	r1, #255	; 0xff
 80034ea:	5299      	strh	r1, [r3, r2]
 80034ec:	e029      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <UART_Start_Receive_IT+0x7a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <UART_Start_Receive_IT+0x70>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2260      	movs	r2, #96	; 0x60
 8003502:	21ff      	movs	r1, #255	; 0xff
 8003504:	5299      	strh	r1, [r3, r2]
 8003506:	e01c      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2260      	movs	r2, #96	; 0x60
 800350c:	217f      	movs	r1, #127	; 0x7f
 800350e:	5299      	strh	r1, [r3, r2]
 8003510:	e017      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	055b      	lsls	r3, r3, #21
 800351a:	429a      	cmp	r2, r3
 800351c:	d10d      	bne.n	800353a <UART_Start_Receive_IT+0xa2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <UART_Start_Receive_IT+0x98>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2260      	movs	r2, #96	; 0x60
 800352a:	217f      	movs	r1, #127	; 0x7f
 800352c:	5299      	strh	r1, [r3, r2]
 800352e:	e008      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2260      	movs	r2, #96	; 0x60
 8003534:	213f      	movs	r1, #63	; 0x3f
 8003536:	5299      	strh	r1, [r3, r2]
 8003538:	e003      	b.n	8003542 <UART_Start_Receive_IT+0xaa>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2260      	movs	r2, #96	; 0x60
 800353e:	2100      	movs	r1, #0
 8003540:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	228c      	movs	r2, #140	; 0x8c
 8003546:	2100      	movs	r1, #0
 8003548:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2288      	movs	r2, #136	; 0x88
 800354e:	2122      	movs	r1, #34	; 0x22
 8003550:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003552:	f3ef 8310 	mrs	r3, PRIMASK
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800355c:	2301      	movs	r3, #1
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	f383 8810 	msr	PRIMASK, r3
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	059b      	lsls	r3, r3, #22
 800358c:	429a      	cmp	r2, r3
 800358e:	d150      	bne.n	8003632 <UART_Start_Receive_IT+0x19a>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2268      	movs	r2, #104	; 0x68
 8003594:	5a9b      	ldrh	r3, [r3, r2]
 8003596:	1dba      	adds	r2, r7, #6
 8003598:	8812      	ldrh	r2, [r2, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d349      	bcc.n	8003632 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d107      	bne.n	80035ba <UART_Start_Receive_IT+0x122>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a3a      	ldr	r2, [pc, #232]	; (80036a0 <UART_Start_Receive_IT+0x208>)
 80035b6:	671a      	str	r2, [r3, #112]	; 0x70
 80035b8:	e002      	b.n	80035c0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <UART_Start_Receive_IT+0x20c>)
 80035be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c8:	f3ef 8310 	mrs	r3, PRIMASK
 80035cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80035ce:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d2:	2301      	movs	r3, #1
 80035d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	0049      	lsls	r1, r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
 8003606:	2301      	movs	r3, #1
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0549      	lsls	r1, r1, #21
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	e02e      	b.n	8003690 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	015b      	lsls	r3, r3, #5
 800363a:	429a      	cmp	r2, r3
 800363c:	d107      	bne.n	800364e <UART_Start_Receive_IT+0x1b6>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <UART_Start_Receive_IT+0x210>)
 800364a:	671a      	str	r2, [r3, #112]	; 0x70
 800364c:	e002      	b.n	8003654 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <UART_Start_Receive_IT+0x214>)
 8003652:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	613b      	str	r3, [r7, #16]
  return(result);
 8003662:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003664:	643b      	str	r3, [r7, #64]	; 0x40
 8003666:	2301      	movs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2190      	movs	r1, #144	; 0x90
 800367e:	0049      	lsls	r1, r1, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f383 8810 	msr	PRIMASK, r3
}
 800368e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b014      	add	sp, #80	; 0x50
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	000001ff 	.word	0x000001ff
 80036a0:	08004111 	.word	0x08004111
 80036a4:	08003e2d 	.word	0x08003e2d
 80036a8:	08003cc1 	.word	0x08003cc1
 80036ac:	08003b55 	.word	0x08003b55

080036b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b8:	f3ef 8310 	mrs	r3, PRIMASK
 80036bc:	617b      	str	r3, [r7, #20]
  return(result);
 80036be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4926      	ldr	r1, [pc, #152]	; (8003774 <UART_EndRxTransfer+0xc4>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	623b      	str	r3, [r7, #32]
  return(result);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
 80036f4:	2301      	movs	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <UART_EndRxTransfer+0xc8>)
 800370c:	400a      	ands	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d118      	bne.n	8003756 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	60bb      	str	r3, [r7, #8]
  return(result);
 800372a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372e:	2301      	movs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2110      	movs	r1, #16
 8003746:	438a      	bics	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2288      	movs	r2, #136	; 0x88
 800375a:	2120      	movs	r1, #32
 800375c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	671a      	str	r2, [r3, #112]	; 0x70
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b00e      	add	sp, #56	; 0x38
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	fffffedf 	.word	0xfffffedf
 8003778:	effffffe 	.word	0xeffffffe

0800377c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	225e      	movs	r2, #94	; 0x5e
 800378e:	2100      	movs	r1, #0
 8003790:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2256      	movs	r2, #86	; 0x56
 8003796:	2100      	movs	r1, #0
 8003798:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff f921 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2284      	movs	r2, #132	; 0x84
 80037b6:	589b      	ldr	r3, [r3, r2]
 80037b8:	2b21      	cmp	r3, #33	; 0x21
 80037ba:	d14c      	bne.n	8003856 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2256      	movs	r2, #86	; 0x56
 80037c0:	5a9b      	ldrh	r3, [r3, r2]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d132      	bne.n	800382e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2180      	movs	r1, #128	; 0x80
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	617b      	str	r3, [r7, #20]
  return(result);
 8003800:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2301      	movs	r3, #1
 8003806:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2140      	movs	r1, #64	; 0x40
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800382c:	e013      	b.n	8003856 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2256      	movs	r2, #86	; 0x56
 8003848:	5a9b      	ldrh	r3, [r3, r2]
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b299      	uxth	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2256      	movs	r2, #86	; 0x56
 8003854:	5299      	strh	r1, [r3, r2]
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b00a      	add	sp, #40	; 0x28
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08c      	sub	sp, #48	; 0x30
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2284      	movs	r2, #132	; 0x84
 800386a:	589b      	ldr	r3, [r3, r2]
 800386c:	2b21      	cmp	r3, #33	; 0x21
 800386e:	d151      	bne.n	8003914 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2256      	movs	r2, #86	; 0x56
 8003874:	5a9b      	ldrh	r3, [r3, r2]
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d132      	bne.n	80038e2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387c:	f3ef 8310 	mrs	r3, PRIMASK
 8003880:	60fb      	str	r3, [r7, #12]
  return(result);
 8003882:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
 8003886:	2301      	movs	r3, #1
 8003888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	438a      	bics	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f383 8810 	msr	PRIMASK, r3
}
 80038ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038b4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	2301      	movs	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80038e0:	e018      	b.n	8003914 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	001a      	movs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	05d2      	lsls	r2, r2, #23
 80038f4:	0dd2      	lsrs	r2, r2, #23
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2256      	movs	r2, #86	; 0x56
 8003906:	5a9b      	ldrh	r3, [r3, r2]
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b299      	uxth	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2256      	movs	r2, #86	; 0x56
 8003912:	5299      	strh	r1, [r3, r2]
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b00c      	add	sp, #48	; 0x30
 800391a:	bd80      	pop	{r7, pc}

0800391c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2284      	movs	r2, #132	; 0x84
 8003928:	589b      	ldr	r3, [r3, r2]
 800392a:	2b21      	cmp	r3, #33	; 0x21
 800392c:	d165      	bne.n	80039fa <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800392e:	232e      	movs	r3, #46	; 0x2e
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	216a      	movs	r1, #106	; 0x6a
 8003936:	5a52      	ldrh	r2, [r2, r1]
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e059      	b.n	80039f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2256      	movs	r2, #86	; 0x56
 8003940:	5a9b      	ldrh	r3, [r3, r2]
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d133      	bne.n	80039b0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003948:	f3ef 8310 	mrs	r3, PRIMASK
 800394c:	60fb      	str	r3, [r7, #12]
  return(result);
 800394e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	2301      	movs	r3, #1
 8003954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f383 8810 	msr	PRIMASK, r3
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4926      	ldr	r1, [pc, #152]	; (8003a04 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800396a:	400a      	ands	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397a:	f3ef 8310 	mrs	r3, PRIMASK
 800397e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	2301      	movs	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80039ac:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80039ae:	e024      	b.n	80039fa <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	4013      	ands	r3, r2
 80039ba:	d013      	beq.n	80039e4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2256      	movs	r2, #86	; 0x56
 80039d6:	5a9b      	ldrh	r3, [r3, r2]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b299      	uxth	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2256      	movs	r2, #86	; 0x56
 80039e2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80039e4:	212e      	movs	r1, #46	; 0x2e
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	232e      	movs	r3, #46	; 0x2e
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1a0      	bne.n	800393c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b00c      	add	sp, #48	; 0x30
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	ff7fffff 	.word	0xff7fffff

08003a08 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	589b      	ldr	r3, [r3, r2]
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d16a      	bne.n	8003af0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a1a:	232e      	movs	r3, #46	; 0x2e
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	216a      	movs	r1, #106	; 0x6a
 8003a22:	5a52      	ldrh	r2, [r2, r1]
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	e05e      	b.n	8003ae6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2256      	movs	r2, #86	; 0x56
 8003a2c:	5a9b      	ldrh	r3, [r3, r2]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d133      	bne.n	8003a9c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a34:	f3ef 8310 	mrs	r3, PRIMASK
 8003a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	2301      	movs	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4928      	ldr	r1, [pc, #160]	; (8003af8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a66:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a6c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	2301      	movs	r3, #1
 8003a72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003a98:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a9a:	e029      	b.n	8003af0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d018      	beq.n	8003ada <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	05d2      	lsls	r2, r2, #23
 8003aba:	0dd2      	lsrs	r2, r2, #23
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2256      	movs	r2, #86	; 0x56
 8003acc:	5a9b      	ldrh	r3, [r3, r2]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2256      	movs	r2, #86	; 0x56
 8003ad8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ada:	212e      	movs	r1, #46	; 0x2e
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	3a01      	subs	r2, #1
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	232e      	movs	r3, #46	; 0x2e
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d19b      	bne.n	8003a28 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b00c      	add	sp, #48	; 0x30
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	ff7fffff 	.word	0xff7fffff

08003afc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b04:	f3ef 8310 	mrs	r3, PRIMASK
 8003b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	438a      	bics	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2284      	movs	r2, #132	; 0x84
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7fe ff44 	bl	80029d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b006      	add	sp, #24
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b090      	sub	sp, #64	; 0x40
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b5c:	203e      	movs	r0, #62	; 0x3e
 8003b5e:	183b      	adds	r3, r7, r0
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2160      	movs	r1, #96	; 0x60
 8003b64:	5a52      	ldrh	r2, [r2, r1]
 8003b66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2288      	movs	r2, #136	; 0x88
 8003b6c:	589b      	ldr	r3, [r3, r2]
 8003b6e:	2b22      	cmp	r3, #34	; 0x22
 8003b70:	d000      	beq.n	8003b74 <UART_RxISR_8BIT+0x20>
 8003b72:	e097      	b.n	8003ca4 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7a:	213c      	movs	r1, #60	; 0x3c
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	183b      	adds	r3, r7, r0
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b2d9      	uxtb	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	400a      	ands	r2, r1
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	225e      	movs	r2, #94	; 0x5e
 8003ba4:	5a9b      	ldrh	r3, [r3, r2]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b299      	uxth	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	225e      	movs	r2, #94	; 0x5e
 8003bb0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	225e      	movs	r2, #94	; 0x5e
 8003bb6:	5a9b      	ldrh	r3, [r3, r2]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d000      	beq.n	8003bc0 <UART_RxISR_8BIT+0x6c>
 8003bbe:	e079      	b.n	8003cb4 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4936      	ldr	r1, [pc, #216]	; (8003cbc <UART_RxISR_8BIT+0x168>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	f383 8810 	msr	PRIMASK, r3
}
 8003c22:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2288      	movs	r2, #136	; 0x88
 8003c28:	2120      	movs	r1, #32
 8003c2a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d12f      	bne.n	8003c9a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c40:	f3ef 8310 	mrs	r3, PRIMASK
 8003c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c46:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2110      	movs	r1, #16
 8003c62:	438a      	bics	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d103      	bne.n	8003c88 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	225c      	movs	r2, #92	; 0x5c
 8003c8c:	5a9a      	ldrh	r2, [r3, r2]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0011      	movs	r1, r2
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7fe feae 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c98:	e00c      	b.n	8003cb4 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fc fcbd 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003ca2:	e007      	b.n	8003cb4 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2108      	movs	r1, #8
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	619a      	str	r2, [r3, #24]
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b010      	add	sp, #64	; 0x40
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	fffffedf 	.word	0xfffffedf

08003cc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b090      	sub	sp, #64	; 0x40
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cc8:	203e      	movs	r0, #62	; 0x3e
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	2160      	movs	r1, #96	; 0x60
 8003cd0:	5a52      	ldrh	r2, [r2, r1]
 8003cd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2288      	movs	r2, #136	; 0x88
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	d000      	beq.n	8003ce0 <UART_RxISR_16BIT+0x20>
 8003cde:	e097      	b.n	8003e10 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce6:	213c      	movs	r1, #60	; 0x3c
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	183a      	adds	r2, r7, r0
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	225e      	movs	r2, #94	; 0x5e
 8003d10:	5a9b      	ldrh	r3, [r3, r2]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b299      	uxth	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	225e      	movs	r2, #94	; 0x5e
 8003d1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	225e      	movs	r2, #94	; 0x5e
 8003d22:	5a9b      	ldrh	r3, [r3, r2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <UART_RxISR_16BIT+0x6c>
 8003d2a:	e079      	b.n	8003e20 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	617b      	str	r3, [r7, #20]
  return(result);
 8003d32:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4936      	ldr	r1, [pc, #216]	; (8003e28 <UART_RxISR_16BIT+0x168>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d62:	623b      	str	r3, [r7, #32]
  return(result);
 8003d64:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2288      	movs	r2, #136	; 0x88
 8003d94:	2120      	movs	r1, #32
 8003d96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d12f      	bne.n	8003e06 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dac:	f3ef 8310 	mrs	r3, PRIMASK
 8003db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db6:	2301      	movs	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2110      	movs	r1, #16
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	2210      	movs	r2, #16
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d103      	bne.n	8003df4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	225c      	movs	r2, #92	; 0x5c
 8003df8:	5a9a      	ldrh	r2, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7fe fdf8 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e04:	e00c      	b.n	8003e20 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fc fc07 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003e0e:	e007      	b.n	8003e20 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	619a      	str	r2, [r3, #24]
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b010      	add	sp, #64	; 0x40
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	fffffedf 	.word	0xfffffedf

08003e2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b09c      	sub	sp, #112	; 0x70
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e34:	236a      	movs	r3, #106	; 0x6a
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	2160      	movs	r1, #96	; 0x60
 8003e3c:	5a52      	ldrh	r2, [r2, r1]
 8003e3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2288      	movs	r2, #136	; 0x88
 8003e5c:	589b      	ldr	r3, [r3, r2]
 8003e5e:	2b22      	cmp	r3, #34	; 0x22
 8003e60:	d000      	beq.n	8003e64 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003e62:	e141      	b.n	80040e8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e64:	235e      	movs	r3, #94	; 0x5e
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	2168      	movs	r1, #104	; 0x68
 8003e6c:	5a52      	ldrh	r2, [r2, r1]
 8003e6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e70:	e0e8      	b.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e78:	215c      	movs	r1, #92	; 0x5c
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	236a      	movs	r3, #106	; 0x6a
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	400a      	ands	r2, r1
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	225e      	movs	r2, #94	; 0x5e
 8003ea4:	5a9b      	ldrh	r3, [r3, r2]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b299      	uxth	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	225e      	movs	r2, #94	; 0x5e
 8003eb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d049      	beq.n	8003f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d010      	beq.n	8003eec <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003eca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	228c      	movs	r2, #140	; 0x8c
 8003ee0:	589b      	ldr	r3, [r3, r2]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	218c      	movs	r1, #140	; 0x8c
 8003eea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2202      	movs	r2, #2
 8003f02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	228c      	movs	r2, #140	; 0x8c
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	218c      	movs	r1, #140	; 0x8c
 8003f12:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	2204      	movs	r2, #4
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	228c      	movs	r2, #140	; 0x8c
 8003f30:	589b      	ldr	r3, [r3, r2]
 8003f32:	2202      	movs	r2, #2
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	218c      	movs	r1, #140	; 0x8c
 8003f3a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	228c      	movs	r2, #140	; 0x8c
 8003f40:	589b      	ldr	r3, [r3, r2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7fe fd4b 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	228c      	movs	r2, #140	; 0x8c
 8003f52:	2100      	movs	r1, #0
 8003f54:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	225e      	movs	r2, #94	; 0x5e
 8003f5a:	5a9b      	ldrh	r3, [r3, r2]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d170      	bne.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f62:	f3ef 8310 	mrs	r3, PRIMASK
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	495f      	ldr	r1, [pc, #380]	; (8004100 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f94:	f3ef 8310 	mrs	r3, PRIMASK
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	f383 8810 	msr	PRIMASK, r3
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4953      	ldr	r1, [pc, #332]	; (8004104 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc0:	f383 8810 	msr	PRIMASK, r3
}
 8003fc4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2288      	movs	r2, #136	; 0x88
 8003fca:	2120      	movs	r1, #32
 8003fcc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d12f      	bne.n	800403c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe6:	623b      	str	r3, [r7, #32]
  return(result);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fea:	653b      	str	r3, [r7, #80]	; 0x50
 8003fec:	2301      	movs	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f383 8810 	msr	PRIMASK, r3
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2110      	movs	r1, #16
 8004004:	438a      	bics	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	f383 8810 	msr	PRIMASK, r3
}
 8004012:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2210      	movs	r2, #16
 800401c:	4013      	ands	r3, r2
 800401e:	2b10      	cmp	r3, #16
 8004020:	d103      	bne.n	800402a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2210      	movs	r2, #16
 8004028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	225c      	movs	r2, #92	; 0x5c
 800402e:	5a9a      	ldrh	r2, [r3, r2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f7fe fcdd 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
 800403a:	e003      	b.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f7fc faec 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004044:	235e      	movs	r3, #94	; 0x5e
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	2220      	movs	r2, #32
 8004052:	4013      	ands	r3, r2
 8004054:	d000      	beq.n	8004058 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004056:	e70c      	b.n	8003e72 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004058:	204e      	movs	r0, #78	; 0x4e
 800405a:	183b      	adds	r3, r7, r0
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	215e      	movs	r1, #94	; 0x5e
 8004060:	5a52      	ldrh	r2, [r2, r1]
 8004062:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004064:	0001      	movs	r1, r0
 8004066:	187b      	adds	r3, r7, r1
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d044      	beq.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2268      	movs	r2, #104	; 0x68
 8004072:	5a9b      	ldrh	r3, [r3, r2]
 8004074:	187a      	adds	r2, r7, r1
 8004076:	8812      	ldrh	r2, [r2, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d23d      	bcs.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	60bb      	str	r3, [r7, #8]
  return(result);
 8004082:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
 8004086:	2301      	movs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	491a      	ldr	r1, [pc, #104]	; (8004108 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800409e:	400a      	ands	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80040b2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b4:	f3ef 8310 	mrs	r3, PRIMASK
 80040b8:	617b      	str	r3, [r7, #20]
  return(result);
 80040ba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2120      	movs	r1, #32
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f383 8810 	msr	PRIMASK, r3
}
 80040e4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040e6:	e007      	b.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2108      	movs	r1, #8
 80040f4:	430a      	orrs	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b01c      	add	sp, #112	; 0x70
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	fffffeff 	.word	0xfffffeff
 8004104:	effffffe 	.word	0xeffffffe
 8004108:	efffffff 	.word	0xefffffff
 800410c:	08003b55 	.word	0x08003b55

08004110 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b09e      	sub	sp, #120	; 0x78
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004118:	2372      	movs	r3, #114	; 0x72
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	2160      	movs	r1, #96	; 0x60
 8004120:	5a52      	ldrh	r2, [r2, r1]
 8004122:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2288      	movs	r2, #136	; 0x88
 8004140:	589b      	ldr	r3, [r3, r2]
 8004142:	2b22      	cmp	r3, #34	; 0x22
 8004144:	d000      	beq.n	8004148 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004146:	e141      	b.n	80043cc <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004148:	2366      	movs	r3, #102	; 0x66
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	2168      	movs	r1, #104	; 0x68
 8004150:	5a52      	ldrh	r2, [r2, r1]
 8004152:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004154:	e0e8      	b.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	187b      	adds	r3, r7, r1
 8004160:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2272      	movs	r2, #114	; 0x72
 800416c:	18ba      	adds	r2, r7, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	8812      	ldrh	r2, [r2, #0]
 8004172:	4013      	ands	r3, r2
 8004174:	b29a      	uxth	r2, r3
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	225e      	movs	r2, #94	; 0x5e
 8004188:	5a9b      	ldrh	r3, [r3, r2]
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b299      	uxth	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	225e      	movs	r2, #94	; 0x5e
 8004194:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	2207      	movs	r2, #7
 80041a2:	4013      	ands	r3, r2
 80041a4:	d049      	beq.n	800423a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d010      	beq.n	80041d0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80041ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	228c      	movs	r2, #140	; 0x8c
 80041c4:	589b      	ldr	r3, [r3, r2]
 80041c6:	2201      	movs	r2, #1
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	218c      	movs	r1, #140	; 0x8c
 80041ce:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80041d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041da:	2201      	movs	r2, #1
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2202      	movs	r2, #2
 80041e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	228c      	movs	r2, #140	; 0x8c
 80041ec:	589b      	ldr	r3, [r3, r2]
 80041ee:	2204      	movs	r2, #4
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	218c      	movs	r1, #140	; 0x8c
 80041f6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fa:	2204      	movs	r2, #4
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00f      	beq.n	8004220 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004202:	2201      	movs	r2, #1
 8004204:	4013      	ands	r3, r2
 8004206:	d00b      	beq.n	8004220 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	228c      	movs	r2, #140	; 0x8c
 8004214:	589b      	ldr	r3, [r3, r2]
 8004216:	2202      	movs	r2, #2
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	218c      	movs	r1, #140	; 0x8c
 800421e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	228c      	movs	r2, #140	; 0x8c
 8004224:	589b      	ldr	r3, [r3, r2]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fe fbd9 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	228c      	movs	r2, #140	; 0x8c
 8004236:	2100      	movs	r1, #0
 8004238:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	225e      	movs	r2, #94	; 0x5e
 800423e:	5a9b      	ldrh	r3, [r3, r2]
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d170      	bne.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004246:	f3ef 8310 	mrs	r3, PRIMASK
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004250:	2301      	movs	r3, #1
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	495f      	ldr	r1, [pc, #380]	; (80043e4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004268:	400a      	ands	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	f383 8810 	msr	PRIMASK, r3
}
 8004276:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004278:	f3ef 8310 	mrs	r3, PRIMASK
 800427c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004280:	65bb      	str	r3, [r7, #88]	; 0x58
 8004282:	2301      	movs	r3, #1
 8004284:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4953      	ldr	r1, [pc, #332]	; (80043e8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800429a:	400a      	ands	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2288      	movs	r2, #136	; 0x88
 80042ae:	2120      	movs	r1, #32
 80042b0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d12f      	bne.n	8004320 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
 80042d0:	2301      	movs	r3, #1
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	f383 8810 	msr	PRIMASK, r3
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2110      	movs	r1, #16
 80042e8:	438a      	bics	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2210      	movs	r2, #16
 8004300:	4013      	ands	r3, r2
 8004302:	2b10      	cmp	r3, #16
 8004304:	d103      	bne.n	800430e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2210      	movs	r2, #16
 800430c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	225c      	movs	r2, #92	; 0x5c
 8004312:	5a9a      	ldrh	r2, [r3, r2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f7fe fb6b 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
 800431e:	e003      	b.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f7fc f97a 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004328:	2366      	movs	r3, #102	; 0x66
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004334:	2220      	movs	r2, #32
 8004336:	4013      	ands	r3, r2
 8004338:	d000      	beq.n	800433c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800433a:	e70c      	b.n	8004156 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800433c:	2052      	movs	r0, #82	; 0x52
 800433e:	183b      	adds	r3, r7, r0
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	215e      	movs	r1, #94	; 0x5e
 8004344:	5a52      	ldrh	r2, [r2, r1]
 8004346:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004348:	0001      	movs	r1, r0
 800434a:	187b      	adds	r3, r7, r1
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d044      	beq.n	80043dc <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2268      	movs	r2, #104	; 0x68
 8004356:	5a9b      	ldrh	r3, [r3, r2]
 8004358:	187a      	adds	r2, r7, r1
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d23d      	bcs.n	80043dc <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004360:	f3ef 8310 	mrs	r3, PRIMASK
 8004364:	60fb      	str	r3, [r7, #12]
  return(result);
 8004366:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436a:	2301      	movs	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	491a      	ldr	r1, [pc, #104]	; (80043ec <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004382:	400a      	ands	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004396:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004398:	f3ef 8310 	mrs	r3, PRIMASK
 800439c:	61bb      	str	r3, [r7, #24]
  return(result);
 800439e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2120      	movs	r1, #32
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f383 8810 	msr	PRIMASK, r3
}
 80043c8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ca:	e007      	b.n	80043dc <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2108      	movs	r1, #8
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b01e      	add	sp, #120	; 0x78
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	fffffeff 	.word	0xfffffeff
 80043e8:	effffffe 	.word	0xeffffffe
 80043ec:	efffffff 	.word	0xefffffff
 80043f0:	08003cc1 	.word	0x08003cc1

080043f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2280      	movs	r2, #128	; 0x80
 8004430:	5c9b      	ldrb	r3, [r3, r2]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UARTEx_DisableFifoMode+0x16>
 8004436:	2302      	movs	r3, #2
 8004438:	e027      	b.n	800448a <HAL_UARTEx_DisableFifoMode+0x66>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2284      	movs	r2, #132	; 0x84
 8004446:	2124      	movs	r1, #36	; 0x24
 8004448:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	438a      	bics	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	; 0x84
 800447c:	2120      	movs	r1, #32
 800447e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	dfffffff 	.word	0xdfffffff

08004498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2280      	movs	r2, #128	; 0x80
 80044a6:	5c9b      	ldrb	r3, [r3, r2]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e02e      	b.n	800450e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2284      	movs	r2, #132	; 0x84
 80044bc:	2124      	movs	r1, #36	; 0x24
 80044be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2101      	movs	r1, #1
 80044d4:	438a      	bics	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	08d9      	lsrs	r1, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 f854 	bl	800459c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2284      	movs	r2, #132	; 0x84
 8004500:	2120      	movs	r1, #32
 8004502:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e02f      	b.n	8004590 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	2101      	movs	r1, #1
 8004536:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2284      	movs	r2, #132	; 0x84
 800453c:	2124      	movs	r1, #36	; 0x24
 800453e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 f813 	bl	800459c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2284      	movs	r2, #132	; 0x84
 8004582:	2120      	movs	r1, #32
 8004584:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}
 8004598:	f1ffffff 	.word	0xf1ffffff

0800459c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	226a      	movs	r2, #106	; 0x6a
 80045b0:	2101      	movs	r1, #1
 80045b2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2268      	movs	r2, #104	; 0x68
 80045b8:	2101      	movs	r1, #1
 80045ba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045bc:	e043      	b.n	8004646 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045be:	260f      	movs	r6, #15
 80045c0:	19bb      	adds	r3, r7, r6
 80045c2:	2208      	movs	r2, #8
 80045c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045c6:	200e      	movs	r0, #14
 80045c8:	183b      	adds	r3, r7, r0
 80045ca:	2208      	movs	r2, #8
 80045cc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	240d      	movs	r4, #13
 80045da:	193b      	adds	r3, r7, r4
 80045dc:	2107      	movs	r1, #7
 80045de:	400a      	ands	r2, r1
 80045e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	0f5b      	lsrs	r3, r3, #29
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	250c      	movs	r5, #12
 80045ee:	197b      	adds	r3, r7, r5
 80045f0:	2107      	movs	r1, #7
 80045f2:	400a      	ands	r2, r1
 80045f4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	197a      	adds	r2, r7, r5
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	4914      	ldr	r1, [pc, #80]	; (8004650 <UARTEx_SetNbDataToProcess+0xb4>)
 8004600:	5c8a      	ldrb	r2, [r1, r2]
 8004602:	435a      	muls	r2, r3
 8004604:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004606:	197b      	adds	r3, r7, r5
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <UARTEx_SetNbDataToProcess+0xb8>)
 800460c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800460e:	0019      	movs	r1, r3
 8004610:	f7fb fe02 	bl	8000218 <__divsi3>
 8004614:	0003      	movs	r3, r0
 8004616:	b299      	uxth	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	226a      	movs	r2, #106	; 0x6a
 800461c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800461e:	19bb      	adds	r3, r7, r6
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	193a      	adds	r2, r7, r4
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	490a      	ldr	r1, [pc, #40]	; (8004650 <UARTEx_SetNbDataToProcess+0xb4>)
 8004628:	5c8a      	ldrb	r2, [r1, r2]
 800462a:	435a      	muls	r2, r3
 800462c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800462e:	193b      	adds	r3, r7, r4
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <UARTEx_SetNbDataToProcess+0xb8>)
 8004634:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004636:	0019      	movs	r1, r3
 8004638:	f7fb fdee 	bl	8000218 <__divsi3>
 800463c:	0003      	movs	r3, r0
 800463e:	b299      	uxth	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2268      	movs	r2, #104	; 0x68
 8004644:	5299      	strh	r1, [r3, r2]
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b005      	add	sp, #20
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	08004740 	.word	0x08004740
 8004654:	08004748 	.word	0x08004748

08004658 <__libc_init_array>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	2600      	movs	r6, #0
 800465c:	4d0c      	ldr	r5, [pc, #48]	; (8004690 <__libc_init_array+0x38>)
 800465e:	4c0d      	ldr	r4, [pc, #52]	; (8004694 <__libc_init_array+0x3c>)
 8004660:	1b64      	subs	r4, r4, r5
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	42a6      	cmp	r6, r4
 8004666:	d109      	bne.n	800467c <__libc_init_array+0x24>
 8004668:	2600      	movs	r6, #0
 800466a:	f000 f821 	bl	80046b0 <_init>
 800466e:	4d0a      	ldr	r5, [pc, #40]	; (8004698 <__libc_init_array+0x40>)
 8004670:	4c0a      	ldr	r4, [pc, #40]	; (800469c <__libc_init_array+0x44>)
 8004672:	1b64      	subs	r4, r4, r5
 8004674:	10a4      	asrs	r4, r4, #2
 8004676:	42a6      	cmp	r6, r4
 8004678:	d105      	bne.n	8004686 <__libc_init_array+0x2e>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	00b3      	lsls	r3, r6, #2
 800467e:	58eb      	ldr	r3, [r5, r3]
 8004680:	4798      	blx	r3
 8004682:	3601      	adds	r6, #1
 8004684:	e7ee      	b.n	8004664 <__libc_init_array+0xc>
 8004686:	00b3      	lsls	r3, r6, #2
 8004688:	58eb      	ldr	r3, [r5, r3]
 800468a:	4798      	blx	r3
 800468c:	3601      	adds	r6, #1
 800468e:	e7f2      	b.n	8004676 <__libc_init_array+0x1e>
 8004690:	08004758 	.word	0x08004758
 8004694:	08004758 	.word	0x08004758
 8004698:	08004758 	.word	0x08004758
 800469c:	0800475c 	.word	0x0800475c

080046a0 <memset>:
 80046a0:	0003      	movs	r3, r0
 80046a2:	1882      	adds	r2, r0, r2
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	7019      	strb	r1, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
